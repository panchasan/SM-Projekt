
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800ac78  0800ac78  0001ac78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af48  0800af48  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af50  0800af50  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af54  0800af54  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800af58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000021c  0800b174  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800b174  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016181  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee1  00000000  00000000  000363cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  000392b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027544  00000000  00000000  0003b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011079  00000000  00000000  00062e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1d61  00000000  00000000  00073ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe8  00000000  00000000  00165c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ac5c 	.word	0x0800ac5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000220 	.word	0x20000220
 800020c:	0800ac5c 	.word	0x0800ac5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fb36 	bl	800164c <null_ptr_check>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d11c      	bne.n	8001026 <bmp280_get_regs+0x5e>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d019      	beq.n	8001026 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	789b      	ldrb	r3, [r3, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d103      	bne.n	8001002 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001000:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685c      	ldr	r4, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7858      	ldrb	r0, [r3, #1]
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	b29b      	uxth	r3, r3
 800100e:	7bf9      	ldrb	r1, [r7, #15]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	47a0      	blx	r4
 8001014:	4603      	mov	r3, r0
 8001016:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d004      	beq.n	800102a <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8001020:	23fc      	movs	r3, #252	; 0xfc
 8001022:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8001024:	e001      	b.n	800102a <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001026:	23ff      	movs	r3, #255	; 0xff
 8001028:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b089      	sub	sp, #36	; 0x24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d901      	bls.n	8001050 <bmp280_set_regs+0x1a>
    {
        len = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f000 fafb 	bl	800164c <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800105a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d14d      	bne.n	80010fe <bmp280_set_regs+0xc8>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d04a      	beq.n	80010fe <bmp280_set_regs+0xc8>
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d047      	beq.n	80010fe <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d041      	beq.n	80010f8 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	789b      	ldrb	r3, [r3, #2]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d114      	bne.n	80010ac <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001082:	2300      	movs	r3, #0
 8001084:	76fb      	strb	r3, [r7, #27]
 8001086:	e00d      	b.n	80010a4 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001088:	7efb      	ldrb	r3, [r7, #27]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	7efb      	ldrb	r3, [r7, #27]
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	440b      	add	r3, r1
 8001096:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109e:	7efb      	ldrb	r3, [r7, #27]
 80010a0:	3301      	adds	r3, #1
 80010a2:	76fb      	strb	r3, [r7, #27]
 80010a4:	7efa      	ldrb	r2, [r7, #27]
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3ed      	bcc.n	8001088 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d90d      	bls.n	80010ce <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f107 0110 	add.w	r1, r7, #16
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 fae6 	bl	800168c <interleave_data>
                temp_len = ((len * 2) - 1);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	83bb      	strh	r3, [r7, #28]
 80010cc:	e001      	b.n	80010d2 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689c      	ldr	r4, [r3, #8]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	7858      	ldrb	r0, [r3, #1]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7819      	ldrb	r1, [r3, #0]
 80010de:	8bbb      	ldrh	r3, [r7, #28]
 80010e0:	f107 0210 	add.w	r2, r7, #16
 80010e4:	47a0      	blx	r4
 80010e6:	4603      	mov	r3, r0
 80010e8:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80010ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80010f2:	23fc      	movs	r3, #252	; 0xfc
 80010f4:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80010f6:	e005      	b.n	8001104 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80010f8:	23fd      	movs	r3, #253	; 0xfd
 80010fa:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80010fc:	e002      	b.n	8001104 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80010fe:	23ff      	movs	r3, #255	; 0xff
 8001100:	77fb      	strb	r3, [r7, #31]
 8001102:	e000      	b.n	8001106 <bmp280_set_regs+0xd0>
        if (len != 0)
 8001104:	bf00      	nop
    }

    return rslt;
 8001106:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}

08001112 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800111a:	23e0      	movs	r3, #224	; 0xe0
 800111c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800111e:	23b6      	movs	r3, #182	; 0xb6
 8001120:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fa92 	bl	800164c <null_ptr_check>
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10d      	bne.n	8001150 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001134:	f107 010d 	add.w	r1, r7, #13
 8001138:	f107 000e 	add.w	r0, r7, #14
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f7ff ff79 	bl	8001036 <bmp280_set_regs>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2002      	movs	r0, #2
 800114e:	4798      	blx	r3
    }

    return rslt;
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8001164:	2305      	movs	r3, #5
 8001166:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fa6f 	bl	800164c <null_ptr_check>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d150      	bne.n	800121c <bmp280_init+0xc0>
    {
        while (try_count)
 800117a:	e02d      	b.n	80011d8 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	20d0      	movs	r0, #208	; 0xd0
 8001184:	f7ff ff20 	bl	8000fc8 <bmp280_get_regs>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11a      	bne.n	80011ca <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8001198:	2b56      	cmp	r3, #86	; 0x56
 800119a:	d007      	beq.n	80011ac <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b57      	cmp	r3, #87	; 0x57
 80011a2:	d003      	beq.n	80011ac <bmp280_init+0x50>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b58      	cmp	r3, #88	; 0x58
 80011aa:	d10e      	bne.n	80011ca <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffb0 	bl	8001112 <bmp280_soft_reset>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d110      	bne.n	80011e0 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa8f 	bl	80016e2 <get_calib_param>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80011c8:	e00a      	b.n	80011e0 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	200a      	movs	r0, #10
 80011d0:	4798      	blx	r3
            --try_count;
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ce      	bne.n	800117c <bmp280_init+0x20>
 80011de:	e000      	b.n	80011e2 <bmp280_init+0x86>
                break;
 80011e0:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80011e8:	23fe      	movs	r3, #254	; 0xfe
 80011ea:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80011ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d113      	bne.n	800121c <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001232:	2300      	movs	r3, #0
 8001234:	733b      	strb	r3, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800123a:	6838      	ldr	r0, [r7, #0]
 800123c:	f000 fa06 	bl	800164c <null_ptr_check>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d137      	bne.n	80012bc <bmp280_get_config+0x94>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d034      	beq.n	80012bc <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001252:	f107 010c 	add.w	r1, r7, #12
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2202      	movs	r2, #2
 800125a:	20f4      	movs	r0, #244	; 0xf4
 800125c:	f7ff feb4 	bl	8000fc8 <bmp280_get_regs>
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d129      	bne.n	80012c0 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001276:	7b3b      	ldrb	r3, [r7, #12]
 8001278:	109b      	asrs	r3, r3, #2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	095b      	lsrs	r3, r3, #5
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8001290:	7b7b      	ldrb	r3, [r7, #13]
 8001292:	109b      	asrs	r3, r3, #2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	b2da      	uxtb	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	332c      	adds	r3, #44	; 0x2c
 80012b2:	6810      	ldr	r0, [r2, #0]
 80012b4:	6018      	str	r0, [r3, #0]
 80012b6:	7912      	ldrb	r2, [r2, #4]
 80012b8:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80012ba:	e001      	b.n	80012c0 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fa9e 	bl	800181c <conf_sensor>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	6039      	str	r1, [r7, #0]
 80012f4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f000 f9a8 	bl	800164c <null_ptr_check>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fa82 	bl	800181c <conf_sensor>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f000 f985 	bl	800164c <null_ptr_check>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d133      	bne.n	80013b6 <bmp280_get_uncomp_data+0x8e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d030      	beq.n	80013b6 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001354:	f107 0108 	add.w	r1, r7, #8
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2206      	movs	r2, #6
 800135c:	20f7      	movs	r0, #247	; 0xf7
 800135e:	f7ff fe33 	bl	8000fc8 <bmp280_get_regs>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d120      	bne.n	80013b0 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800136e:	7a3b      	ldrb	r3, [r7, #8]
 8001370:	031a      	lsls	r2, r3, #12
 8001372:	7a7b      	ldrb	r3, [r7, #9]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4313      	orrs	r3, r2
 8001378:	7aba      	ldrb	r2, [r7, #10]
 800137a:	0912      	lsrs	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	031a      	lsls	r2, r3, #12
 8001388:	7b3b      	ldrb	r3, [r7, #12]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4313      	orrs	r3, r2
 800138e:	7b7a      	ldrb	r2, [r7, #13]
 8001390:	0912      	lsrs	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f000 faf3 	bl	8001990 <st_check_boundaries>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80013ae:	e004      	b.n	80013ba <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80013b0:	23f3      	movs	r3, #243	; 0xf3
 80013b2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80013b4:	e001      	b.n	80013ba <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80013b6:	23ff      	movs	r3, #255	; 0xff
 80013b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b088      	sub	sp, #32
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f93a 	bl	800164c <null_ptr_check>
 80013d8:	4603      	mov	r3, r0
 80013da:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80013dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d150      	bne.n	8001486 <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da00      	bge.n	80013ec <bmp280_get_comp_temp_32bit+0x26>
 80013ea:	3307      	adds	r3, #7
 80013ec:	10db      	asrs	r3, r3, #3
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	8a1b      	ldrh	r3, [r3, #16]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8001402:	2b00      	cmp	r3, #0
 8001404:	da01      	bge.n	800140a <bmp280_get_comp_temp_32bit+0x44>
 8001406:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800140a:	12db      	asrs	r3, r3, #11
 800140c:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <bmp280_get_comp_temp_32bit+0x50>
 8001414:	330f      	adds	r3, #15
 8001416:	111b      	asrs	r3, r3, #4
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	8a1b      	ldrh	r3, [r3, #16]
 800141e:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da00      	bge.n	8001428 <bmp280_get_comp_temp_32bit+0x62>
 8001426:	330f      	adds	r3, #15
 8001428:	111b      	asrs	r3, r3, #4
 800142a:	4619      	mov	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8a1b      	ldrh	r3, [r3, #16]
 8001430:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8001432:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001436:	2b00      	cmp	r3, #0
 8001438:	da01      	bge.n	800143e <bmp280_get_comp_temp_32bit+0x78>
 800143a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800143e:	131b      	asrs	r3, r3, #12
 8001440:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001448:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 800144c:	2b00      	cmp	r3, #0
 800144e:	da03      	bge.n	8001458 <bmp280_get_comp_temp_32bit+0x92>
 8001450:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001454:	441a      	add	r2, r3
 8001456:	4613      	mov	r3, r2
 8001458:	139b      	asrs	r3, r3, #14
 800145a:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	441a      	add	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3380      	adds	r3, #128	; 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	da00      	bge.n	8001478 <bmp280_get_comp_temp_32bit+0xb2>
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	121b      	asrs	r3, r3, #8
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	77fb      	strb	r3, [r7, #31]
 8001484:	e004      	b.n	8001490 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 800148c:	23f2      	movs	r3, #242	; 0xf2
 800148e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001490:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 800149c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a0:	b08a      	sub	sp, #40	; 0x28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8ce 	bl	800164c <null_ptr_check>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80014b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 80ac 	bne.w	8001618 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f7ff f84f 	bl	8000564 <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b5c      	ldr	r3, [pc, #368]	; (800163c <bmp280_get_comp_temp_double+0x1a0>)
 80014cc:	f7ff f9de 	bl	800088c <__aeabi_ddiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4625      	mov	r5, r4
 80014d6:	461c      	mov	r4, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	8a1b      	ldrh	r3, [r3, #16]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f831 	bl	8000544 <__aeabi_ui2d>
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b56      	ldr	r3, [pc, #344]	; (8001640 <bmp280_get_comp_temp_double+0x1a4>)
 80014e8:	f7ff f9d0 	bl	800088c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fee8 	bl	80002c8 <__aeabi_dsub>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	4625      	mov	r5, r4
 80014fe:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f82c 	bl	8000564 <__aeabi_i2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff f890 	bl	8000638 <__aeabi_dmul>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff f81f 	bl	8000564 <__aeabi_i2d>
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800152e:	f7ff f9ad 	bl	800088c <__aeabi_ddiv>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	4625      	mov	r5, r4
 8001538:	461c      	mov	r4, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	8a1b      	ldrh	r3, [r3, #16]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f800 	bl	8000544 <__aeabi_ui2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <bmp280_get_comp_temp_double+0x1a8>)
 800154a:	f7ff f99f 	bl	800088c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7fe feb7 	bl	80002c8 <__aeabi_dsub>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4625      	mov	r5, r4
 8001560:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001562:	68b8      	ldr	r0, [r7, #8]
 8001564:	f7fe fffe 	bl	8000564 <__aeabi_i2d>
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001570:	f7ff f98c 	bl	800088c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4690      	mov	r8, r2
 800157a:	4699      	mov	r9, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8a1b      	ldrh	r3, [r3, #16]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffdf 	bl	8000544 <__aeabi_ui2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <bmp280_get_comp_temp_double+0x1a8>)
 800158c:	f7ff f97e 	bl	800088c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7fe fe96 	bl	80002c8 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f848 	bl	8000638 <__aeabi_dmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	4625      	mov	r5, r4
 80015ae:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffd4 	bl	8000564 <__aeabi_i2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
        var2 =
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7ff f838 	bl	8000638 <__aeabi_dmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80015d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d8:	f7fe fe78 	bl	80002cc <__adddf3>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4618      	mov	r0, r3
 80015e2:	4621      	mov	r1, r4
 80015e4:	f7ff fad8 	bl	8000b98 <__aeabi_d2iz>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 80015ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015f6:	f7fe fe69 	bl	80002cc <__adddf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	4618      	mov	r0, r3
 8001600:	4621      	mov	r1, r4
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <bmp280_get_comp_temp_double+0x1ac>)
 8001608:	f7ff f940 	bl	800088c <__aeabi_ddiv>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	e9c2 3400 	strd	r3, r4, [r2]
 8001616:	e009      	b.n	800162c <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	f04f 0400 	mov.w	r4, #0
 8001622:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001626:	23ef      	movs	r3, #239	; 0xef
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800162c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001630:	4618      	mov	r0, r3
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800163a:	bf00      	nop
 800163c:	40d00000 	.word	0x40d00000
 8001640:	40900000 	.word	0x40900000
 8001644:	40c00000 	.word	0x40c00000
 8001648:	40b40000 	.word	0x40b40000

0800164c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <null_ptr_check+0x26>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <null_ptr_check+0x26>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <null_ptr_check+0x26>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8001672:	23ff      	movs	r3, #255	; 0xff
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e001      	b.n	800167c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800167c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
 800169e:	e016      	b.n	80016ce <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	441a      	add	r2, r3
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	440b      	add	r3, r1
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	441a      	add	r2, r3
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	440b      	add	r3, r1
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	3301      	adds	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
 80016ce:	7dfa      	ldrb	r2, [r7, #23]
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3e4      	bcc.n	80016a0 <interleave_data+0x14>
    }
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b08a      	sub	sp, #40	; 0x28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffa5 	bl	800164c <null_ptr_check>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800170c:	2b00      	cmp	r3, #0
 800170e:	d17f      	bne.n	8001810 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001710:	f107 010c 	add.w	r1, r7, #12
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2218      	movs	r2, #24
 8001718:	2088      	movs	r0, #136	; 0x88
 800171a:	f7ff fc55 	bl	8000fc8 <bmp280_get_regs>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001728:	2b00      	cmp	r3, #0
 800172a:	d171      	bne.n	8001810 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 800172c:	7b7b      	ldrb	r3, [r7, #13]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21b      	sxth	r3, r3
 800173a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	7bbb      	ldrb	r3, [r7, #14]
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001752:	7c7b      	ldrb	r3, [r7, #17]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	b21a      	sxth	r2, r3
 8001758:	7c3b      	ldrb	r3, [r7, #16]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	7cbb      	ldrb	r3, [r7, #18]
 800176c:	b21b      	sxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b21b      	sxth	r3, r3
 8001772:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001778:	7d7b      	ldrb	r3, [r7, #21]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	7d3b      	ldrb	r3, [r7, #20]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	7dbb      	ldrb	r3, [r7, #22]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 800179c:	7e7b      	ldrb	r3, [r7, #25]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	7e3b      	ldrb	r3, [r7, #24]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 80017ae:	7efb      	ldrb	r3, [r7, #27]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	7ebb      	ldrb	r3, [r7, #26]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 80017c0:	7f7b      	ldrb	r3, [r7, #29]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7f3b      	ldrb	r3, [r7, #28]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	7fbb      	ldrb	r3, [r7, #30]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80017e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80017fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8001810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800182a:	2300      	movs	r3, #0
 800182c:	753b      	strb	r3, [r7, #20]
 800182e:	2300      	movs	r3, #0
 8001830:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <conf_sensor+0x170>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff07 	bl	800164c <null_ptr_check>
 800183e:	4603      	mov	r3, r0
 8001840:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 8095 	bne.w	8001976 <conf_sensor+0x15a>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8091 	beq.w	8001976 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001854:	f107 0114 	add.w	r1, r7, #20
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	20f4      	movs	r0, #244	; 0xf4
 800185e:	f7ff fbb3 	bl	8000fc8 <bmp280_get_regs>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 8086 	bne.w	800197c <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fc4e 	bl	8001112 <bmp280_soft_reset>
 8001876:	4603      	mov	r3, r0
 8001878:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 800187a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d17c      	bne.n	800197c <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8001882:	7d3b      	ldrb	r3, [r7, #20]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	b25a      	sxtb	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	015b      	lsls	r3, r3, #5
 8001892:	b25b      	sxtb	r3, r3
 8001894:	4313      	orrs	r3, r2
 8001896:	b25b      	sxtb	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	f023 031c 	bic.w	r3, r3, #28
 80018a4:	b25a      	sxtb	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 80018bc:	7d7b      	ldrb	r3, [r7, #21]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	b25a      	sxtb	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 80018d6:	7d7b      	ldrb	r3, [r7, #21]
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	f023 031c 	bic.w	r3, r3, #28
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f003 031c 	and.w	r3, r3, #28
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 80018f6:	7d7b      	ldrb	r3, [r7, #21]
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	b25a      	sxtb	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	b25b      	sxtb	r3, r3
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	b25b      	sxtb	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b25b      	sxtb	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001914:	f107 0114 	add.w	r1, r7, #20
 8001918:	f107 0010 	add.w	r0, r7, #16
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f7ff fb89 	bl	8001036 <bmp280_set_regs>
 8001924:	4603      	mov	r3, r0
 8001926:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8001928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d125      	bne.n	800197c <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	332c      	adds	r3, #44	; 0x2c
 8001936:	6810      	ldr	r0, [r2, #0]
 8001938:	6018      	str	r0, [r3, #0]
 800193a:	7912      	ldrb	r2, [r2, #4]
 800193c:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001944:	7d3b      	ldrb	r3, [r7, #20]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	f023 0303 	bic.w	r3, r3, #3
 800194c:	b25a      	sxtb	r2, r3
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8001960:	f107 0114 	add.w	r1, r7, #20
 8001964:	f107 0010 	add.w	r0, r7, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f7ff fb63 	bl	8001036 <bmp280_set_regs>
 8001970:	4603      	mov	r3, r0
 8001972:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001974:	e002      	b.n	800197c <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001976:	23ff      	movs	r3, #255	; 0xff
 8001978:	75fb      	strb	r3, [r7, #23]
 800197a:	e000      	b.n	800197e <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 800197c:	bf00      	nop
    }

    return rslt;
 800197e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	0800ac78 	.word	0x0800ac78

08001990 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dd03      	ble.n	80019ac <st_check_boundaries+0x1c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <st_check_boundaries+0x6c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	dd09      	ble.n	80019c0 <st_check_boundaries+0x30>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	dd03      	ble.n	80019ba <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4a11      	ldr	r2, [pc, #68]	; (80019fc <st_check_boundaries+0x6c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	dd02      	ble.n	80019c0 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80019ba:	23f4      	movs	r3, #244	; 0xf4
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e015      	b.n	80019ec <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dd03      	ble.n	80019ce <st_check_boundaries+0x3e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <st_check_boundaries+0x6c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	dd02      	ble.n	80019d4 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 80019ce:	23f6      	movs	r3, #246	; 0xf6
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e00b      	b.n	80019ec <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dd03      	ble.n	80019e2 <st_check_boundaries+0x52>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <st_check_boundaries+0x6c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	dd02      	ble.n	80019e8 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 80019e2:	23f5      	movs	r3, #245	; 0xf5
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e001      	b.n	80019ec <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	000fffef 	.word	0x000fffef

08001a00 <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	603a      	str	r2, [r7, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	71bb      	strb	r3, [r7, #6]
 8001a12:	4613      	mov	r3, r2
 8001a14:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  int32_t iError = BMP280_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t txarray[BMP280_SPI_BUFFER_LEN];

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	733b      	strb	r3, [r7, #12]
  for(uint8_t i = 0; i < length; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a2a:	e011      	b.n	8001a50 <bmp280_spi_reg_write+0x50>
  {
    txarray[i+BMP280_DATA_INDEX] = reg_data[i];
 8001a2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	441a      	add	r2, r3
 8001a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a38:	3301      	adds	r3, #1
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001a40:	440b      	add	r3, r1
 8001a42:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 0; i < length; i++)
 8001a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	88ba      	ldrh	r2, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8e7      	bhi.n	8001a2c <bmp280_spi_reg_write+0x2c>
  }

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <bmp280_spi_reg_write+0xdc>)
 8001a60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <bmp280_spi_reg_write+0xe0>)
 8001a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f001 fbd0 	bl	8003214 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP280_SPI, (uint8_t*)(&txarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f107 010c 	add.w	r1, r7, #12
 8001a7e:	2305      	movs	r3, #5
 8001a80:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <bmp280_spi_reg_write+0xe4>)
 8001a82:	f002 fea9 	bl	80047d8 <HAL_SPI_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001a92:	e012      	b.n	8001aba <bmp280_spi_reg_write+0xba>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8001a94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a98:	4a10      	ldr	r2, [pc, #64]	; (8001adc <bmp280_spi_reg_write+0xdc>)
 8001a9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <bmp280_spi_reg_write+0xe0>)
 8001aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f001 fbb2 	bl	8003214 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8001ab0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001aba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d9e8      	bls.n	8001a94 <bmp280_spi_reg_write+0x94>
  }

  if (status != HAL_OK)
 8001ac2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <bmp280_spi_reg_write+0xd0>
  {
  	// The BMP280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return (int8_t)iError;
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	b25b      	sxtb	r3, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3730      	adds	r7, #48	; 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000304 	.word	0x20000304

08001ae8 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b094      	sub	sp, #80	; 0x50
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	603a      	str	r2, [r7, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	460b      	mov	r3, r1
 8001af8:	71bb      	strb	r3, [r7, #6]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  int32_t iError = BMP280_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	619a      	str	r2, [r3, #24]

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <bmp280_spi_reg_read+0x110>)
 8001b3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <bmp280_spi_reg_read+0x114>)
 8001b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f001 fb63 	bl	8003214 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP280_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b298      	uxth	r0, r3
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	4827      	ldr	r0, [pc, #156]	; (8001c00 <bmp280_spi_reg_read+0x118>)
 8001b64:	f002 ff9e 	bl	8004aa4 <HAL_SPI_TransmitReceive>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001b74:	e012      	b.n	8001b9c <bmp280_spi_reg_read+0xb4>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8001b76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <bmp280_spi_reg_read+0x110>)
 8001b7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <bmp280_spi_reg_read+0x114>)
 8001b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f001 fb41 	bl	8003214 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8001b92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b96:	3301      	adds	r3, #1
 8001b98:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001b9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d9e8      	bls.n	8001b76 <bmp280_spi_reg_read+0x8e>
  }

  for (uint8_t i = 0; i < length; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001baa:	e011      	b.n	8001bd0 <bmp280_spi_reg_read+0xe8>
    reg_data[i] = rxarray[i+BMP280_DATA_INDEX];
 8001bac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	440b      	add	r3, r1
 8001bba:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001bbe:	440a      	add	r2, r1
 8001bc0:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001bc4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < length; i++) {
 8001bc6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001bd0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	88ba      	ldrh	r2, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8e7      	bhi.n	8001bac <bmp280_spi_reg_read+0xc4>
  }

  if (status != HAL_OK)
 8001bdc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <bmp280_spi_reg_read+0x102>
  {
  	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return (int8_t)iError;
 8001bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bec:	b25b      	sxtb	r3, r3
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3748      	adds	r7, #72	; 0x48
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000304 	.word	0x20000304

08001c04 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4bb3      	ldr	r3, [pc, #716]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4ab2      	ldr	r2, [pc, #712]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4bb0      	ldr	r3, [pc, #704]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4bad      	ldr	r3, [pc, #692]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4aac      	ldr	r2, [pc, #688]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4baa      	ldr	r3, [pc, #680]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4ba7      	ldr	r3, [pc, #668]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4aa6      	ldr	r2, [pc, #664]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4ba4      	ldr	r3, [pc, #656]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4ba1      	ldr	r3, [pc, #644]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4aa0      	ldr	r2, [pc, #640]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b9e      	ldr	r3, [pc, #632]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b9b      	ldr	r3, [pc, #620]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a9a      	ldr	r2, [pc, #616]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b98      	ldr	r3, [pc, #608]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a94      	ldr	r2, [pc, #592]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001caa:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a8e      	ldr	r2, [pc, #568]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2118      	movs	r1, #24
 8001cc6:	4889      	ldr	r0, [pc, #548]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001cc8:	f001 faa4 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2149      	movs	r1, #73	; 0x49
 8001cd0:	4887      	ldr	r0, [pc, #540]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001cd2:	f001 fa9f 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2108      	movs	r1, #8
 8001cda:	4886      	ldr	r0, [pc, #536]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001cdc:	f001 fa9a 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f644 4181 	movw	r1, #19585	; 0x4c81
 8001ce6:	4884      	ldr	r0, [pc, #528]	; (8001ef8 <MX_GPIO_Init+0x2f4>)
 8001ce8:	f001 fa94 	bl	8003214 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf2:	487e      	ldr	r0, [pc, #504]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001cf4:	f001 fa8e 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	487f      	ldr	r0, [pc, #508]	; (8001efc <MX_GPIO_Init+0x2f8>)
 8001cfe:	f001 fa89 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	21f0      	movs	r1, #240	; 0xf0
 8001d06:	487e      	ldr	r0, [pc, #504]	; (8001f00 <MX_GPIO_Init+0x2fc>)
 8001d08:	f001 fa84 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001d0c:	2318      	movs	r3, #24
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4872      	ldr	r0, [pc, #456]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001d24:	f001 f8cc 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2e:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <MX_GPIO_Init+0x300>)
 8001d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	486c      	ldr	r0, [pc, #432]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001d3e:	f001 f8bf 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 8001d42:	2309      	movs	r3, #9
 8001d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4865      	ldr	r0, [pc, #404]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001d5a:	f001 f8b1 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d5e:	2332      	movs	r3, #50	; 0x32
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d6e:	230b      	movs	r3, #11
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	485d      	ldr	r0, [pc, #372]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001d7a:	f001 f8a1 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001d7e:	2306      	movs	r3, #6
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d8e:	230b      	movs	r3, #11
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	4856      	ldr	r0, [pc, #344]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001d9a:	f001 f891 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001d9e:	2308      	movs	r3, #8
 8001da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	484f      	ldr	r0, [pc, #316]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001db6:	f001 f883 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dbe:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <MX_GPIO_Init+0x304>)
 8001dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4849      	ldr	r0, [pc, #292]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001dce:	f001 f877 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd6:	4b4b      	ldr	r3, [pc, #300]	; (8001f04 <MX_GPIO_Init+0x300>)
 8001dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4843      	ldr	r0, [pc, #268]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001de6:	f001 f86b 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001dea:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001dee:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	483d      	ldr	r0, [pc, #244]	; (8001ef8 <MX_GPIO_Init+0x2f4>)
 8001e04:	f001 f85c 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 8001e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4832      	ldr	r0, [pc, #200]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001e22:	f001 f84d 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e38:	230b      	movs	r3, #11
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	482d      	ldr	r0, [pc, #180]	; (8001ef8 <MX_GPIO_Init+0x2f4>)
 8001e44:	f001 f83c 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8001e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <MX_GPIO_Init+0x300>)
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4826      	ldr	r0, [pc, #152]	; (8001ef8 <MX_GPIO_Init+0x2f4>)
 8001e5e:	f001 f82f 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001e62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <MX_GPIO_Init+0x304>)
 8001e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	4822      	ldr	r0, [pc, #136]	; (8001f00 <MX_GPIO_Init+0x2fc>)
 8001e78:	f001 f822 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	481b      	ldr	r0, [pc, #108]	; (8001f00 <MX_GPIO_Init+0x2fc>)
 8001e92:	f001 f815 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4813      	ldr	r0, [pc, #76]	; (8001efc <MX_GPIO_Init+0x2f8>)
 8001eae:	f001 f807 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <MX_GPIO_Init+0x2f8>)
 8001ec6:	f000 fffb 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8001eca:	2340      	movs	r3, #64	; 0x40
 8001ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001ee2:	f000 ffed 	bl	8002ec0 <HAL_GPIO_Init>
 8001ee6:	e011      	b.n	8001f0c <MX_GPIO_Init+0x308>
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	10110000 	.word	0x10110000
 8001f08:	10210000 	.word	0x10210000

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f0c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f1e:	230a      	movs	r3, #10
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <MX_GPIO_Init+0x3ac>)
 8001f2a:	f000 ffc9 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	481b      	ldr	r0, [pc, #108]	; (8001fb0 <MX_GPIO_Init+0x3ac>)
 8001f44:	f000 ffbc 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001f48:	23f0      	movs	r3, #240	; 0xf0
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <MX_GPIO_Init+0x3b0>)
 8001f60:	f000 ffae 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f76:	230b      	movs	r3, #11
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <MX_GPIO_Init+0x3b4>)
 8001f82:	f000 ff9d 	bl	8002ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2017      	movs	r0, #23
 8001f8c:	f000 ff3f 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f90:	2017      	movs	r0, #23
 8001f92:	f000 ff58 	bl	8002e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2028      	movs	r0, #40	; 0x28
 8001f9c:	f000 ff37 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fa0:	2028      	movs	r0, #40	; 0x28
 8001fa2:	f000 ff50 	bl	8002e46 <HAL_NVIC_EnableIRQ>

}
 8001fa6:	bf00      	nop
 8001fa8:	3730      	adds	r7, #48	; 0x30
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021800 	.word	0x40021800

08001fbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <MX_I2C1_Init+0x78>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <MX_I2C1_Init+0x7c>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff8:	f001 f94a 	bl	8003290 <HAL_I2C_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002002:	f000 f9a3 	bl	800234c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_I2C1_Init+0x74>)
 800200a:	f001 f9d1 	bl	80033b0 <HAL_I2CEx_ConfigAnalogFilter>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002014:	f000 f99a 	bl	800234c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_I2C1_Init+0x74>)
 800201c:	f001 fa13 	bl	8003446 <HAL_I2CEx_ConfigDigitalFilter>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002026:	f000 f991 	bl	800234c <Error_Handler>
  }

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000244 	.word	0x20000244
 8002034:	40005400 	.word	0x40005400
 8002038:	20404768 	.word	0x20404768

0800203c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_I2C_MspInit+0x7c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d128      	bne.n	80020b0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_I2C_MspInit+0x80>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HAL_I2C_MspInit+0x80>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_I2C_MspInit+0x80>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8002076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207c:	2312      	movs	r3, #18
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002080:	2301      	movs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002088:	2304      	movs	r3, #4
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	480b      	ldr	r0, [pc, #44]	; (80020c0 <HAL_I2C_MspInit+0x84>)
 8002094:	f000 ff14 	bl	8002ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_I2C_MspInit+0x80>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_I2C_MspInit+0x80>)
 800209e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_I2C_MspInit+0x80>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40005400 	.word	0x40005400
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400

080020c4 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <HAL_UART_TxCpltCallback+0x24>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d104      	bne.n	80020de <HAL_UART_TxCpltCallback+0x1a>
	{
 	 HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 80020d4:	2204      	movs	r2, #4
 80020d6:	4905      	ldr	r1, [pc, #20]	; (80020ec <HAL_UART_TxCpltCallback+0x28>)
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <HAL_UART_TxCpltCallback+0x24>)
 80020da:	f004 f917 	bl	800630c <HAL_UART_Receive_IT>
	}
 }
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000428 	.word	0x20000428
 80020ec:	20000290 	.word	0x20000290

080020f0 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	 if(huart == &huart3){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_UART_RxCpltCallback+0x24>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d104      	bne.n	800210a <HAL_UART_RxCpltCallback+0x1a>
		 HAL_UART_Transmit_IT(&huart3, (uint8_t*)rx_buffer, 4);
 8002100:	2204      	movs	r2, #4
 8002102:	4905      	ldr	r1, [pc, #20]	; (8002118 <HAL_UART_RxCpltCallback+0x28>)
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <HAL_UART_RxCpltCallback+0x24>)
 8002106:	f004 f8a5 	bl	8006254 <HAL_UART_Transmit_IT>
	 }
 }
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000428 	.word	0x20000428
 8002118:	20000290 	.word	0x20000290
 800211c:	00000000 	.word	0x00000000

08002120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002126:	f000 fd18 	bl	8002b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212a:	f000 f87b 	bl	8002224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800212e:	f7ff fd69 	bl	8001c04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002132:	f000 fc6d 	bl	8002a10 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002136:	f000 fa5f 	bl	80025f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800213a:	f000 faab 	bl	8002694 <MX_TIM3_Init>
  MX_TIM4_Init();
 800213e:	f000 fb41 	bl	80027c4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002142:	f7ff ff3b 	bl	8001fbc <MX_I2C1_Init>
  MX_SPI4_Init();
 8002146:	f000 f909 	bl	800235c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
   int8_t rslt;
    struct bmp280_config conf;

    rslt = bmp280_init(&bmp280_1);
 800214a:	4833      	ldr	r0, [pc, #204]	; (8002218 <main+0xf8>)
 800214c:	f7ff f806 	bl	800115c <bmp280_init>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /*Always read the current settings before writing especially when all the configuration is not modified */
    rslt = bmp280_get_config(&conf, &bmp280_1);
 8002156:	463b      	mov	r3, r7
 8002158:	492f      	ldr	r1, [pc, #188]	; (8002218 <main+0xf8>)
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f864 	bl	8001228 <bmp280_get_config>
 8002160:	4603      	mov	r3, r0
 8002162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* congiguring the temperature oversampling, filter coefficient and output data rate */
    /* Overwrite the desired settings */

    conf.filter = BMP280_FILTER_OFF;
 8002166:	2300      	movs	r3, #0
 8002168:	70fb      	strb	r3, [r7, #3]

    /* Temperature oversampling set at 1x */
    conf.os_temp = BMP280_OS_1X;
 800216a:	2301      	movs	r3, #1
 800216c:	703b      	strb	r3, [r7, #0]

    /* Pressure oversampling set at 1x */
    conf.os_pres = BMP280_OS_1X;
 800216e:	2301      	movs	r3, #1
 8002170:	707b      	strb	r3, [r7, #1]

    /* Setting the output data rate as 1 Hz (1000ms) */
    conf.odr = BMP280_ODR_1000_MS;
 8002172:	2305      	movs	r3, #5
 8002174:	70bb      	strb	r3, [r7, #2]

    rslt = bmp280_set_config(&conf, &bmp280_1);
 8002176:	463b      	mov	r3, r7
 8002178:	4927      	ldr	r1, [pc, #156]	; (8002218 <main+0xf8>)
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f8a6 	bl	80012cc <bmp280_set_config>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Always set the power mode after setting the configuration */
    rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp280_1);
 8002186:	4924      	ldr	r1, [pc, #144]	; (8002218 <main+0xf8>)
 8002188:	2003      	movs	r0, #3
 800218a:	f7ff f8ae 	bl	80012ea <bmp280_set_power_mode>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Receive massage about value of temperature */
    HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 8002194:	2204      	movs	r2, #4
 8002196:	4921      	ldr	r1, [pc, #132]	; (800221c <main+0xfc>)
 8002198:	4821      	ldr	r0, [pc, #132]	; (8002220 <main+0x100>)
 800219a:	f004 f8b7 	bl	800630c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  rslt = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	491d      	ldr	r1, [pc, #116]	; (8002218 <main+0xf8>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f8bf 	bl	8001328 <bmp280_get_uncomp_data>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  rslt = bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 80021b0:	69b9      	ldr	r1, [r7, #24]
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <main+0xf8>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f904 	bl	80013c6 <bmp280_get_comp_temp_32bit>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  rslt = bmp280_get_comp_temp_double(&temp, bmp280_1_data.uncomp_temp, &bmp280_1);
 80021c4:	69b9      	ldr	r1, [r7, #24]
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <main+0xf8>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f965 	bl	800149c <bmp280_get_comp_temp_double>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  temperature = (float)temp32*0.01;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	ee17 0a90 	vmov	r0, s15
 80021e6:	f7fe f9cf 	bl	8000588 <__aeabi_f2d>
 80021ea:	a309      	add	r3, pc, #36	; (adr r3, 8002210 <main+0xf0>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fa22 	bl	8000638 <__aeabi_dmul>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	4618      	mov	r0, r3
 80021fa:	4621      	mov	r1, r4
 80021fc:	f7fe fd14 	bl	8000c28 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	623b      	str	r3, [r7, #32]
	   * Maciej jak już bedziesz miał to LCD to tuaj możesz tego sprintf uzyc bu jakoś pokaza cstopnie celcjusza
	   * */
	  //sprintf((char*)buffor, "Temperatura: %.2f \r\n", temperature);
	  //HAL_UART_Transmit(&huart3, (uint8_t*)buffor, strlen(buffor), 1000);

	  bmp280_1.delay_ms(1000);
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <main+0xf8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800220c:	4798      	blx	r3
	  rslt = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 800220e:	e7c6      	b.n	800219e <main+0x7e>
 8002210:	47ae147b 	.word	0x47ae147b
 8002214:	3f847ae1 	.word	0x3f847ae1
 8002218:	2000000c 	.word	0x2000000c
 800221c:	20000290 	.word	0x20000290
 8002220:	20000428 	.word	0x20000428

08002224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0b4      	sub	sp, #208	; 0xd0
 8002228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800222e:	2230      	movs	r2, #48	; 0x30
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f004 ffd4 	bl	80071e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002238:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	2284      	movs	r2, #132	; 0x84
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f004 ffc5 	bl	80071e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002256:	f001 f943 	bl	80034e0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <SystemClock_Config+0x120>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a39      	ldr	r2, [pc, #228]	; (8002344 <SystemClock_Config+0x120>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <SystemClock_Config+0x120>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <SystemClock_Config+0x124>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a34      	ldr	r2, [pc, #208]	; (8002348 <SystemClock_Config+0x124>)
 8002278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <SystemClock_Config+0x124>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800228a:	2301      	movs	r3, #1
 800228c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002290:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002298:	2302      	movs	r3, #2
 800229a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022a6:	2304      	movs	r3, #4
 80022a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022ac:	23d8      	movs	r3, #216	; 0xd8
 80022ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80022b8:	2303      	movs	r3, #3
 80022ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 f96c 	bl	80035a0 <HAL_RCC_OscConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022ce:	f000 f83d 	bl	800234c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022d2:	f001 f915 	bl	8003500 <HAL_PWREx_EnableOverDrive>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80022dc:	f000 f836 	bl	800234c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e0:	230f      	movs	r3, #15
 80022e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002302:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002306:	2107      	movs	r1, #7
 8002308:	4618      	mov	r0, r3
 800230a:	f001 fbed 	bl	8003ae8 <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002314:	f000 f81a 	bl	800234c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002318:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800231c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800231e:	2300      	movs	r3, #0
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002322:	2300      	movs	r3, #0
 8002324:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fdd4 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002336:	f000 f809 	bl	800234c <Error_Handler>
  }
}
 800233a:	bf00      	nop
 800233c:	37d0      	adds	r7, #208	; 0xd0
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <MX_SPI4_Init+0x78>)
 8002364:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800236c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002376:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800237a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <MX_SPI4_Init+0x74>)
 800237e:	2202      	movs	r2, #2
 8002380:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002384:	2201      	movs	r2, #1
 8002386:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_SPI4_Init+0x74>)
 800238a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002392:	2218      	movs	r2, #24
 8002394:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_SPI4_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_SPI4_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <MX_SPI4_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_SPI4_Init+0x74>)
 80023aa:	2207      	movs	r2, #7
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <MX_SPI4_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_SPI4_Init+0x74>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_SPI4_Init+0x74>)
 80023bc:	f002 f97a 	bl	80046b4 <HAL_SPI_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80023c6:	f7ff ffc1 	bl	800234c <Error_Handler>
  }

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000304 	.word	0x20000304
 80023d4:	40013400 	.word	0x40013400

080023d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_SPI_MspInit+0x7c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d127      	bne.n	800244a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HAL_SPI_MspInit+0x80>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_SPI_MspInit+0x80>)
 8002400:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_SPI_MspInit+0x80>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_SPI_MspInit+0x80>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <HAL_SPI_MspInit+0x80>)
 8002418:	f043 0310 	orr.w	r3, r3, #16
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_SPI_MspInit+0x80>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 800242a:	2364      	movs	r3, #100	; 0x64
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800243a:	2305      	movs	r3, #5
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	4805      	ldr	r0, [pc, #20]	; (800245c <HAL_SPI_MspInit+0x84>)
 8002446:	f000 fd3b 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40013400 	.word	0x40013400
 8002458:	40023800 	.word	0x40023800
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_MspInit+0x44>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_MspInit+0x44>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_MspInit+0x44>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_MspInit+0x44>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_MspInit+0x44>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_MspInit+0x44>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <MemManage_Handler+0x4>

080024c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <BusFault_Handler+0x4>

080024c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <UsageFault_Handler+0x4>

080024ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fc:	f000 fb6a 	bl	8002bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002508:	2020      	movs	r0, #32
 800250a:	f000 fe9d 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800250e:	2040      	movs	r0, #64	; 0x40
 8002510:	f000 fe9a 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <TIM2_IRQHandler+0x10>)
 800251e:	f002 fee3 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200003e8 	.word	0x200003e8

0800252c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <USART3_IRQHandler+0x10>)
 8002532:	f003 ff8d 	bl	8006450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000428 	.word	0x20000428

08002540 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002544:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002548:	f000 fe7e 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800254c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002550:	f000 fe7a 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002554:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002558:	f000 fe76 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <_sbrk+0x5c>)
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <_sbrk+0x60>)
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <_sbrk+0x64>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <_sbrk+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d207      	bcs.n	80025a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002590:	f004 fdfc 	bl	800718c <__errno>
 8002594:	4602      	mov	r2, r0
 8002596:	230c      	movs	r3, #12
 8002598:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e009      	b.n	80025b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <_sbrk+0x64>)
 80025b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20050000 	.word	0x20050000
 80025c0:	00000400 	.word	0x00000400
 80025c4:	20000238 	.word	0x20000238
 80025c8:	200004b0 	.word	0x200004b0

080025cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <SystemInit+0x28>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <SystemInit+0x28>)
 80025d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SystemInit+0x28>)
 80025e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e6:	609a      	str	r2, [r3, #8]
#endif
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <MX_TIM2_Init+0x98>)
 8002618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800261c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_TIM2_Init+0x98>)
 8002620:	226b      	movs	r2, #107	; 0x6b
 8002622:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_TIM2_Init+0x98>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MX_TIM2_Init+0x98>)
 800262c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002630:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_TIM2_Init+0x98>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <MX_TIM2_Init+0x98>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800263e:	4814      	ldr	r0, [pc, #80]	; (8002690 <MX_TIM2_Init+0x98>)
 8002640:	f002 fd60 	bl	8005104 <HAL_TIM_Base_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800264a:	f7ff fe7f 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002652:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	480d      	ldr	r0, [pc, #52]	; (8002690 <MX_TIM2_Init+0x98>)
 800265c:	f003 f87c 	bl	8005758 <HAL_TIM_ConfigClockSource>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002666:	f7ff fe71 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4806      	ldr	r0, [pc, #24]	; (8002690 <MX_TIM2_Init+0x98>)
 8002678:	f003 fcf2 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002682:	f7ff fe63 	bl	800234c <Error_Handler>
  }

}
 8002686:	bf00      	nop
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200003e8 	.word	0x200003e8

08002694 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b4:	463b      	mov	r3, r7
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	615a      	str	r2, [r3, #20]
 80026c4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <MX_TIM3_Init+0x128>)
 80026c8:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <MX_TIM3_Init+0x12c>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <MX_TIM3_Init+0x128>)
 80026ce:	226b      	movs	r2, #107	; 0x6b
 80026d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <MX_TIM3_Init+0x128>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <MX_TIM3_Init+0x128>)
 80026da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <MX_TIM3_Init+0x128>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b35      	ldr	r3, [pc, #212]	; (80027bc <MX_TIM3_Init+0x128>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ec:	4833      	ldr	r0, [pc, #204]	; (80027bc <MX_TIM3_Init+0x128>)
 80026ee:	f002 fd09 	bl	8005104 <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80026f8:	f7ff fe28 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002706:	4619      	mov	r1, r3
 8002708:	482c      	ldr	r0, [pc, #176]	; (80027bc <MX_TIM3_Init+0x128>)
 800270a:	f003 f825 	bl	8005758 <HAL_TIM_ConfigClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002714:	f7ff fe1a 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002718:	4828      	ldr	r0, [pc, #160]	; (80027bc <MX_TIM3_Init+0x128>)
 800271a:	f002 fd1e 	bl	800515a <HAL_TIM_PWM_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002724:	f7ff fe12 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	4821      	ldr	r0, [pc, #132]	; (80027bc <MX_TIM3_Init+0x128>)
 8002738:	f003 fc92 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002742:	f7ff fe03 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002746:	2360      	movs	r3, #96	; 0x60
 8002748:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002756:	463b      	mov	r3, r7
 8002758:	2200      	movs	r2, #0
 800275a:	4619      	mov	r1, r3
 800275c:	4817      	ldr	r0, [pc, #92]	; (80027bc <MX_TIM3_Init+0x128>)
 800275e:	f002 fee3 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002768:	f7ff fdf0 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800276c:	463b      	mov	r3, r7
 800276e:	2204      	movs	r2, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4812      	ldr	r0, [pc, #72]	; (80027bc <MX_TIM3_Init+0x128>)
 8002774:	f002 fed8 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800277e:	f7ff fde5 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002782:	463b      	mov	r3, r7
 8002784:	2208      	movs	r2, #8
 8002786:	4619      	mov	r1, r3
 8002788:	480c      	ldr	r0, [pc, #48]	; (80027bc <MX_TIM3_Init+0x128>)
 800278a:	f002 fecd 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002794:	f7ff fdda 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002798:	463b      	mov	r3, r7
 800279a:	220c      	movs	r2, #12
 800279c:	4619      	mov	r1, r3
 800279e:	4807      	ldr	r0, [pc, #28]	; (80027bc <MX_TIM3_Init+0x128>)
 80027a0:	f002 fec2 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80027aa:	f7ff fdcf 	bl	800234c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <MX_TIM3_Init+0x128>)
 80027b0:	f000 f8d8 	bl	8002964 <HAL_TIM_MspPostInit>

}
 80027b4:	bf00      	nop
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200003a8 	.word	0x200003a8
 80027c0:	40000400 	.word	0x40000400

080027c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fd04 	bl	80071e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d8:	463b      	mov	r3, r7
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <MX_TIM4_Init+0xa0>)
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <MX_TIM4_Init+0xa4>)
 80027e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <MX_TIM4_Init+0xa0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <MX_TIM4_Init+0xa0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_TIM4_Init+0xa0>)
 80027f6:	2264      	movs	r2, #100	; 0x64
 80027f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <MX_TIM4_Init+0xa0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_TIM4_Init+0xa0>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002806:	2303      	movs	r3, #3
 8002808:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800280a:	2302      	movs	r3, #2
 800280c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800280e:	2301      	movs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800281a:	2302      	movs	r3, #2
 800281c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800281e:	2301      	movs	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <MX_TIM4_Init+0xa0>)
 8002832:	f002 fcc7 	bl	80051c4 <HAL_TIM_Encoder_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800283c:	f7ff fd86 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002848:	463b      	mov	r3, r7
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM4_Init+0xa0>)
 800284e:	f003 fc07 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002858:	f7ff fd78 	bl	800234c <Error_Handler>
  }

}
 800285c:	bf00      	nop
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000368 	.word	0x20000368
 8002868:	40000800 	.word	0x40000800

0800286c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d114      	bne.n	80028a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_TIM_Base_MspInit+0x68>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_TIM_Base_MspInit+0x68>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_TIM_Base_MspInit+0x68>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	201c      	movs	r0, #28
 800289c:	f000 fab7 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a0:	201c      	movs	r0, #28
 80028a2:	f000 fad0 	bl	8002e46 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028a6:	e010      	b.n	80028ca <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_TIM_Base_MspInit+0x6c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10b      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_TIM_Base_MspInit+0x68>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_TIM_Base_MspInit+0x68>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_TIM_Base_MspInit+0x68>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_TIM_Encoder_MspInit+0x7c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d128      	bne.n	8002950 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_TIM_Encoder_MspInit+0x80>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_TIM_Encoder_MspInit+0x80>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_TIM_Encoder_MspInit+0x80>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_TIM_Encoder_MspInit+0x80>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_TIM_Encoder_MspInit+0x80>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_TIM_Encoder_MspInit+0x80>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 800292e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002940:	2302      	movs	r3, #2
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_TIM_Encoder_MspInit+0x84>)
 800294c:	f000 fab8 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40000800 	.word	0x40000800
 800295c:	40023800 	.word	0x40023800
 8002960:	40020c00 	.word	0x40020c00

08002964 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_TIM_MspPostInit+0x9c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d138      	bne.n	80029f8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_TIM_MspPostInit+0xa0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_TIM_MspPostInit+0xa0>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_TIM_MspPostInit+0xa0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_TIM_MspPostInit+0xa0>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_TIM_MspPostInit+0xa0>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_TIM_MspPostInit+0xa0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|LED_RGB_CH_R_Pin;
 80029b6:	2312      	movs	r3, #18
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029c6:	2302      	movs	r3, #2
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	4619      	mov	r1, r3
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <HAL_TIM_MspPostInit+0xa4>)
 80029d2:	f000 fa75 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 80029d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029e8:	2302      	movs	r3, #2
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <HAL_TIM_MspPostInit+0xa8>)
 80029f4:	f000 fa64 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800

08002a10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <MX_USART3_UART_Init+0x5c>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a54:	f003 fbb0 	bl	80061b8 <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a5e:	f7ff fc75 	bl	800234c <Error_Handler>
  }

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000428 	.word	0x20000428
 8002a6c:	40004800 	.word	0x40004800

08002a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_UART_MspInit+0x8c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d130      	bne.n	8002af4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_UART_MspInit+0x90>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_UART_MspInit+0x90>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_UART_MspInit+0x90>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_UART_MspInit+0x90>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_UART_MspInit+0x90>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_UART_MspInit+0x90>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	4809      	ldr	r0, [pc, #36]	; (8002b04 <HAL_UART_MspInit+0x94>)
 8002ae0:	f000 f9ee 	bl	8002ec0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2027      	movs	r0, #39	; 0x27
 8002aea:	f000 f990 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002aee:	2027      	movs	r0, #39	; 0x27
 8002af0:	f000 f9a9 	bl	8002e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002af4:	bf00      	nop
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40004800 	.word	0x40004800
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020c00 	.word	0x40020c00

08002b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0e:	e003      	b.n	8002b18 <LoopCopyDataInit>

08002b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b16:	3104      	adds	r1, #4

08002b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b18:	480b      	ldr	r0, [pc, #44]	; (8002b48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b20:	d3f6      	bcc.n	8002b10 <CopyDataInit>
  ldr  r2, =_sbss
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b24:	e002      	b.n	8002b2c <LoopFillZerobss>

08002b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b28:	f842 3b04 	str.w	r3, [r2], #4

08002b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b30:	d3f9      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b32:	f7ff fd4b 	bl	80025cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b36:	f004 fb2f 	bl	8007198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3a:	f7ff faf1 	bl	8002120 <main>
  bx  lr    
 8002b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002b44:	0800af58 	.word	0x0800af58
  ldr  r0, =_sdata
 8002b48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b4c:	2000021c 	.word	0x2000021c
  ldr  r2, =_sbss
 8002b50:	2000021c 	.word	0x2000021c
  ldr  r3, = _ebss
 8002b54:	200004b0 	.word	0x200004b0

08002b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC_IRQHandler>

08002b5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f000 f94a 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f000 f805 	bl	8002b74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b6a:	f7ff fc79 	bl	8002460 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_InitTick+0x54>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x58>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4619      	mov	r1, r3
 8002b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f965 	bl	8002e62 <HAL_SYSTICK_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00e      	b.n	8002bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b0f      	cmp	r3, #15
 8002ba6:	d80a      	bhi.n	8002bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f000 f92d 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <HAL_InitTick+0x5c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000040 	.word	0x20000040
 8002bcc:	20000048 	.word	0x20000048
 8002bd0:	20000044 	.word	0x20000044

08002bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_IncTick+0x20>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x24>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_IncTick+0x24>)
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000048 	.word	0x20000048
 8002bf8:	200004a8 	.word	0x200004a8

08002bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_GetTick+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	200004a8 	.word	0x200004a8

08002c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c1c:	f7ff ffee 	bl	8002bfc <HAL_GetTick>
 8002c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d005      	beq.n	8002c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_Delay+0x40>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c3a:	bf00      	nop
 8002c3c:	f7ff ffde 	bl	8002bfc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d8f7      	bhi.n	8002c3c <HAL_Delay+0x28>
  {
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000048 	.word	0x20000048

08002c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <__NVIC_SetPriorityGrouping+0x40>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x40>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00
 8002c9c:	05fa0000 	.word	0x05fa0000

08002ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	; (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff29 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff3e 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff31 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d004      	beq.n	8002e98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e00c      	b.n	8002eb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e175      	b.n	80031cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 8164 	bne.w	80031c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d00b      	beq.n	8002f1e <HAL_GPIO_Init+0x5e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d007      	beq.n	8002f1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f12:	2b11      	cmp	r3, #17
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b12      	cmp	r3, #18
 8002f1c:	d130      	bne.n	8002f80 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	2203      	movs	r2, #3
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f54:	2201      	movs	r2, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0201 	and.w	r2, r3, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x100>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80be 	beq.w	80031c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_GPIO_Init+0x320>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a64      	ldr	r2, [pc, #400]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b62      	ldr	r3, [pc, #392]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003062:	4a60      	ldr	r2, [pc, #384]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <HAL_GPIO_Init+0x328>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d037      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a56      	ldr	r2, [pc, #344]	; (80031ec <HAL_GPIO_Init+0x32c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a55      	ldr	r2, [pc, #340]	; (80031f0 <HAL_GPIO_Init+0x330>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <HAL_GPIO_Init+0x334>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a53      	ldr	r2, [pc, #332]	; (80031f8 <HAL_GPIO_Init+0x338>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_GPIO_Init+0x33c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a51      	ldr	r2, [pc, #324]	; (8003200 <HAL_GPIO_Init+0x340>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a50      	ldr	r2, [pc, #320]	; (8003204 <HAL_GPIO_Init+0x344>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_GPIO_Init+0x348>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_GPIO_Init+0x34c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x21a>
 80030d6:	2309      	movs	r3, #9
 80030d8:	e012      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030da:	230a      	movs	r3, #10
 80030dc:	e010      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003110:	4934      	ldr	r1, [pc, #208]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_GPIO_Init+0x350>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <HAL_GPIO_Init+0x350>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_GPIO_Init+0x350>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <HAL_GPIO_Init+0x350>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae86 	bls.w	8002ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	3724      	adds	r7, #36	; 0x24
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40021400 	.word	0x40021400
 8003200:	40021800 	.word	0x40021800
 8003204:	40021c00 	.word	0x40021c00
 8003208:	40022000 	.word	0x40022000
 800320c:	40022400 	.word	0x40022400
 8003210:	40013c00 	.word	0x40013c00

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f806 	bl	8003278 <HAL_GPIO_EXTI_Callback>
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fec0 	bl	800203c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e006      	b.n	8003318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_I2C_Init+0x11c>)
 8003336:	430b      	orrs	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	ea42 0103 	orr.w	r1, r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	021a      	lsls	r2, r3, #8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	02008000 	.word	0x02008000

080033b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d138      	bne.n	8003438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e032      	b.n	800343a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b20      	cmp	r3, #32
 800345a:	d139      	bne.n	80034d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003466:	2302      	movs	r3, #2
 8003468:	e033      	b.n	80034d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2224      	movs	r2, #36	; 0x24
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352e:	f7ff fb65 	bl	8002bfc <HAL_GetTick>
 8003532:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003534:	e009      	b.n	800354a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003536:	f7ff fb61 	bl	8002bfc <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003544:	d901      	bls.n	800354a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e022      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d1ee      	bne.n	8003536 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800355e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003562:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7ff fb4a 	bl	8002bfc <HAL_GetTick>
 8003568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356a:	e009      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800356c:	f7ff fb46 	bl	8002bfc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358c:	d1ee      	bne.n	800356c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e291      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8087 	beq.w	80036d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c4:	4b96      	ldr	r3, [pc, #600]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00c      	beq.n	80035ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d0:	4b93      	ldr	r3, [pc, #588]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x62>
 80035dc:	4b90      	ldr	r3, [pc, #576]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d06c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x130>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d168      	bne.n	80036d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e26b      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x7a>
 800360c:	4b84      	ldr	r3, [pc, #528]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e02e      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x9c>
 8003622:	4b7f      	ldr	r3, [pc, #508]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7e      	ldr	r2, [pc, #504]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b7c      	ldr	r3, [pc, #496]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7b      	ldr	r2, [pc, #492]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e01d      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0xc0>
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a75      	ldr	r2, [pc, #468]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b73      	ldr	r3, [pc, #460]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a72      	ldr	r2, [pc, #456]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 8003660:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6e      	ldr	r2, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6b      	ldr	r2, [pc, #428]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7ff fabc 	bl	8002bfc <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7ff fab8 	bl	8002bfc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e21f      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7ff faa8 	bl	8002bfc <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7ff faa4 	bl	8002bfc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e20b      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	4b57      	ldr	r3, [pc, #348]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x110>
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d069      	beq.n	80037b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036de:	4b50      	ldr	r3, [pc, #320]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ea:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11c      	bne.n	8003730 <HAL_RCC_OscConfig+0x190>
 80036f6:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RCC_OscConfig+0x17a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e1df      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	493d      	ldr	r1, [pc, #244]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	e040      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a38      	ldr	r2, [pc, #224]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7ff fa5a 	bl	8002bfc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7ff fa56 	bl	8002bfc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1bd      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b30      	ldr	r3, [pc, #192]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4929      	ldr	r1, [pc, #164]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
 800377e:	e018      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff fa36 	bl	8002bfc <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7ff fa32 	bl	8002bfc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e199      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d038      	beq.n	8003830 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7ff fa13 	bl	8002bfc <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037da:	f7ff fa0f 	bl	8002bfc <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e176      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x23a>
 80037f8:	e01a      	b.n	8003830 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <HAL_RCC_OscConfig+0x280>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7ff f9f9 	bl	8002bfc <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380e:	f7ff f9f5 	bl	8002bfc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d903      	bls.n	8003824 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e15c      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
 8003820:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b91      	ldr	r3, [pc, #580]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ee      	bne.n	800380e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a4 	beq.w	8003986 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b8b      	ldr	r3, [pc, #556]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a87      	ldr	r2, [pc, #540]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b85      	ldr	r3, [pc, #532]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003872:	4b7f      	ldr	r3, [pc, #508]	; (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7e      	ldr	r2, [pc, #504]	; (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7ff f9bd 	bl	8002bfc <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7ff f9b9 	bl	8002bfc <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	; 0x64
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e120      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003898:	4b75      	ldr	r3, [pc, #468]	; (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x31a>
 80038ac:	4b6f      	ldr	r3, [pc, #444]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a6e      	ldr	r2, [pc, #440]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	e02d      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x33c>
 80038c2:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	4b67      	ldr	r3, [pc, #412]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a66      	ldr	r2, [pc, #408]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	e01c      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d10c      	bne.n	80038fe <HAL_RCC_OscConfig+0x35e>
 80038e4:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a60      	ldr	r2, [pc, #384]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	4b5e      	ldr	r3, [pc, #376]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a5d      	ldr	r2, [pc, #372]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	e00b      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038fe:	4b5b      	ldr	r3, [pc, #364]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a5a      	ldr	r2, [pc, #360]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	4b58      	ldr	r3, [pc, #352]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a57      	ldr	r2, [pc, #348]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d015      	beq.n	800394a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7ff f96d 	bl	8002bfc <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7ff f969 	bl	8002bfc <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0ce      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	4b4b      	ldr	r3, [pc, #300]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ee      	beq.n	8003926 <HAL_RCC_OscConfig+0x386>
 8003948:	e014      	b.n	8003974 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7ff f957 	bl	8002bfc <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7ff f953 	bl	8002bfc <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003968:	4b40      	ldr	r3, [pc, #256]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ee      	bne.n	8003952 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b3c      	ldr	r3, [pc, #240]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80a4 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d06b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d149      	bne.n	8003a38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a30      	ldr	r2, [pc, #192]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7ff f924 	bl	8002bfc <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7ff f920 	bl	8002bfc <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e087      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7ff f8f4 	bl	8002bfc <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7ff f8f0 	bl	8002bfc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e057      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x478>
 8003a36:	e04f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7ff f8da 	bl	8002bfc <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7ff f8d6 	bl	8002bfc <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e03d      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4ac>
 8003a6a:	e035      	b.n	8003ad8 <HAL_RCC_OscConfig+0x538>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x544>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d121      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b67      	ldr	r3, [pc, #412]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	4965      	ldr	r1, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d040      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4936      	ldr	r1, [pc, #216]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7ff f80e 	bl	8002bfc <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7ff f80a 	bl	8002bfc <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e053      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d210      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 020f 	bic.w	r2, r3, #15
 8003c22:	4922      	ldr	r1, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1d4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe ff6a 	bl	8002b74 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	0800ac7c 	.word	0x0800ac7c
 8003cb8:	20000040 	.word	0x20000040
 8003cbc:	20000044 	.word	0x20000044

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 80b4 	bne.w	8003e54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cec:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cee:	60bb      	str	r3, [r7, #8]
      break;
 8003cf0:	e0b3      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cf4:	60bb      	str	r3, [r7, #8]
      break;
 8003cf6:	e0b0      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d00:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d02:	4b58      	ldr	r3, [pc, #352]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d04a      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0e:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	f04f 0400 	mov.w	r4, #0
 8003d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	ea03 0501 	and.w	r5, r3, r1
 8003d24:	ea04 0602 	and.w	r6, r4, r2
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4632      	mov	r2, r6
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	0154      	lsls	r4, r2, #5
 8003d36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d3a:	014b      	lsls	r3, r1, #5
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4622      	mov	r2, r4
 8003d40:	1b49      	subs	r1, r1, r5
 8003d42:	eb62 0206 	sbc.w	r2, r2, r6
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	0194      	lsls	r4, r2, #6
 8003d50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d54:	018b      	lsls	r3, r1, #6
 8003d56:	1a5b      	subs	r3, r3, r1
 8003d58:	eb64 0402 	sbc.w	r4, r4, r2
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	00e2      	lsls	r2, r4, #3
 8003d66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d6a:	00d9      	lsls	r1, r3, #3
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4614      	mov	r4, r2
 8003d70:	195b      	adds	r3, r3, r5
 8003d72:	eb44 0406 	adc.w	r4, r4, r6
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	0262      	lsls	r2, r4, #9
 8003d80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d84:	0259      	lsls	r1, r3, #9
 8003d86:	460b      	mov	r3, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f04f 0400 	mov.w	r4, #0
 8003d94:	461a      	mov	r2, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	f7fc ff96 	bl	8000cc8 <__aeabi_uldivmod>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e049      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	f04f 0400 	mov.w	r4, #0
 8003dae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	ea03 0501 	and.w	r5, r3, r1
 8003dba:	ea04 0602 	and.w	r6, r4, r2
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	0154      	lsls	r4, r2, #5
 8003dcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dd0:	014b      	lsls	r3, r1, #5
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	1b49      	subs	r1, r1, r5
 8003dd8:	eb62 0206 	sbc.w	r2, r2, r6
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	0194      	lsls	r4, r2, #6
 8003de6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	1a5b      	subs	r3, r3, r1
 8003dee:	eb64 0402 	sbc.w	r4, r4, r2
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e00:	00d9      	lsls	r1, r3, #3
 8003e02:	460b      	mov	r3, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	195b      	adds	r3, r3, r5
 8003e08:	eb44 0406 	adc.w	r4, r4, r6
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	02a2      	lsls	r2, r4, #10
 8003e16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e1a:	0299      	lsls	r1, r3, #10
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4614      	mov	r4, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	4621      	mov	r1, r4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f04f 0400 	mov.w	r4, #0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	f7fc ff4b 	bl	8000cc8 <__aeabi_uldivmod>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	60bb      	str	r3, [r7, #8]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e56:	60bb      	str	r3, [r7, #8]
      break;
 8003e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	007a1200 	.word	0x007a1200

08003e70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000040 	.word	0x20000040

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4601      	mov	r1, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4a03      	ldr	r2, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	0800ac8c 	.word	0x0800ac8c

08003eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eb4:	f7ff ffdc 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003eb8:	4601      	mov	r1, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0b5b      	lsrs	r3, r3, #13
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4a03      	ldr	r2, [pc, #12]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec6:	5cd3      	ldrb	r3, [r2, r3]
 8003ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	0800ac8c 	.word	0x0800ac8c

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d012      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f00:	4b69      	ldr	r3, [pc, #420]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a68      	ldr	r2, [pc, #416]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f0a:	6093      	str	r3, [r2, #8]
 8003f0c:	4b66      	ldr	r3, [pc, #408]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	4964      	ldr	r1, [pc, #400]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d017      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	4959      	ldr	r1, [pc, #356]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f50:	d101      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d017      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f6e:	4b4e      	ldr	r3, [pc, #312]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	494a      	ldr	r1, [pc, #296]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 808b 	beq.w	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	4a39      	ldr	r2, [pc, #228]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc8:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fd4:	4b35      	ldr	r3, [pc, #212]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a34      	ldr	r2, [pc, #208]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe0:	f7fe fe0c 	bl	8002bfc <HAL_GetTick>
 8003fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fe fe08 	bl	8002bfc <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e355      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004006:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d035      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d02e      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800402e:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004046:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d114      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe fdd0 	bl	8002bfc <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405e:	e00a      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fe fdcc 	bl	8002bfc <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e317      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ee      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408e:	d111      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800409e:	400b      	ands	r3, r1
 80040a0:	4901      	ldr	r1, [pc, #4]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
 80040a6:	e00b      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40007000 	.word	0x40007000
 80040b0:	0ffffcff 	.word	0x0ffffcff
 80040b4:	4bb0      	ldr	r3, [pc, #704]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4aaf      	ldr	r2, [pc, #700]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040be:	6093      	str	r3, [r2, #8]
 80040c0:	4bad      	ldr	r3, [pc, #692]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040cc:	49aa      	ldr	r1, [pc, #680]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040de:	4ba6      	ldr	r3, [pc, #664]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e4:	4aa4      	ldr	r2, [pc, #656]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040ee:	4ba2      	ldr	r3, [pc, #648]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	499f      	ldr	r1, [pc, #636]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800410c:	4b9a      	ldr	r3, [pc, #616]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	4997      	ldr	r1, [pc, #604]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800412e:	4b92      	ldr	r3, [pc, #584]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413c:	498e      	ldr	r1, [pc, #568]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004150:	4b89      	ldr	r3, [pc, #548]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415e:	4986      	ldr	r1, [pc, #536]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004172:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	497d      	ldr	r1, [pc, #500]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004194:	4b78      	ldr	r3, [pc, #480]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4975      	ldr	r1, [pc, #468]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b6:	4b70      	ldr	r3, [pc, #448]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f023 020c 	bic.w	r2, r3, #12
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c4:	496c      	ldr	r1, [pc, #432]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d8:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	4964      	ldr	r1, [pc, #400]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	495b      	ldr	r1, [pc, #364]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	4953      	ldr	r1, [pc, #332]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800423e:	4b4e      	ldr	r3, [pc, #312]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	494a      	ldr	r1, [pc, #296]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	4942      	ldr	r1, [pc, #264]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004282:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	4939      	ldr	r1, [pc, #228]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042a4:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b2:	4931      	ldr	r1, [pc, #196]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d4:	4928      	ldr	r1, [pc, #160]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004306:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	4918      	ldr	r1, [pc, #96]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004338:	490f      	ldr	r1, [pc, #60]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d005      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434e:	f040 80d8 	bne.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004358:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800435c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435e:	f7fe fc4d 	bl	8002bfc <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004366:	f7fe fc49 	bl	8002bfc <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	; 0x64
 8004372:	d903      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e196      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004378:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437c:	4b6c      	ldr	r3, [pc, #432]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1ee      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d021      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11d      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800439c:	4b64      	ldr	r3, [pc, #400]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800439e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043aa:	4b61      	ldr	r3, [pc, #388]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b0:	0e1b      	lsrs	r3, r3, #24
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	019a      	lsls	r2, r3, #6
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	071b      	lsls	r3, r3, #28
 80043d0:	4957      	ldr	r1, [pc, #348]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x516>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02e      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d129      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004404:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004418:	0f1b      	lsrs	r3, r3, #28
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	019a      	lsls	r2, r3, #6
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	431a      	orrs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	071b      	lsls	r3, r3, #28
 8004438:	493d      	ldr	r1, [pc, #244]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004440:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004446:	f023 021f 	bic.w	r2, r3, #31
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	3b01      	subs	r3, #1
 8004450:	4937      	ldr	r1, [pc, #220]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446a:	0e1b      	lsrs	r3, r3, #24
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004478:	0f1b      	lsrs	r3, r3, #28
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	019a      	lsls	r2, r3, #6
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	071b      	lsls	r3, r3, #28
 8004498:	4925      	ldr	r1, [pc, #148]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d011      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	019a      	lsls	r2, r3, #6
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	061b      	lsls	r3, r3, #24
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	071b      	lsls	r3, r3, #28
 80044c8:	4919      	ldr	r1, [pc, #100]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044dc:	f7fe fb8e 	bl	8002bfc <HAL_GetTick>
 80044e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044e4:	f7fe fb8a 	bl	8002bfc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0d7      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 80cd 	bne.w	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004516:	f7fe fb71 	bl	8002bfc <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800451e:	f7fe fb6d 	bl	8002bfc <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d903      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0ba      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004530:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800453c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004540:	d0ed      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02e      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d12a      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800456a:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004578:	4b4d      	ldr	r3, [pc, #308]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	0f1b      	lsrs	r3, r3, #28
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	019a      	lsls	r2, r3, #6
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	4944      	ldr	r1, [pc, #272]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045a6:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	493d      	ldr	r1, [pc, #244]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d022      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d4:	d11d      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	0e1b      	lsrs	r3, r3, #24
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045e4:	4b32      	ldr	r3, [pc, #200]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	0f1b      	lsrs	r3, r3, #28
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	019a      	lsls	r2, r3, #6
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	431a      	orrs	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	431a      	orrs	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	071b      	lsls	r3, r3, #28
 800460a:	4929      	ldr	r1, [pc, #164]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d028      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	019a      	lsls	r2, r3, #6
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	431a      	orrs	r2, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	071b      	lsls	r3, r3, #28
 8004652:	4917      	ldr	r1, [pc, #92]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800465c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4911      	ldr	r1, [pc, #68]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467c:	f7fe fabe 	bl	8002bfc <HAL_GetTick>
 8004680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004684:	f7fe faba 	bl	8002bfc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e007      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800469e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a2:	d1ef      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e084      	b.n	80047d0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fd fe79 	bl	80023d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004706:	d902      	bls.n	800470e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e002      	b.n	8004714 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800470e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800471c:	d007      	beq.n	800472e <HAL_SPI_Init+0x7a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004726:	d002      	beq.n	800472e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800473e:	d903      	bls.n	8004748 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
 8004746:	e002      	b.n	800474e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	ea42 0103 	orr.w	r1, r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f003 0204 	and.w	r2, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_SPI_Transmit+0x22>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e150      	b.n	8004a9c <HAL_SPI_Transmit+0x2c4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004802:	f7fe f9fb 	bl	8002bfc <HAL_GetTick>
 8004806:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d002      	beq.n	800481e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004818:	2302      	movs	r3, #2
 800481a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800481c:	e135      	b.n	8004a8a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_SPI_Transmit+0x52>
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800482e:	e12c      	b.n	8004a8a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2203      	movs	r2, #3
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487a:	d107      	bne.n	800488c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d007      	beq.n	80048aa <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b2:	d94b      	bls.n	800494c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_SPI_Transmit+0xea>
 80048bc:	8afb      	ldrh	r3, [r7, #22]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d13e      	bne.n	8004940 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	881a      	ldrh	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048e6:	e02b      	b.n	8004940 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d112      	bne.n	800491c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	881a      	ldrh	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800491a:	e011      	b.n	8004940 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800491c:	f7fe f96e 	bl	8002bfc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d803      	bhi.n	8004934 <HAL_SPI_Transmit+0x15c>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d102      	bne.n	800493a <HAL_SPI_Transmit+0x162>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800493e:	e0a4      	b.n	8004a8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ce      	bne.n	80048e8 <HAL_SPI_Transmit+0x110>
 800494a:	e07c      	b.n	8004a46 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Transmit+0x182>
 8004954:	8afb      	ldrh	r3, [r7, #22]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d170      	bne.n	8004a3c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d912      	bls.n	800498a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	881a      	ldrh	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	1c9a      	adds	r2, r3, #2
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b02      	subs	r3, #2
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004988:	e058      	b.n	8004a3c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049b0:	e044      	b.n	8004a3c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d12b      	bne.n	8004a18 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d912      	bls.n	80049f0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b02      	subs	r3, #2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ee:	e025      	b.n	8004a3c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	7812      	ldrb	r2, [r2, #0]
 80049fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a16:	e011      	b.n	8004a3c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a18:	f7fe f8f0 	bl	8002bfc <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d803      	bhi.n	8004a30 <HAL_SPI_Transmit+0x258>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d102      	bne.n	8004a36 <HAL_SPI_Transmit+0x25e>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a3a:	e026      	b.n	8004a8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1b5      	bne.n	80049b2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fb14 	bl	8005078 <SPI_EndRxTxTransaction>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e000      	b.n	8004a8a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004a88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_SPI_TransmitReceive+0x26>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e1fb      	b.n	8004ec2 <HAL_SPI_TransmitReceive+0x41e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad2:	f7fe f893 	bl	8002bfc <HAL_GetTick>
 8004ad6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ade:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aee:	7efb      	ldrb	r3, [r7, #27]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d00e      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x6e>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afa:	d106      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x66>
 8004b04:	7efb      	ldrb	r3, [r7, #27]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d003      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b10:	e1cd      	b.n	8004eae <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x80>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x80>
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b2a:	e1c0      	b.n	8004eae <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d003      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2205      	movs	r2, #5
 8004b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b82:	d802      	bhi.n	8004b8a <HAL_SPI_TransmitReceive+0xe6>
 8004b84:	8a3b      	ldrh	r3, [r7, #16]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d908      	bls.n	8004b9c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e007      	b.n	8004bac <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d007      	beq.n	8004bca <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd2:	d97c      	bls.n	8004cce <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x13e>
 8004bdc:	8a7b      	ldrh	r3, [r7, #18]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d169      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c06:	e056      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d11b      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x1aa>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <HAL_SPI_TransmitReceive+0x1aa>
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d113      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d11c      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x1f2>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d016      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	b292      	uxth	r2, r2
 8004c74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c92:	2301      	movs	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c96:	f7fd ffb1 	bl	8002bfc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d807      	bhi.n	8004cb6 <HAL_SPI_TransmitReceive+0x212>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d003      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004cb4:	e0fb      	b.n	8004eae <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1a3      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x164>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d19d      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x164>
 8004ccc:	e0df      	b.n	8004e8e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x23a>
 8004cd6:	8a7b      	ldrh	r3, [r7, #18]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 80cb 	bne.w	8004e74 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d912      	bls.n	8004d0e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b02      	subs	r3, #2
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d0c:	e0b2      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d34:	e09e      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d134      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x30a>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02f      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x30a>
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d12c      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d912      	bls.n	8004d84 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b02      	subs	r3, #2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d82:	e012      	b.n	8004daa <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	7812      	ldrb	r2, [r2, #0]
 8004d90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d148      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x3aa>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d042      	beq.n	8004e4e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d923      	bls.n	8004e1c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	b292      	uxth	r2, r2
 8004de0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b02      	subs	r3, #2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d81f      	bhi.n	8004e4a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e016      	b.n	8004e4a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f103 020c 	add.w	r2, r3, #12
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e4e:	f7fd fed5 	bl	8002bfc <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d803      	bhi.n	8004e66 <HAL_SPI_TransmitReceive+0x3c2>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d102      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x3c8>
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d103      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e72:	e01c      	b.n	8004eae <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f47f af5b 	bne.w	8004d36 <HAL_SPI_TransmitReceive+0x292>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f af54 	bne.w	8004d36 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f8f0 	bl	8005078 <SPI_EndRxTxTransaction>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	661a      	str	r2, [r3, #96]	; 0x60
 8004eaa:	e000      	b.n	8004eae <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004eac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	e04c      	b.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d048      	beq.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ee4:	f7fd fe8a 	bl	8002bfc <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d902      	bls.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13d      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f12:	d111      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1c:	d004      	beq.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	d107      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f40:	d10f      	bne.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e00f      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1a3      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fac:	e057      	b.n	800505e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fb4:	d106      	bne.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d103      	bne.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d048      	beq.n	800505e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fcc:	f7fd fe16 	bl	8002bfc <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d902      	bls.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d13d      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ffa:	d111      	bne.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005004:	d004      	beq.n	8005010 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d107      	bne.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005028:	d10f      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e008      	b.n	8005070 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d19f      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff84 	bl	8004f9e <SPI_WaitFifoStateUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e027      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	2180      	movs	r1, #128	; 0x80
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff ff07 	bl	8004eca <SPI_WaitFlagStateUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e014      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff ff5d 	bl	8004f9e <SPI_WaitFifoStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e000      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e01d      	b.n	8005152 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fd fb9e 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fbf4 	bl	8005930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e01d      	b.n	80051a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f815 	bl	80051b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fbc9 	bl	8005930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e07b      	b.n	80052d0 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fd fb75 	bl	80028dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <HAL_TIM_Encoder_Init+0x114>)
 8005206:	400b      	ands	r3, r1
 8005208:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f000 fb8b 	bl	8005930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4b27      	ldr	r3, [pc, #156]	; (80052dc <HAL_TIM_Encoder_Init+0x118>)
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	4313      	orrs	r3, r2
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <HAL_TIM_Encoder_Init+0x11c>)
 800525a:	4013      	ands	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_TIM_Encoder_Init+0x120>)
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	4313      	orrs	r3, r2
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	011a      	lsls	r2, r3, #4
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	031b      	lsls	r3, r3, #12
 8005284:	4313      	orrs	r3, r2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4313      	orrs	r3, r2
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	fffebff8 	.word	0xfffebff8
 80052dc:	fffffcfc 	.word	0xfffffcfc
 80052e0:	fffff3f3 	.word	0xfffff3f3
 80052e4:	ffff0f0f 	.word	0xffff0f0f

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fae2 	bl	80058f4 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fad4 	bl	80058e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fae5 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fab8 	bl	80058f4 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 faaa 	bl	80058e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fabb 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa8e 	bl	80058f4 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa80 	bl	80058e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa91 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa64 	bl	80058f4 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa56 	bl	80058e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa67 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa30 	bl	80058cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fe7c 	bl	8006190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fe6f 	bl	80061a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa15 	bl	800591c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0220 	mvn.w	r2, #32
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fe2f 	bl	800617c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800553e:	2302      	movs	r3, #2
 8005540:	e105      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b14      	cmp	r3, #20
 8005556:	f200 80f0 	bhi.w	800573a <HAL_TIM_PWM_ConfigChannel+0x212>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	080055b5 	.word	0x080055b5
 8005564:	0800573b 	.word	0x0800573b
 8005568:	0800573b 	.word	0x0800573b
 800556c:	0800573b 	.word	0x0800573b
 8005570:	080055f5 	.word	0x080055f5
 8005574:	0800573b 	.word	0x0800573b
 8005578:	0800573b 	.word	0x0800573b
 800557c:	0800573b 	.word	0x0800573b
 8005580:	08005637 	.word	0x08005637
 8005584:	0800573b 	.word	0x0800573b
 8005588:	0800573b 	.word	0x0800573b
 800558c:	0800573b 	.word	0x0800573b
 8005590:	08005677 	.word	0x08005677
 8005594:	0800573b 	.word	0x0800573b
 8005598:	0800573b 	.word	0x0800573b
 800559c:	0800573b 	.word	0x0800573b
 80055a0:	080056b9 	.word	0x080056b9
 80055a4:	0800573b 	.word	0x0800573b
 80055a8:	0800573b 	.word	0x0800573b
 80055ac:	0800573b 	.word	0x0800573b
 80055b0:	080056f9 	.word	0x080056f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fa58 	bl	8005a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0204 	bic.w	r2, r2, #4
 80055de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6999      	ldr	r1, [r3, #24]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	619a      	str	r2, [r3, #24]
      break;
 80055f2:	e0a3      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 faaa 	bl	8005b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6999      	ldr	r1, [r3, #24]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	619a      	str	r2, [r3, #24]
      break;
 8005634:	e082      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fb01 	bl	8005c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0208 	orr.w	r2, r2, #8
 8005650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0204 	bic.w	r2, r2, #4
 8005660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69d9      	ldr	r1, [r3, #28]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	61da      	str	r2, [r3, #28]
      break;
 8005674:	e062      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fb57 	bl	8005d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69d9      	ldr	r1, [r3, #28]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	021a      	lsls	r2, r3, #8
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	61da      	str	r2, [r3, #28]
      break;
 80056b6:	e041      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb8e 	bl	8005de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0204 	bic.w	r2, r2, #4
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f6:	e021      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fbc0 	bl	8005e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005738:	e000      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800573a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop

08005758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIM_ConfigClockSource+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e0a6      	b.n	80058be <HAL_TIM_ConfigClockSource+0x166>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b4f      	ldr	r3, [pc, #316]	; (80058c8 <HAL_TIM_ConfigClockSource+0x170>)
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005796:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d067      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0x120>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d80b      	bhi.n	80057c4 <HAL_TIM_ConfigClockSource+0x6c>
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d073      	beq.n	8005898 <HAL_TIM_ConfigClockSource+0x140>
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d802      	bhi.n	80057ba <HAL_TIM_ConfigClockSource+0x62>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d06f      	beq.n	8005898 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057b8:	e078      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d06c      	beq.n	8005898 <HAL_TIM_ConfigClockSource+0x140>
 80057be:	2b30      	cmp	r3, #48	; 0x30
 80057c0:	d06a      	beq.n	8005898 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057c2:	e073      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057c4:	2b70      	cmp	r3, #112	; 0x70
 80057c6:	d00d      	beq.n	80057e4 <HAL_TIM_ConfigClockSource+0x8c>
 80057c8:	2b70      	cmp	r3, #112	; 0x70
 80057ca:	d804      	bhi.n	80057d6 <HAL_TIM_ConfigClockSource+0x7e>
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d033      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0xe0>
 80057d0:	2b60      	cmp	r3, #96	; 0x60
 80057d2:	d041      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80057d4:	e06a      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	d066      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x152>
 80057dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e0:	d017      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057e2:	e063      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f000 fc14 	bl	8006020 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005806:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
      break;
 8005810:	e04c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f000 fbfd 	bl	8006020 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005834:	609a      	str	r2, [r3, #8]
      break;
 8005836:	e039      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6859      	ldr	r1, [r3, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	461a      	mov	r2, r3
 8005846:	f000 fb71 	bl	8005f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2150      	movs	r1, #80	; 0x50
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fbca 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005856:	e029      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6859      	ldr	r1, [r3, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	461a      	mov	r2, r3
 8005866:	f000 fb90 	bl	8005f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2160      	movs	r1, #96	; 0x60
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fbba 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005876:	e019      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6859      	ldr	r1, [r3, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	461a      	mov	r2, r3
 8005886:	f000 fb51 	bl	8005f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2140      	movs	r1, #64	; 0x40
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fbaa 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005896:	e009      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f000 fba1 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 80058a8:	e000      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	fffeff88 	.word	0xfffeff88

080058cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a40      	ldr	r2, [pc, #256]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594e:	d00f      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3d      	ldr	r2, [pc, #244]	; (8005a48 <TIM_Base_SetConfig+0x118>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00b      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <TIM_Base_SetConfig+0x11c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <TIM_Base_SetConfig+0x120>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3a      	ldr	r2, [pc, #232]	; (8005a54 <TIM_Base_SetConfig+0x124>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02b      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d027      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <TIM_Base_SetConfig+0x118>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d023      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <TIM_Base_SetConfig+0x11c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01f      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <TIM_Base_SetConfig+0x120>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01b      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a29      	ldr	r2, [pc, #164]	; (8005a54 <TIM_Base_SetConfig+0x124>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d017      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a28      	ldr	r2, [pc, #160]	; (8005a58 <TIM_Base_SetConfig+0x128>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a27      	ldr	r2, [pc, #156]	; (8005a5c <TIM_Base_SetConfig+0x12c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <TIM_Base_SetConfig+0x130>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a25      	ldr	r2, [pc, #148]	; (8005a64 <TIM_Base_SetConfig+0x134>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a24      	ldr	r2, [pc, #144]	; (8005a68 <TIM_Base_SetConfig+0x138>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a23      	ldr	r2, [pc, #140]	; (8005a6c <TIM_Base_SetConfig+0x13c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0xf8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0c      	ldr	r2, [pc, #48]	; (8005a54 <TIM_Base_SetConfig+0x124>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d103      	bne.n	8005a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000800 	.word	0x40000800
 8005a50:	40000c00 	.word	0x40000c00
 8005a54:	40010400 	.word	0x40010400
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800
 8005a64:	40001800 	.word	0x40001800
 8005a68:	40001c00 	.word	0x40001c00
 8005a6c:	40002000 	.word	0x40002000

08005a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <TIM_OC1_SetConfig+0xd8>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 0302 	bic.w	r3, r3, #2
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <TIM_OC1_SetConfig+0xdc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x64>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a20      	ldr	r2, [pc, #128]	; (8005b50 <TIM_OC1_SetConfig+0xe0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10c      	bne.n	8005aee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0308 	bic.w	r3, r3, #8
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 0304 	bic.w	r3, r3, #4
 8005aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <TIM_OC1_SetConfig+0xdc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC1_SetConfig+0x8e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <TIM_OC1_SetConfig+0xe0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d111      	bne.n	8005b22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	621a      	str	r2, [r3, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	fffeff8f 	.word	0xfffeff8f
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40010400 	.word	0x40010400

08005b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0210 	bic.w	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <TIM_OC2_SetConfig+0xe4>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0320 	bic.w	r3, r3, #32
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <TIM_OC2_SetConfig+0xe8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC2_SetConfig+0x68>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <TIM_OC2_SetConfig+0xec>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10d      	bne.n	8005bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a18      	ldr	r2, [pc, #96]	; (8005c3c <TIM_OC2_SetConfig+0xe8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC2_SetConfig+0x94>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a17      	ldr	r2, [pc, #92]	; (8005c40 <TIM_OC2_SetConfig+0xec>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d113      	bne.n	8005c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	feff8fff 	.word	0xfeff8fff
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4b2d      	ldr	r3, [pc, #180]	; (8005d24 <TIM_OC3_SetConfig+0xe0>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <TIM_OC3_SetConfig+0xe4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC3_SetConfig+0x66>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <TIM_OC3_SetConfig+0xe8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC3_SetConfig+0xe4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_OC3_SetConfig+0x92>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC3_SetConfig+0xe8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d113      	bne.n	8005cfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	621a      	str	r2, [r3, #32]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	fffeff8f 	.word	0xfffeff8f
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400

08005d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4b1e      	ldr	r3, [pc, #120]	; (8005dd4 <TIM_OC4_SetConfig+0xa4>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <TIM_OC4_SetConfig+0xa8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC4_SetConfig+0x68>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <TIM_OC4_SetConfig+0xac>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	feff8fff 	.word	0xfeff8fff
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40010400 	.word	0x40010400

08005de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <TIM_OC5_SetConfig+0x98>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <TIM_OC5_SetConfig+0x9c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_OC5_SetConfig+0x5e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <TIM_OC5_SetConfig+0xa0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d109      	bne.n	8005e52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	fffeff8f 	.word	0xfffeff8f
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400

08005e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <TIM_OC6_SetConfig+0x9c>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	051b      	lsls	r3, r3, #20
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <TIM_OC6_SetConfig+0xa0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC6_SetConfig+0x60>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <TIM_OC6_SetConfig+0xa4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d109      	bne.n	8005ef8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	feff8fff 	.word	0xfeff8fff
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400

08005f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f023 0201 	bic.w	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f023 030a 	bic.w	r3, r3, #10
 8005f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0210 	bic.w	r2, r3, #16
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	f043 0307 	orr.w	r3, r3, #7
 800600c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	021a      	lsls	r2, r3, #8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	431a      	orrs	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	609a      	str	r2, [r3, #8]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e06d      	b.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a30      	ldr	r2, [pc, #192]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d108      	bne.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a20      	ldr	r2, [pc, #128]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d022      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ea:	d01d      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a15      	ldr	r2, [pc, #84]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d10c      	bne.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40000c00 	.word	0x40000c00
 8006174:	40014000 	.word	0x40014000
 8006178:	40001800 	.word	0x40001800

0800617c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e040      	b.n	800624c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc fc48 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa66 	bl	80066c8 <UART_SetConfig>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e022      	b.n	800624c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fd04 	bl	8006c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fd8b 	bl	8006d60 <UART_CheckIdleState>
 800624a:	4603      	mov	r3, r0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006266:	2b20      	cmp	r3, #32
 8006268:	d144      	bne.n	80062f4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_UART_Transmit_IT+0x22>
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e03d      	b.n	80062f6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_UART_Transmit_IT+0x34>
 8006284:	2302      	movs	r3, #2
 8006286:	e036      	b.n	80062f6 <HAL_UART_Transmit_IT+0xa2>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	88fa      	ldrh	r2, [r7, #6]
 80062a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2221      	movs	r2, #33	; 0x21
 80062b6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c0:	d107      	bne.n	80062d2 <HAL_UART_Transmit_IT+0x7e>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a0d      	ldr	r2, [pc, #52]	; (8006304 <HAL_UART_Transmit_IT+0xb0>)
 80062ce:	665a      	str	r2, [r3, #100]	; 0x64
 80062d0:	e002      	b.n	80062d8 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <HAL_UART_Transmit_IT+0xb4>)
 80062d6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062ee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	08006f93 	.word	0x08006f93
 8006308:	08006f21 	.word	0x08006f21

0800630c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800631e:	2b20      	cmp	r3, #32
 8006320:	f040 808a 	bne.w	8006438 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Receive_IT+0x24>
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e082      	b.n	800643a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_UART_Receive_IT+0x36>
 800633e:	2302      	movs	r3, #2
 8006340:	e07b      	b.n	800643a <HAL_UART_Receive_IT+0x12e>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	88fa      	ldrh	r2, [r7, #6]
 800635c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d10e      	bne.n	800638e <HAL_UART_Receive_IT+0x82>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_UART_Receive_IT+0x78>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800637e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006382:	e02d      	b.n	80063e0 <HAL_UART_Receive_IT+0xd4>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	22ff      	movs	r2, #255	; 0xff
 8006388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800638c:	e028      	b.n	80063e0 <HAL_UART_Receive_IT+0xd4>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10d      	bne.n	80063b2 <HAL_UART_Receive_IT+0xa6>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <HAL_UART_Receive_IT+0x9c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	22ff      	movs	r2, #255	; 0xff
 80063a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a6:	e01b      	b.n	80063e0 <HAL_UART_Receive_IT+0xd4>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	227f      	movs	r2, #127	; 0x7f
 80063ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063b0:	e016      	b.n	80063e0 <HAL_UART_Receive_IT+0xd4>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ba:	d10d      	bne.n	80063d8 <HAL_UART_Receive_IT+0xcc>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <HAL_UART_Receive_IT+0xc2>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	227f      	movs	r2, #127	; 0x7f
 80063c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063cc:	e008      	b.n	80063e0 <HAL_UART_Receive_IT+0xd4>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	223f      	movs	r2, #63	; 0x3f
 80063d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063d6:	e003      	b.n	80063e0 <HAL_UART_Receive_IT+0xd4>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2222      	movs	r2, #34	; 0x22
 80063ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d107      	bne.n	8006416 <HAL_UART_Receive_IT+0x10a>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a0d      	ldr	r2, [pc, #52]	; (8006448 <HAL_UART_Receive_IT+0x13c>)
 8006412:	661a      	str	r2, [r3, #96]	; 0x60
 8006414:	e002      	b.n	800641c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a0c      	ldr	r2, [pc, #48]	; (800644c <HAL_UART_Receive_IT+0x140>)
 800641a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006432:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	e000      	b.n	800643a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006438:	2302      	movs	r3, #2
  }
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	080070e7 	.word	0x080070e7
 800644c:	08007041 	.word	0x08007041

08006450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	f640 030f 	movw	r3, #2063	; 0x80f
 8006476:	4013      	ands	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d113      	bne.n	80064a8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00e      	beq.n	80064a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8100 	beq.w	800669e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
      }
      return;
 80064a6:	e0fa      	b.n	800669e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80d5 	beq.w	800665a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d105      	bne.n	80064c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80ca 	beq.w	800665a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <HAL_UART_IRQHandler+0x9e>
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2201      	movs	r2, #1
 80064e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e6:	f043 0201 	orr.w	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <HAL_UART_IRQHandler+0xc6>
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2202      	movs	r2, #2
 8006508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650e:	f043 0204 	orr.w	r2, r3, #4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <HAL_UART_IRQHandler+0xee>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2204      	movs	r2, #4
 8006530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006536:	f043 0202 	orr.w	r2, r3, #2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d013      	beq.n	8006570 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006558:	2b00      	cmp	r3, #0
 800655a:	d009      	beq.n	8006570 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2208      	movs	r2, #8
 8006562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006568:	f043 0208 	orr.w	r2, r3, #8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <HAL_UART_IRQHandler+0x14a>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800658c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006592:	f043 0220 	orr.w	r2, r3, #32
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d07f      	beq.n	80066a2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d004      	beq.n	80065e4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d031      	beq.n	8006648 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc65 	bl	8006eb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d123      	bne.n	8006640 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006614:	4a26      	ldr	r2, [pc, #152]	; (80066b0 <HAL_UART_IRQHandler+0x260>)
 8006616:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661c:	4618      	mov	r0, r3
 800661e:	f7fc fc2c 	bl	8002e7a <HAL_DMA_Abort_IT>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d016      	beq.n	8006656 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006632:	4610      	mov	r0, r2
 8006634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006636:	e00e      	b.n	8006656 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f83b 	bl	80066b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663e:	e00a      	b.n	8006656 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f837 	bl	80066b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006646:	e006      	b.n	8006656 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f833 	bl	80066b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006654:	e025      	b.n	80066a2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006656:	bf00      	nop
    return;
 8006658:	e023      	b.n	80066a2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00d      	beq.n	8006680 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006672:	2b00      	cmp	r3, #0
 8006674:	d017      	beq.n	80066a6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
    }
    return;
 800667e:	e012      	b.n	80066a6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00e      	beq.n	80066a8 <HAL_UART_IRQHandler+0x258>
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fcba 	bl	800700e <UART_EndTransmit_IT>
    return;
 800669a:	bf00      	nop
 800669c:	e004      	b.n	80066a8 <HAL_UART_IRQHandler+0x258>
      return;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <HAL_UART_IRQHandler+0x258>
    return;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_UART_IRQHandler+0x258>
    return;
 80066a6:	bf00      	nop
  }

}
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	08006ef5 	.word	0x08006ef5

080066b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4bb1      	ldr	r3, [pc, #708]	; (80069bc <UART_SetConfig+0x2f4>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	6939      	ldr	r1, [r7, #16]
 8006700:	430b      	orrs	r3, r1
 8006702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a9f      	ldr	r2, [pc, #636]	; (80069c0 <UART_SetConfig+0x2f8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d121      	bne.n	800678c <UART_SetConfig+0xc4>
 8006748:	4b9e      	ldr	r3, [pc, #632]	; (80069c4 <UART_SetConfig+0x2fc>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b03      	cmp	r3, #3
 8006754:	d816      	bhi.n	8006784 <UART_SetConfig+0xbc>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x94>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006779 	.word	0x08006779
 8006764:	08006773 	.word	0x08006773
 8006768:	0800677f 	.word	0x0800677f
 800676c:	2301      	movs	r3, #1
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e151      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006772:	2302      	movs	r3, #2
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e14e      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006778:	2304      	movs	r3, #4
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e14b      	b.n	8006a16 <UART_SetConfig+0x34e>
 800677e:	2308      	movs	r3, #8
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e148      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006784:	2310      	movs	r3, #16
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	bf00      	nop
 800678a:	e144      	b.n	8006a16 <UART_SetConfig+0x34e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a8d      	ldr	r2, [pc, #564]	; (80069c8 <UART_SetConfig+0x300>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d134      	bne.n	8006800 <UART_SetConfig+0x138>
 8006796:	4b8b      	ldr	r3, [pc, #556]	; (80069c4 <UART_SetConfig+0x2fc>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d829      	bhi.n	80067f8 <UART_SetConfig+0x130>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0xe4>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	080067f9 	.word	0x080067f9
 80067b4:	080067f9 	.word	0x080067f9
 80067b8:	080067f9 	.word	0x080067f9
 80067bc:	080067ed 	.word	0x080067ed
 80067c0:	080067f9 	.word	0x080067f9
 80067c4:	080067f9 	.word	0x080067f9
 80067c8:	080067f9 	.word	0x080067f9
 80067cc:	080067e7 	.word	0x080067e7
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	080067f9 	.word	0x080067f9
 80067dc:	080067f3 	.word	0x080067f3
 80067e0:	2300      	movs	r3, #0
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e117      	b.n	8006a16 <UART_SetConfig+0x34e>
 80067e6:	2302      	movs	r3, #2
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e114      	b.n	8006a16 <UART_SetConfig+0x34e>
 80067ec:	2304      	movs	r3, #4
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e111      	b.n	8006a16 <UART_SetConfig+0x34e>
 80067f2:	2308      	movs	r3, #8
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e10e      	b.n	8006a16 <UART_SetConfig+0x34e>
 80067f8:	2310      	movs	r3, #16
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	bf00      	nop
 80067fe:	e10a      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a71      	ldr	r2, [pc, #452]	; (80069cc <UART_SetConfig+0x304>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d120      	bne.n	800684c <UART_SetConfig+0x184>
 800680a:	4b6e      	ldr	r3, [pc, #440]	; (80069c4 <UART_SetConfig+0x2fc>)
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006810:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006814:	2b10      	cmp	r3, #16
 8006816:	d00f      	beq.n	8006838 <UART_SetConfig+0x170>
 8006818:	2b10      	cmp	r3, #16
 800681a:	d802      	bhi.n	8006822 <UART_SetConfig+0x15a>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <UART_SetConfig+0x164>
 8006820:	e010      	b.n	8006844 <UART_SetConfig+0x17c>
 8006822:	2b20      	cmp	r3, #32
 8006824:	d005      	beq.n	8006832 <UART_SetConfig+0x16a>
 8006826:	2b30      	cmp	r3, #48	; 0x30
 8006828:	d009      	beq.n	800683e <UART_SetConfig+0x176>
 800682a:	e00b      	b.n	8006844 <UART_SetConfig+0x17c>
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e0f1      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006832:	2302      	movs	r3, #2
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e0ee      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006838:	2304      	movs	r3, #4
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e0eb      	b.n	8006a16 <UART_SetConfig+0x34e>
 800683e:	2308      	movs	r3, #8
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e0e8      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	bf00      	nop
 800684a:	e0e4      	b.n	8006a16 <UART_SetConfig+0x34e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5f      	ldr	r2, [pc, #380]	; (80069d0 <UART_SetConfig+0x308>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d120      	bne.n	8006898 <UART_SetConfig+0x1d0>
 8006856:	4b5b      	ldr	r3, [pc, #364]	; (80069c4 <UART_SetConfig+0x2fc>)
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d00f      	beq.n	8006884 <UART_SetConfig+0x1bc>
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d802      	bhi.n	800686e <UART_SetConfig+0x1a6>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <UART_SetConfig+0x1b0>
 800686c:	e010      	b.n	8006890 <UART_SetConfig+0x1c8>
 800686e:	2b80      	cmp	r3, #128	; 0x80
 8006870:	d005      	beq.n	800687e <UART_SetConfig+0x1b6>
 8006872:	2bc0      	cmp	r3, #192	; 0xc0
 8006874:	d009      	beq.n	800688a <UART_SetConfig+0x1c2>
 8006876:	e00b      	b.n	8006890 <UART_SetConfig+0x1c8>
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e0cb      	b.n	8006a16 <UART_SetConfig+0x34e>
 800687e:	2302      	movs	r3, #2
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e0c8      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006884:	2304      	movs	r3, #4
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e0c5      	b.n	8006a16 <UART_SetConfig+0x34e>
 800688a:	2308      	movs	r3, #8
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0c2      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006890:	2310      	movs	r3, #16
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	bf00      	nop
 8006896:	e0be      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a4d      	ldr	r2, [pc, #308]	; (80069d4 <UART_SetConfig+0x30c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d124      	bne.n	80068ec <UART_SetConfig+0x224>
 80068a2:	4b48      	ldr	r3, [pc, #288]	; (80069c4 <UART_SetConfig+0x2fc>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b0:	d012      	beq.n	80068d8 <UART_SetConfig+0x210>
 80068b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b6:	d802      	bhi.n	80068be <UART_SetConfig+0x1f6>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <UART_SetConfig+0x204>
 80068bc:	e012      	b.n	80068e4 <UART_SetConfig+0x21c>
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d006      	beq.n	80068d2 <UART_SetConfig+0x20a>
 80068c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c8:	d009      	beq.n	80068de <UART_SetConfig+0x216>
 80068ca:	e00b      	b.n	80068e4 <UART_SetConfig+0x21c>
 80068cc:	2300      	movs	r3, #0
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e0a1      	b.n	8006a16 <UART_SetConfig+0x34e>
 80068d2:	2302      	movs	r3, #2
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e09e      	b.n	8006a16 <UART_SetConfig+0x34e>
 80068d8:	2304      	movs	r3, #4
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e09b      	b.n	8006a16 <UART_SetConfig+0x34e>
 80068de:	2308      	movs	r3, #8
 80068e0:	77fb      	strb	r3, [r7, #31]
 80068e2:	e098      	b.n	8006a16 <UART_SetConfig+0x34e>
 80068e4:	2310      	movs	r3, #16
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	bf00      	nop
 80068ea:	e094      	b.n	8006a16 <UART_SetConfig+0x34e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a39      	ldr	r2, [pc, #228]	; (80069d8 <UART_SetConfig+0x310>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d124      	bne.n	8006940 <UART_SetConfig+0x278>
 80068f6:	4b33      	ldr	r3, [pc, #204]	; (80069c4 <UART_SetConfig+0x2fc>)
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006904:	d012      	beq.n	800692c <UART_SetConfig+0x264>
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d802      	bhi.n	8006912 <UART_SetConfig+0x24a>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <UART_SetConfig+0x258>
 8006910:	e012      	b.n	8006938 <UART_SetConfig+0x270>
 8006912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006916:	d006      	beq.n	8006926 <UART_SetConfig+0x25e>
 8006918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800691c:	d009      	beq.n	8006932 <UART_SetConfig+0x26a>
 800691e:	e00b      	b.n	8006938 <UART_SetConfig+0x270>
 8006920:	2301      	movs	r3, #1
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e077      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006926:	2302      	movs	r3, #2
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e074      	b.n	8006a16 <UART_SetConfig+0x34e>
 800692c:	2304      	movs	r3, #4
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e071      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006932:	2308      	movs	r3, #8
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e06e      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006938:	2310      	movs	r3, #16
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	bf00      	nop
 800693e:	e06a      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a25      	ldr	r2, [pc, #148]	; (80069dc <UART_SetConfig+0x314>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d124      	bne.n	8006994 <UART_SetConfig+0x2cc>
 800694a:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <UART_SetConfig+0x2fc>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006950:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006958:	d012      	beq.n	8006980 <UART_SetConfig+0x2b8>
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d802      	bhi.n	8006966 <UART_SetConfig+0x29e>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <UART_SetConfig+0x2ac>
 8006964:	e012      	b.n	800698c <UART_SetConfig+0x2c4>
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696a:	d006      	beq.n	800697a <UART_SetConfig+0x2b2>
 800696c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006970:	d009      	beq.n	8006986 <UART_SetConfig+0x2be>
 8006972:	e00b      	b.n	800698c <UART_SetConfig+0x2c4>
 8006974:	2300      	movs	r3, #0
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e04d      	b.n	8006a16 <UART_SetConfig+0x34e>
 800697a:	2302      	movs	r3, #2
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e04a      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006980:	2304      	movs	r3, #4
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e047      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006986:	2308      	movs	r3, #8
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e044      	b.n	8006a16 <UART_SetConfig+0x34e>
 800698c:	2310      	movs	r3, #16
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	bf00      	nop
 8006992:	e040      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <UART_SetConfig+0x318>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d139      	bne.n	8006a12 <UART_SetConfig+0x34a>
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <UART_SetConfig+0x2fc>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ac:	d027      	beq.n	80069fe <UART_SetConfig+0x336>
 80069ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b2:	d817      	bhi.n	80069e4 <UART_SetConfig+0x31c>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01c      	beq.n	80069f2 <UART_SetConfig+0x32a>
 80069b8:	e027      	b.n	8006a0a <UART_SetConfig+0x342>
 80069ba:	bf00      	nop
 80069bc:	efff69f3 	.word	0xefff69f3
 80069c0:	40011000 	.word	0x40011000
 80069c4:	40023800 	.word	0x40023800
 80069c8:	40004400 	.word	0x40004400
 80069cc:	40004800 	.word	0x40004800
 80069d0:	40004c00 	.word	0x40004c00
 80069d4:	40005000 	.word	0x40005000
 80069d8:	40011400 	.word	0x40011400
 80069dc:	40007800 	.word	0x40007800
 80069e0:	40007c00 	.word	0x40007c00
 80069e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e8:	d006      	beq.n	80069f8 <UART_SetConfig+0x330>
 80069ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069ee:	d009      	beq.n	8006a04 <UART_SetConfig+0x33c>
 80069f0:	e00b      	b.n	8006a0a <UART_SetConfig+0x342>
 80069f2:	2300      	movs	r3, #0
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e00e      	b.n	8006a16 <UART_SetConfig+0x34e>
 80069f8:	2302      	movs	r3, #2
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e00b      	b.n	8006a16 <UART_SetConfig+0x34e>
 80069fe:	2304      	movs	r3, #4
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e008      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006a04:	2308      	movs	r3, #8
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e005      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006a0a:	2310      	movs	r3, #16
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	bf00      	nop
 8006a10:	e001      	b.n	8006a16 <UART_SetConfig+0x34e>
 8006a12:	2310      	movs	r3, #16
 8006a14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	d17f      	bne.n	8006b20 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006a20:	7ffb      	ldrb	r3, [r7, #31]
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d85c      	bhi.n	8006ae0 <UART_SetConfig+0x418>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <UART_SetConfig+0x364>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a71 	.word	0x08006a71
 8006a34:	08006a91 	.word	0x08006a91
 8006a38:	08006ae1 	.word	0x08006ae1
 8006a3c:	08006aa9 	.word	0x08006aa9
 8006a40:	08006ae1 	.word	0x08006ae1
 8006a44:	08006ae1 	.word	0x08006ae1
 8006a48:	08006ae1 	.word	0x08006ae1
 8006a4c:	08006ac9 	.word	0x08006ac9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fd fa1a 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8006a54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	005a      	lsls	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	441a      	add	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	61bb      	str	r3, [r7, #24]
        break;
 8006a6e:	e03a      	b.n	8006ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a70:	f7fd fa1e 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8006a74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	005a      	lsls	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	441a      	add	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	61bb      	str	r3, [r7, #24]
        break;
 8006a8e:	e02a      	b.n	8006ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	085a      	lsrs	r2, r3, #1
 8006a96:	4b5f      	ldr	r3, [pc, #380]	; (8006c14 <UART_SetConfig+0x54c>)
 8006a98:	4413      	add	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6852      	ldr	r2, [r2, #4]
 8006a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	61bb      	str	r3, [r7, #24]
        break;
 8006aa6:	e01e      	b.n	8006ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa8:	f7fd f90a 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8006aac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	005a      	lsls	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	441a      	add	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	61bb      	str	r3, [r7, #24]
        break;
 8006ac6:	e00e      	b.n	8006ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	61bb      	str	r3, [r7, #24]
        break;
 8006ade:	e002      	b.n	8006ae6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]
        break;
 8006ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b0f      	cmp	r3, #15
 8006aea:	d916      	bls.n	8006b1a <UART_SetConfig+0x452>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af2:	d212      	bcs.n	8006b1a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f023 030f 	bic.w	r3, r3, #15
 8006afc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	897b      	ldrh	r3, [r7, #10]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	897a      	ldrh	r2, [r7, #10]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e070      	b.n	8006bfc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
 8006b1e:	e06d      	b.n	8006bfc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006b20:	7ffb      	ldrb	r3, [r7, #31]
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d859      	bhi.n	8006bda <UART_SetConfig+0x512>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <UART_SetConfig+0x464>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b51 	.word	0x08006b51
 8006b30:	08006b6f 	.word	0x08006b6f
 8006b34:	08006b8d 	.word	0x08006b8d
 8006b38:	08006bdb 	.word	0x08006bdb
 8006b3c:	08006ba5 	.word	0x08006ba5
 8006b40:	08006bdb 	.word	0x08006bdb
 8006b44:	08006bdb 	.word	0x08006bdb
 8006b48:	08006bdb 	.word	0x08006bdb
 8006b4c:	08006bc3 	.word	0x08006bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b50:	f7fd f99a 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8006b54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	085a      	lsrs	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	441a      	add	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	61bb      	str	r3, [r7, #24]
        break;
 8006b6c:	e038      	b.n	8006be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6e:	f7fd f99f 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8006b72:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	085a      	lsrs	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	61bb      	str	r3, [r7, #24]
        break;
 8006b8a:	e029      	b.n	8006be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	085a      	lsrs	r2, r3, #1
 8006b92:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <UART_SetConfig+0x550>)
 8006b94:	4413      	add	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6852      	ldr	r2, [r2, #4]
 8006b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	61bb      	str	r3, [r7, #24]
        break;
 8006ba2:	e01d      	b.n	8006be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba4:	f7fd f88c 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8006ba8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	085a      	lsrs	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	61bb      	str	r3, [r7, #24]
        break;
 8006bc0:	e00e      	b.n	8006be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	61bb      	str	r3, [r7, #24]
        break;
 8006bd8:	e002      	b.n	8006be0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
        break;
 8006bde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d908      	bls.n	8006bf8 <UART_SetConfig+0x530>
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bec:	d204      	bcs.n	8006bf8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	e001      	b.n	8006bfc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	01e84800 	.word	0x01e84800
 8006c18:	00f42400 	.word	0x00f42400

08006c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1a:	d10a      	bne.n	8006d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d6e:	f7fb ff45 	bl	8002bfc <HAL_GetTick>
 8006d72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d10e      	bne.n	8006da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f814 	bl	8006dbe <UART_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e00a      	b.n	8006db6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dce:	e05d      	b.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d059      	beq.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fb ff10 	bl	8002bfc <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <UART_WaitOnFlagUntilTimeout+0x30>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11b      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dfc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e042      	b.n	8006eac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d02b      	beq.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e42:	d123      	bne.n	8006e8c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e4c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0201 	bic.w	r2, r2, #1
 8006e6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e00f      	b.n	8006eac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69da      	ldr	r2, [r3, #28]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4013      	ands	r3, r2
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d092      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fbce 	bl	80066b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2c:	2b21      	cmp	r3, #33	; 0x21
 8006f2e:	d12a      	bne.n	8006f86 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d110      	bne.n	8006f5e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f4a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006f5c:	e013      	b.n	8006f86 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9e:	2b21      	cmp	r3, #33	; 0x21
 8006fa0:	d12f      	bne.n	8007002 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d110      	bne.n	8006fd0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fbc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fcc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006fce:	e018      	b.n	8007002 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	1c9a      	adds	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007024:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fb f846 	bl	80020c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007038:	bf00      	nop
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800704e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007054:	2b22      	cmp	r3, #34	; 0x22
 8007056:	d13a      	bne.n	80070ce <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007060:	89bb      	ldrh	r3, [r7, #12]
 8007062:	b2d9      	uxtb	r1, r3
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	400a      	ands	r2, r1
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d121      	bne.n	80070de <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070a8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb f812 	bl	80020f0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070cc:	e007      	b.n	80070de <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699a      	ldr	r2, [r3, #24]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0208 	orr.w	r2, r2, #8
 80070dc:	619a      	str	r2, [r3, #24]
}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fa:	2b22      	cmp	r3, #34	; 0x22
 80070fc:	d13a      	bne.n	8007174 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800710c:	89ba      	ldrh	r2, [r7, #12]
 800710e:	89fb      	ldrh	r3, [r7, #14]
 8007110:	4013      	ands	r3, r2
 8007112:	b29a      	uxth	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d121      	bne.n	8007184 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800714e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fa ffbf 	bl	80020f0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007172:	e007      	b.n	8007184 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0208 	orr.w	r2, r2, #8
 8007182:	619a      	str	r2, [r3, #24]
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <__errno>:
 800718c:	4b01      	ldr	r3, [pc, #4]	; (8007194 <__errno+0x8>)
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000004c 	.word	0x2000004c

08007198 <__libc_init_array>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	4e0d      	ldr	r6, [pc, #52]	; (80071d0 <__libc_init_array+0x38>)
 800719c:	4c0d      	ldr	r4, [pc, #52]	; (80071d4 <__libc_init_array+0x3c>)
 800719e:	1ba4      	subs	r4, r4, r6
 80071a0:	10a4      	asrs	r4, r4, #2
 80071a2:	2500      	movs	r5, #0
 80071a4:	42a5      	cmp	r5, r4
 80071a6:	d109      	bne.n	80071bc <__libc_init_array+0x24>
 80071a8:	4e0b      	ldr	r6, [pc, #44]	; (80071d8 <__libc_init_array+0x40>)
 80071aa:	4c0c      	ldr	r4, [pc, #48]	; (80071dc <__libc_init_array+0x44>)
 80071ac:	f003 fd56 	bl	800ac5c <_init>
 80071b0:	1ba4      	subs	r4, r4, r6
 80071b2:	10a4      	asrs	r4, r4, #2
 80071b4:	2500      	movs	r5, #0
 80071b6:	42a5      	cmp	r5, r4
 80071b8:	d105      	bne.n	80071c6 <__libc_init_array+0x2e>
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071c0:	4798      	blx	r3
 80071c2:	3501      	adds	r5, #1
 80071c4:	e7ee      	b.n	80071a4 <__libc_init_array+0xc>
 80071c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071ca:	4798      	blx	r3
 80071cc:	3501      	adds	r5, #1
 80071ce:	e7f2      	b.n	80071b6 <__libc_init_array+0x1e>
 80071d0:	0800af50 	.word	0x0800af50
 80071d4:	0800af50 	.word	0x0800af50
 80071d8:	0800af50 	.word	0x0800af50
 80071dc:	0800af54 	.word	0x0800af54

080071e0 <memset>:
 80071e0:	4402      	add	r2, r0
 80071e2:	4603      	mov	r3, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <__cvt>:
 80071f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f4:	ec55 4b10 	vmov	r4, r5, d0
 80071f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80071fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071fe:	2d00      	cmp	r5, #0
 8007200:	460e      	mov	r6, r1
 8007202:	4691      	mov	r9, r2
 8007204:	4619      	mov	r1, r3
 8007206:	bfb8      	it	lt
 8007208:	4622      	movlt	r2, r4
 800720a:	462b      	mov	r3, r5
 800720c:	f027 0720 	bic.w	r7, r7, #32
 8007210:	bfbb      	ittet	lt
 8007212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007216:	461d      	movlt	r5, r3
 8007218:	2300      	movge	r3, #0
 800721a:	232d      	movlt	r3, #45	; 0x2d
 800721c:	bfb8      	it	lt
 800721e:	4614      	movlt	r4, r2
 8007220:	2f46      	cmp	r7, #70	; 0x46
 8007222:	700b      	strb	r3, [r1, #0]
 8007224:	d004      	beq.n	8007230 <__cvt+0x40>
 8007226:	2f45      	cmp	r7, #69	; 0x45
 8007228:	d100      	bne.n	800722c <__cvt+0x3c>
 800722a:	3601      	adds	r6, #1
 800722c:	2102      	movs	r1, #2
 800722e:	e000      	b.n	8007232 <__cvt+0x42>
 8007230:	2103      	movs	r1, #3
 8007232:	ab03      	add	r3, sp, #12
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	ab02      	add	r3, sp, #8
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4632      	mov	r2, r6
 800723c:	4653      	mov	r3, sl
 800723e:	ec45 4b10 	vmov	d0, r4, r5
 8007242:	f001 fd75 	bl	8008d30 <_dtoa_r>
 8007246:	2f47      	cmp	r7, #71	; 0x47
 8007248:	4680      	mov	r8, r0
 800724a:	d102      	bne.n	8007252 <__cvt+0x62>
 800724c:	f019 0f01 	tst.w	r9, #1
 8007250:	d026      	beq.n	80072a0 <__cvt+0xb0>
 8007252:	2f46      	cmp	r7, #70	; 0x46
 8007254:	eb08 0906 	add.w	r9, r8, r6
 8007258:	d111      	bne.n	800727e <__cvt+0x8e>
 800725a:	f898 3000 	ldrb.w	r3, [r8]
 800725e:	2b30      	cmp	r3, #48	; 0x30
 8007260:	d10a      	bne.n	8007278 <__cvt+0x88>
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800726e:	b918      	cbnz	r0, 8007278 <__cvt+0x88>
 8007270:	f1c6 0601 	rsb	r6, r6, #1
 8007274:	f8ca 6000 	str.w	r6, [sl]
 8007278:	f8da 3000 	ldr.w	r3, [sl]
 800727c:	4499      	add	r9, r3
 800727e:	2200      	movs	r2, #0
 8007280:	2300      	movs	r3, #0
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	f7f9 fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 800728a:	b938      	cbnz	r0, 800729c <__cvt+0xac>
 800728c:	2230      	movs	r2, #48	; 0x30
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	454b      	cmp	r3, r9
 8007292:	d205      	bcs.n	80072a0 <__cvt+0xb0>
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	9103      	str	r1, [sp, #12]
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e7f8      	b.n	800728e <__cvt+0x9e>
 800729c:	f8cd 900c 	str.w	r9, [sp, #12]
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a4:	eba3 0308 	sub.w	r3, r3, r8
 80072a8:	4640      	mov	r0, r8
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	b004      	add	sp, #16
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080072b2 <__exponent>:
 80072b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072b4:	2900      	cmp	r1, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	bfba      	itte	lt
 80072ba:	4249      	neglt	r1, r1
 80072bc:	232d      	movlt	r3, #45	; 0x2d
 80072be:	232b      	movge	r3, #43	; 0x2b
 80072c0:	2909      	cmp	r1, #9
 80072c2:	f804 2b02 	strb.w	r2, [r4], #2
 80072c6:	7043      	strb	r3, [r0, #1]
 80072c8:	dd20      	ble.n	800730c <__exponent+0x5a>
 80072ca:	f10d 0307 	add.w	r3, sp, #7
 80072ce:	461f      	mov	r7, r3
 80072d0:	260a      	movs	r6, #10
 80072d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80072d6:	fb06 1115 	mls	r1, r6, r5, r1
 80072da:	3130      	adds	r1, #48	; 0x30
 80072dc:	2d09      	cmp	r5, #9
 80072de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80072e6:	4629      	mov	r1, r5
 80072e8:	dc09      	bgt.n	80072fe <__exponent+0x4c>
 80072ea:	3130      	adds	r1, #48	; 0x30
 80072ec:	3b02      	subs	r3, #2
 80072ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80072f2:	42bb      	cmp	r3, r7
 80072f4:	4622      	mov	r2, r4
 80072f6:	d304      	bcc.n	8007302 <__exponent+0x50>
 80072f8:	1a10      	subs	r0, r2, r0
 80072fa:	b003      	add	sp, #12
 80072fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fe:	4613      	mov	r3, r2
 8007300:	e7e7      	b.n	80072d2 <__exponent+0x20>
 8007302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007306:	f804 2b01 	strb.w	r2, [r4], #1
 800730a:	e7f2      	b.n	80072f2 <__exponent+0x40>
 800730c:	2330      	movs	r3, #48	; 0x30
 800730e:	4419      	add	r1, r3
 8007310:	7083      	strb	r3, [r0, #2]
 8007312:	1d02      	adds	r2, r0, #4
 8007314:	70c1      	strb	r1, [r0, #3]
 8007316:	e7ef      	b.n	80072f8 <__exponent+0x46>

08007318 <_printf_float>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b08d      	sub	sp, #52	; 0x34
 800731e:	460c      	mov	r4, r1
 8007320:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007324:	4616      	mov	r6, r2
 8007326:	461f      	mov	r7, r3
 8007328:	4605      	mov	r5, r0
 800732a:	f002 fde5 	bl	8009ef8 <_localeconv_r>
 800732e:	6803      	ldr	r3, [r0, #0]
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	4618      	mov	r0, r3
 8007334:	f7f8 ff6c 	bl	8000210 <strlen>
 8007338:	2300      	movs	r3, #0
 800733a:	930a      	str	r3, [sp, #40]	; 0x28
 800733c:	f8d8 3000 	ldr.w	r3, [r8]
 8007340:	9005      	str	r0, [sp, #20]
 8007342:	3307      	adds	r3, #7
 8007344:	f023 0307 	bic.w	r3, r3, #7
 8007348:	f103 0208 	add.w	r2, r3, #8
 800734c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007350:	f8d4 b000 	ldr.w	fp, [r4]
 8007354:	f8c8 2000 	str.w	r2, [r8]
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007360:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007364:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007368:	9307      	str	r3, [sp, #28]
 800736a:	f8cd 8018 	str.w	r8, [sp, #24]
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	4ba7      	ldr	r3, [pc, #668]	; (8007610 <_printf_float+0x2f8>)
 8007374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007378:	f7f9 fbf8 	bl	8000b6c <__aeabi_dcmpun>
 800737c:	bb70      	cbnz	r0, 80073dc <_printf_float+0xc4>
 800737e:	f04f 32ff 	mov.w	r2, #4294967295
 8007382:	4ba3      	ldr	r3, [pc, #652]	; (8007610 <_printf_float+0x2f8>)
 8007384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007388:	f7f9 fbd2 	bl	8000b30 <__aeabi_dcmple>
 800738c:	bb30      	cbnz	r0, 80073dc <_printf_float+0xc4>
 800738e:	2200      	movs	r2, #0
 8007390:	2300      	movs	r3, #0
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 fbc1 	bl	8000b1c <__aeabi_dcmplt>
 800739a:	b110      	cbz	r0, 80073a2 <_printf_float+0x8a>
 800739c:	232d      	movs	r3, #45	; 0x2d
 800739e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a2:	4a9c      	ldr	r2, [pc, #624]	; (8007614 <_printf_float+0x2fc>)
 80073a4:	4b9c      	ldr	r3, [pc, #624]	; (8007618 <_printf_float+0x300>)
 80073a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073aa:	bf8c      	ite	hi
 80073ac:	4690      	movhi	r8, r2
 80073ae:	4698      	movls	r8, r3
 80073b0:	2303      	movs	r3, #3
 80073b2:	f02b 0204 	bic.w	r2, fp, #4
 80073b6:	6123      	str	r3, [r4, #16]
 80073b8:	6022      	str	r2, [r4, #0]
 80073ba:	f04f 0900 	mov.w	r9, #0
 80073be:	9700      	str	r7, [sp, #0]
 80073c0:	4633      	mov	r3, r6
 80073c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f9e6 	bl	8007798 <_printf_common>
 80073cc:	3001      	adds	r0, #1
 80073ce:	f040 808d 	bne.w	80074ec <_printf_float+0x1d4>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b00d      	add	sp, #52	; 0x34
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f9 fbc2 	bl	8000b6c <__aeabi_dcmpun>
 80073e8:	b110      	cbz	r0, 80073f0 <_printf_float+0xd8>
 80073ea:	4a8c      	ldr	r2, [pc, #560]	; (800761c <_printf_float+0x304>)
 80073ec:	4b8c      	ldr	r3, [pc, #560]	; (8007620 <_printf_float+0x308>)
 80073ee:	e7da      	b.n	80073a6 <_printf_float+0x8e>
 80073f0:	6861      	ldr	r1, [r4, #4]
 80073f2:	1c4b      	adds	r3, r1, #1
 80073f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80073f8:	a80a      	add	r0, sp, #40	; 0x28
 80073fa:	d13e      	bne.n	800747a <_printf_float+0x162>
 80073fc:	2306      	movs	r3, #6
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	2300      	movs	r3, #0
 8007402:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007406:	ab09      	add	r3, sp, #36	; 0x24
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	ec49 8b10 	vmov	d0, r8, r9
 800740e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	f8cd a004 	str.w	sl, [sp, #4]
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4628      	mov	r0, r5
 800741c:	f7ff fee8 	bl	80071f0 <__cvt>
 8007420:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007424:	2b47      	cmp	r3, #71	; 0x47
 8007426:	4680      	mov	r8, r0
 8007428:	d109      	bne.n	800743e <_printf_float+0x126>
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	1cd8      	adds	r0, r3, #3
 800742e:	db02      	blt.n	8007436 <_printf_float+0x11e>
 8007430:	6862      	ldr	r2, [r4, #4]
 8007432:	4293      	cmp	r3, r2
 8007434:	dd47      	ble.n	80074c6 <_printf_float+0x1ae>
 8007436:	f1aa 0a02 	sub.w	sl, sl, #2
 800743a:	fa5f fa8a 	uxtb.w	sl, sl
 800743e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007444:	d824      	bhi.n	8007490 <_printf_float+0x178>
 8007446:	3901      	subs	r1, #1
 8007448:	4652      	mov	r2, sl
 800744a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800744e:	9109      	str	r1, [sp, #36]	; 0x24
 8007450:	f7ff ff2f 	bl	80072b2 <__exponent>
 8007454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007456:	1813      	adds	r3, r2, r0
 8007458:	2a01      	cmp	r2, #1
 800745a:	4681      	mov	r9, r0
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	dc02      	bgt.n	8007466 <_printf_float+0x14e>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	07d1      	lsls	r1, r2, #31
 8007464:	d501      	bpl.n	800746a <_printf_float+0x152>
 8007466:	3301      	adds	r3, #1
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0a5      	beq.n	80073be <_printf_float+0xa6>
 8007472:	232d      	movs	r3, #45	; 0x2d
 8007474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007478:	e7a1      	b.n	80073be <_printf_float+0xa6>
 800747a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800747e:	f000 8177 	beq.w	8007770 <_printf_float+0x458>
 8007482:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007486:	d1bb      	bne.n	8007400 <_printf_float+0xe8>
 8007488:	2900      	cmp	r1, #0
 800748a:	d1b9      	bne.n	8007400 <_printf_float+0xe8>
 800748c:	2301      	movs	r3, #1
 800748e:	e7b6      	b.n	80073fe <_printf_float+0xe6>
 8007490:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007494:	d119      	bne.n	80074ca <_printf_float+0x1b2>
 8007496:	2900      	cmp	r1, #0
 8007498:	6863      	ldr	r3, [r4, #4]
 800749a:	dd0c      	ble.n	80074b6 <_printf_float+0x19e>
 800749c:	6121      	str	r1, [r4, #16]
 800749e:	b913      	cbnz	r3, 80074a6 <_printf_float+0x18e>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	07d2      	lsls	r2, r2, #31
 80074a4:	d502      	bpl.n	80074ac <_printf_float+0x194>
 80074a6:	3301      	adds	r3, #1
 80074a8:	440b      	add	r3, r1
 80074aa:	6123      	str	r3, [r4, #16]
 80074ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	e7d9      	b.n	800746a <_printf_float+0x152>
 80074b6:	b913      	cbnz	r3, 80074be <_printf_float+0x1a6>
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	07d0      	lsls	r0, r2, #31
 80074bc:	d501      	bpl.n	80074c2 <_printf_float+0x1aa>
 80074be:	3302      	adds	r3, #2
 80074c0:	e7f3      	b.n	80074aa <_printf_float+0x192>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e7f1      	b.n	80074aa <_printf_float+0x192>
 80074c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80074ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80074ce:	4293      	cmp	r3, r2
 80074d0:	db05      	blt.n	80074de <_printf_float+0x1c6>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	07d1      	lsls	r1, r2, #31
 80074d8:	d5e8      	bpl.n	80074ac <_printf_float+0x194>
 80074da:	3301      	adds	r3, #1
 80074dc:	e7e5      	b.n	80074aa <_printf_float+0x192>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfd4      	ite	le
 80074e2:	f1c3 0302 	rsble	r3, r3, #2
 80074e6:	2301      	movgt	r3, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	e7de      	b.n	80074aa <_printf_float+0x192>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	055a      	lsls	r2, r3, #21
 80074f0:	d407      	bmi.n	8007502 <_printf_float+0x1ea>
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	d12b      	bne.n	8007558 <_printf_float+0x240>
 8007500:	e767      	b.n	80073d2 <_printf_float+0xba>
 8007502:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007506:	f240 80dc 	bls.w	80076c2 <_printf_float+0x3aa>
 800750a:	2200      	movs	r2, #0
 800750c:	2300      	movs	r3, #0
 800750e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007512:	f7f9 faf9 	bl	8000b08 <__aeabi_dcmpeq>
 8007516:	2800      	cmp	r0, #0
 8007518:	d033      	beq.n	8007582 <_printf_float+0x26a>
 800751a:	2301      	movs	r3, #1
 800751c:	4a41      	ldr	r2, [pc, #260]	; (8007624 <_printf_float+0x30c>)
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	f43f af54 	beq.w	80073d2 <_printf_float+0xba>
 800752a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800752e:	429a      	cmp	r2, r3
 8007530:	db02      	blt.n	8007538 <_printf_float+0x220>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	07d8      	lsls	r0, r3, #31
 8007536:	d50f      	bpl.n	8007558 <_printf_float+0x240>
 8007538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f af45 	beq.w	80073d2 <_printf_float+0xba>
 8007548:	f04f 0800 	mov.w	r8, #0
 800754c:	f104 091a 	add.w	r9, r4, #26
 8007550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007552:	3b01      	subs	r3, #1
 8007554:	4543      	cmp	r3, r8
 8007556:	dc09      	bgt.n	800756c <_printf_float+0x254>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	079b      	lsls	r3, r3, #30
 800755c:	f100 8103 	bmi.w	8007766 <_printf_float+0x44e>
 8007560:	68e0      	ldr	r0, [r4, #12]
 8007562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007564:	4298      	cmp	r0, r3
 8007566:	bfb8      	it	lt
 8007568:	4618      	movlt	r0, r3
 800756a:	e734      	b.n	80073d6 <_printf_float+0xbe>
 800756c:	2301      	movs	r3, #1
 800756e:	464a      	mov	r2, r9
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af2b 	beq.w	80073d2 <_printf_float+0xba>
 800757c:	f108 0801 	add.w	r8, r8, #1
 8007580:	e7e6      	b.n	8007550 <_printf_float+0x238>
 8007582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	dc2b      	bgt.n	80075e0 <_printf_float+0x2c8>
 8007588:	2301      	movs	r3, #1
 800758a:	4a26      	ldr	r2, [pc, #152]	; (8007624 <_printf_float+0x30c>)
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af1d 	beq.w	80073d2 <_printf_float+0xba>
 8007598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759a:	b923      	cbnz	r3, 80075a6 <_printf_float+0x28e>
 800759c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759e:	b913      	cbnz	r3, 80075a6 <_printf_float+0x28e>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	07d9      	lsls	r1, r3, #31
 80075a4:	d5d8      	bpl.n	8007558 <_printf_float+0x240>
 80075a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	f43f af0e 	beq.w	80073d2 <_printf_float+0xba>
 80075b6:	f04f 0900 	mov.w	r9, #0
 80075ba:	f104 0a1a 	add.w	sl, r4, #26
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	425b      	negs	r3, r3
 80075c2:	454b      	cmp	r3, r9
 80075c4:	dc01      	bgt.n	80075ca <_printf_float+0x2b2>
 80075c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c8:	e794      	b.n	80074f4 <_printf_float+0x1dc>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4652      	mov	r2, sl
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f aefc 	beq.w	80073d2 <_printf_float+0xba>
 80075da:	f109 0901 	add.w	r9, r9, #1
 80075de:	e7ee      	b.n	80075be <_printf_float+0x2a6>
 80075e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e4:	429a      	cmp	r2, r3
 80075e6:	bfa8      	it	ge
 80075e8:	461a      	movge	r2, r3
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	4691      	mov	r9, r2
 80075ee:	dd07      	ble.n	8007600 <_printf_float+0x2e8>
 80075f0:	4613      	mov	r3, r2
 80075f2:	4631      	mov	r1, r6
 80075f4:	4642      	mov	r2, r8
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f aee9 	beq.w	80073d2 <_printf_float+0xba>
 8007600:	f104 031a 	add.w	r3, r4, #26
 8007604:	f04f 0b00 	mov.w	fp, #0
 8007608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760c:	9306      	str	r3, [sp, #24]
 800760e:	e015      	b.n	800763c <_printf_float+0x324>
 8007610:	7fefffff 	.word	0x7fefffff
 8007614:	0800ac98 	.word	0x0800ac98
 8007618:	0800ac94 	.word	0x0800ac94
 800761c:	0800aca0 	.word	0x0800aca0
 8007620:	0800ac9c 	.word	0x0800ac9c
 8007624:	0800aca4 	.word	0x0800aca4
 8007628:	2301      	movs	r3, #1
 800762a:	9a06      	ldr	r2, [sp, #24]
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f43f aecd 	beq.w	80073d2 <_printf_float+0xba>
 8007638:	f10b 0b01 	add.w	fp, fp, #1
 800763c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007640:	ebaa 0309 	sub.w	r3, sl, r9
 8007644:	455b      	cmp	r3, fp
 8007646:	dcef      	bgt.n	8007628 <_printf_float+0x310>
 8007648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764c:	429a      	cmp	r2, r3
 800764e:	44d0      	add	r8, sl
 8007650:	db15      	blt.n	800767e <_printf_float+0x366>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	07da      	lsls	r2, r3, #31
 8007656:	d412      	bmi.n	800767e <_printf_float+0x366>
 8007658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800765a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800765c:	eba3 020a 	sub.w	r2, r3, sl
 8007660:	eba3 0a01 	sub.w	sl, r3, r1
 8007664:	4592      	cmp	sl, r2
 8007666:	bfa8      	it	ge
 8007668:	4692      	movge	sl, r2
 800766a:	f1ba 0f00 	cmp.w	sl, #0
 800766e:	dc0e      	bgt.n	800768e <_printf_float+0x376>
 8007670:	f04f 0800 	mov.w	r8, #0
 8007674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007678:	f104 091a 	add.w	r9, r4, #26
 800767c:	e019      	b.n	80076b2 <_printf_float+0x39a>
 800767e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	d1e5      	bne.n	8007658 <_printf_float+0x340>
 800768c:	e6a1      	b.n	80073d2 <_printf_float+0xba>
 800768e:	4653      	mov	r3, sl
 8007690:	4642      	mov	r2, r8
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	d1e9      	bne.n	8007670 <_printf_float+0x358>
 800769c:	e699      	b.n	80073d2 <_printf_float+0xba>
 800769e:	2301      	movs	r3, #1
 80076a0:	464a      	mov	r2, r9
 80076a2:	4631      	mov	r1, r6
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	f43f ae92 	beq.w	80073d2 <_printf_float+0xba>
 80076ae:	f108 0801 	add.w	r8, r8, #1
 80076b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	eba3 030a 	sub.w	r3, r3, sl
 80076bc:	4543      	cmp	r3, r8
 80076be:	dcee      	bgt.n	800769e <_printf_float+0x386>
 80076c0:	e74a      	b.n	8007558 <_printf_float+0x240>
 80076c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c4:	2a01      	cmp	r2, #1
 80076c6:	dc01      	bgt.n	80076cc <_printf_float+0x3b4>
 80076c8:	07db      	lsls	r3, r3, #31
 80076ca:	d53a      	bpl.n	8007742 <_printf_float+0x42a>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4642      	mov	r2, r8
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f ae7b 	beq.w	80073d2 <_printf_float+0xba>
 80076dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	f108 0801 	add.w	r8, r8, #1
 80076ec:	f43f ae71 	beq.w	80073d2 <_printf_float+0xba>
 80076f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f2:	2200      	movs	r2, #0
 80076f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80076f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076fc:	2300      	movs	r3, #0
 80076fe:	f7f9 fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8007702:	b9c8      	cbnz	r0, 8007738 <_printf_float+0x420>
 8007704:	4653      	mov	r3, sl
 8007706:	4642      	mov	r2, r8
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	d10e      	bne.n	8007730 <_printf_float+0x418>
 8007712:	e65e      	b.n	80073d2 <_printf_float+0xba>
 8007714:	2301      	movs	r3, #1
 8007716:	4652      	mov	r2, sl
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f ae57 	beq.w	80073d2 <_printf_float+0xba>
 8007724:	f108 0801 	add.w	r8, r8, #1
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	3b01      	subs	r3, #1
 800772c:	4543      	cmp	r3, r8
 800772e:	dcf1      	bgt.n	8007714 <_printf_float+0x3fc>
 8007730:	464b      	mov	r3, r9
 8007732:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007736:	e6de      	b.n	80074f6 <_printf_float+0x1de>
 8007738:	f04f 0800 	mov.w	r8, #0
 800773c:	f104 0a1a 	add.w	sl, r4, #26
 8007740:	e7f2      	b.n	8007728 <_printf_float+0x410>
 8007742:	2301      	movs	r3, #1
 8007744:	e7df      	b.n	8007706 <_printf_float+0x3ee>
 8007746:	2301      	movs	r3, #1
 8007748:	464a      	mov	r2, r9
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	f43f ae3e 	beq.w	80073d2 <_printf_float+0xba>
 8007756:	f108 0801 	add.w	r8, r8, #1
 800775a:	68e3      	ldr	r3, [r4, #12]
 800775c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	4543      	cmp	r3, r8
 8007762:	dcf0      	bgt.n	8007746 <_printf_float+0x42e>
 8007764:	e6fc      	b.n	8007560 <_printf_float+0x248>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	f104 0919 	add.w	r9, r4, #25
 800776e:	e7f4      	b.n	800775a <_printf_float+0x442>
 8007770:	2900      	cmp	r1, #0
 8007772:	f43f ae8b 	beq.w	800748c <_printf_float+0x174>
 8007776:	2300      	movs	r3, #0
 8007778:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800777c:	ab09      	add	r3, sp, #36	; 0x24
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	ec49 8b10 	vmov	d0, r8, r9
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	f8cd a004 	str.w	sl, [sp, #4]
 800778a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800778e:	4628      	mov	r0, r5
 8007790:	f7ff fd2e 	bl	80071f0 <__cvt>
 8007794:	4680      	mov	r8, r0
 8007796:	e648      	b.n	800742a <_printf_float+0x112>

08007798 <_printf_common>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	4691      	mov	r9, r2
 800779e:	461f      	mov	r7, r3
 80077a0:	688a      	ldr	r2, [r1, #8]
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a8:	4293      	cmp	r3, r2
 80077aa:	bfb8      	it	lt
 80077ac:	4613      	movlt	r3, r2
 80077ae:	f8c9 3000 	str.w	r3, [r9]
 80077b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b6:	4606      	mov	r6, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	b112      	cbz	r2, 80077c2 <_printf_common+0x2a>
 80077bc:	3301      	adds	r3, #1
 80077be:	f8c9 3000 	str.w	r3, [r9]
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	0699      	lsls	r1, r3, #26
 80077c6:	bf42      	ittt	mi
 80077c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077cc:	3302      	addmi	r3, #2
 80077ce:	f8c9 3000 	strmi.w	r3, [r9]
 80077d2:	6825      	ldr	r5, [r4, #0]
 80077d4:	f015 0506 	ands.w	r5, r5, #6
 80077d8:	d107      	bne.n	80077ea <_printf_common+0x52>
 80077da:	f104 0a19 	add.w	sl, r4, #25
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	f8d9 2000 	ldr.w	r2, [r9]
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	42ab      	cmp	r3, r5
 80077e8:	dc28      	bgt.n	800783c <_printf_common+0xa4>
 80077ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	3300      	adds	r3, #0
 80077f2:	bf18      	it	ne
 80077f4:	2301      	movne	r3, #1
 80077f6:	0692      	lsls	r2, r2, #26
 80077f8:	d42d      	bmi.n	8007856 <_printf_common+0xbe>
 80077fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077fe:	4639      	mov	r1, r7
 8007800:	4630      	mov	r0, r6
 8007802:	47c0      	blx	r8
 8007804:	3001      	adds	r0, #1
 8007806:	d020      	beq.n	800784a <_printf_common+0xb2>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	68e5      	ldr	r5, [r4, #12]
 800780c:	f8d9 2000 	ldr.w	r2, [r9]
 8007810:	f003 0306 	and.w	r3, r3, #6
 8007814:	2b04      	cmp	r3, #4
 8007816:	bf08      	it	eq
 8007818:	1aad      	subeq	r5, r5, r2
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	bf0c      	ite	eq
 8007820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007824:	2500      	movne	r5, #0
 8007826:	4293      	cmp	r3, r2
 8007828:	bfc4      	itt	gt
 800782a:	1a9b      	subgt	r3, r3, r2
 800782c:	18ed      	addgt	r5, r5, r3
 800782e:	f04f 0900 	mov.w	r9, #0
 8007832:	341a      	adds	r4, #26
 8007834:	454d      	cmp	r5, r9
 8007836:	d11a      	bne.n	800786e <_printf_common+0xd6>
 8007838:	2000      	movs	r0, #0
 800783a:	e008      	b.n	800784e <_printf_common+0xb6>
 800783c:	2301      	movs	r3, #1
 800783e:	4652      	mov	r2, sl
 8007840:	4639      	mov	r1, r7
 8007842:	4630      	mov	r0, r6
 8007844:	47c0      	blx	r8
 8007846:	3001      	adds	r0, #1
 8007848:	d103      	bne.n	8007852 <_printf_common+0xba>
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	3501      	adds	r5, #1
 8007854:	e7c3      	b.n	80077de <_printf_common+0x46>
 8007856:	18e1      	adds	r1, r4, r3
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	2030      	movs	r0, #48	; 0x30
 800785c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007860:	4422      	add	r2, r4
 8007862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800786a:	3302      	adds	r3, #2
 800786c:	e7c5      	b.n	80077fa <_printf_common+0x62>
 800786e:	2301      	movs	r3, #1
 8007870:	4622      	mov	r2, r4
 8007872:	4639      	mov	r1, r7
 8007874:	4630      	mov	r0, r6
 8007876:	47c0      	blx	r8
 8007878:	3001      	adds	r0, #1
 800787a:	d0e6      	beq.n	800784a <_printf_common+0xb2>
 800787c:	f109 0901 	add.w	r9, r9, #1
 8007880:	e7d8      	b.n	8007834 <_printf_common+0x9c>
	...

08007884 <_printf_i>:
 8007884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007888:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800788c:	460c      	mov	r4, r1
 800788e:	7e09      	ldrb	r1, [r1, #24]
 8007890:	b085      	sub	sp, #20
 8007892:	296e      	cmp	r1, #110	; 0x6e
 8007894:	4617      	mov	r7, r2
 8007896:	4606      	mov	r6, r0
 8007898:	4698      	mov	r8, r3
 800789a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800789c:	f000 80b3 	beq.w	8007a06 <_printf_i+0x182>
 80078a0:	d822      	bhi.n	80078e8 <_printf_i+0x64>
 80078a2:	2963      	cmp	r1, #99	; 0x63
 80078a4:	d036      	beq.n	8007914 <_printf_i+0x90>
 80078a6:	d80a      	bhi.n	80078be <_printf_i+0x3a>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	f000 80b9 	beq.w	8007a20 <_printf_i+0x19c>
 80078ae:	2958      	cmp	r1, #88	; 0x58
 80078b0:	f000 8083 	beq.w	80079ba <_printf_i+0x136>
 80078b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80078bc:	e032      	b.n	8007924 <_printf_i+0xa0>
 80078be:	2964      	cmp	r1, #100	; 0x64
 80078c0:	d001      	beq.n	80078c6 <_printf_i+0x42>
 80078c2:	2969      	cmp	r1, #105	; 0x69
 80078c4:	d1f6      	bne.n	80078b4 <_printf_i+0x30>
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	6813      	ldr	r3, [r2, #0]
 80078ca:	0605      	lsls	r5, r0, #24
 80078cc:	f103 0104 	add.w	r1, r3, #4
 80078d0:	d52a      	bpl.n	8007928 <_printf_i+0xa4>
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6011      	str	r1, [r2, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	da03      	bge.n	80078e2 <_printf_i+0x5e>
 80078da:	222d      	movs	r2, #45	; 0x2d
 80078dc:	425b      	negs	r3, r3
 80078de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078e2:	486f      	ldr	r0, [pc, #444]	; (8007aa0 <_printf_i+0x21c>)
 80078e4:	220a      	movs	r2, #10
 80078e6:	e039      	b.n	800795c <_printf_i+0xd8>
 80078e8:	2973      	cmp	r1, #115	; 0x73
 80078ea:	f000 809d 	beq.w	8007a28 <_printf_i+0x1a4>
 80078ee:	d808      	bhi.n	8007902 <_printf_i+0x7e>
 80078f0:	296f      	cmp	r1, #111	; 0x6f
 80078f2:	d020      	beq.n	8007936 <_printf_i+0xb2>
 80078f4:	2970      	cmp	r1, #112	; 0x70
 80078f6:	d1dd      	bne.n	80078b4 <_printf_i+0x30>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	f043 0320 	orr.w	r3, r3, #32
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	e003      	b.n	800790a <_printf_i+0x86>
 8007902:	2975      	cmp	r1, #117	; 0x75
 8007904:	d017      	beq.n	8007936 <_printf_i+0xb2>
 8007906:	2978      	cmp	r1, #120	; 0x78
 8007908:	d1d4      	bne.n	80078b4 <_printf_i+0x30>
 800790a:	2378      	movs	r3, #120	; 0x78
 800790c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007910:	4864      	ldr	r0, [pc, #400]	; (8007aa4 <_printf_i+0x220>)
 8007912:	e055      	b.n	80079c0 <_printf_i+0x13c>
 8007914:	6813      	ldr	r3, [r2, #0]
 8007916:	1d19      	adds	r1, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6011      	str	r1, [r2, #0]
 800791c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007924:	2301      	movs	r3, #1
 8007926:	e08c      	b.n	8007a42 <_printf_i+0x1be>
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6011      	str	r1, [r2, #0]
 800792c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007930:	bf18      	it	ne
 8007932:	b21b      	sxthne	r3, r3
 8007934:	e7cf      	b.n	80078d6 <_printf_i+0x52>
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	6825      	ldr	r5, [r4, #0]
 800793a:	1d18      	adds	r0, r3, #4
 800793c:	6010      	str	r0, [r2, #0]
 800793e:	0628      	lsls	r0, r5, #24
 8007940:	d501      	bpl.n	8007946 <_printf_i+0xc2>
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	e002      	b.n	800794c <_printf_i+0xc8>
 8007946:	0668      	lsls	r0, r5, #25
 8007948:	d5fb      	bpl.n	8007942 <_printf_i+0xbe>
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	4854      	ldr	r0, [pc, #336]	; (8007aa0 <_printf_i+0x21c>)
 800794e:	296f      	cmp	r1, #111	; 0x6f
 8007950:	bf14      	ite	ne
 8007952:	220a      	movne	r2, #10
 8007954:	2208      	moveq	r2, #8
 8007956:	2100      	movs	r1, #0
 8007958:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800795c:	6865      	ldr	r5, [r4, #4]
 800795e:	60a5      	str	r5, [r4, #8]
 8007960:	2d00      	cmp	r5, #0
 8007962:	f2c0 8095 	blt.w	8007a90 <_printf_i+0x20c>
 8007966:	6821      	ldr	r1, [r4, #0]
 8007968:	f021 0104 	bic.w	r1, r1, #4
 800796c:	6021      	str	r1, [r4, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d13d      	bne.n	80079ee <_printf_i+0x16a>
 8007972:	2d00      	cmp	r5, #0
 8007974:	f040 808e 	bne.w	8007a94 <_printf_i+0x210>
 8007978:	4665      	mov	r5, ip
 800797a:	2a08      	cmp	r2, #8
 800797c:	d10b      	bne.n	8007996 <_printf_i+0x112>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	07db      	lsls	r3, r3, #31
 8007982:	d508      	bpl.n	8007996 <_printf_i+0x112>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	6862      	ldr	r2, [r4, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	bfde      	ittt	le
 800798c:	2330      	movle	r3, #48	; 0x30
 800798e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007992:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007996:	ebac 0305 	sub.w	r3, ip, r5
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	f8cd 8000 	str.w	r8, [sp]
 80079a0:	463b      	mov	r3, r7
 80079a2:	aa03      	add	r2, sp, #12
 80079a4:	4621      	mov	r1, r4
 80079a6:	4630      	mov	r0, r6
 80079a8:	f7ff fef6 	bl	8007798 <_printf_common>
 80079ac:	3001      	adds	r0, #1
 80079ae:	d14d      	bne.n	8007a4c <_printf_i+0x1c8>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	b005      	add	sp, #20
 80079b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ba:	4839      	ldr	r0, [pc, #228]	; (8007aa0 <_printf_i+0x21c>)
 80079bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80079c0:	6813      	ldr	r3, [r2, #0]
 80079c2:	6821      	ldr	r1, [r4, #0]
 80079c4:	1d1d      	adds	r5, r3, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6015      	str	r5, [r2, #0]
 80079ca:	060a      	lsls	r2, r1, #24
 80079cc:	d50b      	bpl.n	80079e6 <_printf_i+0x162>
 80079ce:	07ca      	lsls	r2, r1, #31
 80079d0:	bf44      	itt	mi
 80079d2:	f041 0120 	orrmi.w	r1, r1, #32
 80079d6:	6021      	strmi	r1, [r4, #0]
 80079d8:	b91b      	cbnz	r3, 80079e2 <_printf_i+0x15e>
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	f022 0220 	bic.w	r2, r2, #32
 80079e0:	6022      	str	r2, [r4, #0]
 80079e2:	2210      	movs	r2, #16
 80079e4:	e7b7      	b.n	8007956 <_printf_i+0xd2>
 80079e6:	064d      	lsls	r5, r1, #25
 80079e8:	bf48      	it	mi
 80079ea:	b29b      	uxthmi	r3, r3
 80079ec:	e7ef      	b.n	80079ce <_printf_i+0x14a>
 80079ee:	4665      	mov	r5, ip
 80079f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80079f4:	fb02 3311 	mls	r3, r2, r1, r3
 80079f8:	5cc3      	ldrb	r3, [r0, r3]
 80079fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079fe:	460b      	mov	r3, r1
 8007a00:	2900      	cmp	r1, #0
 8007a02:	d1f5      	bne.n	80079f0 <_printf_i+0x16c>
 8007a04:	e7b9      	b.n	800797a <_printf_i+0xf6>
 8007a06:	6813      	ldr	r3, [r2, #0]
 8007a08:	6825      	ldr	r5, [r4, #0]
 8007a0a:	6961      	ldr	r1, [r4, #20]
 8007a0c:	1d18      	adds	r0, r3, #4
 8007a0e:	6010      	str	r0, [r2, #0]
 8007a10:	0628      	lsls	r0, r5, #24
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	d501      	bpl.n	8007a1a <_printf_i+0x196>
 8007a16:	6019      	str	r1, [r3, #0]
 8007a18:	e002      	b.n	8007a20 <_printf_i+0x19c>
 8007a1a:	066a      	lsls	r2, r5, #25
 8007a1c:	d5fb      	bpl.n	8007a16 <_printf_i+0x192>
 8007a1e:	8019      	strh	r1, [r3, #0]
 8007a20:	2300      	movs	r3, #0
 8007a22:	6123      	str	r3, [r4, #16]
 8007a24:	4665      	mov	r5, ip
 8007a26:	e7b9      	b.n	800799c <_printf_i+0x118>
 8007a28:	6813      	ldr	r3, [r2, #0]
 8007a2a:	1d19      	adds	r1, r3, #4
 8007a2c:	6011      	str	r1, [r2, #0]
 8007a2e:	681d      	ldr	r5, [r3, #0]
 8007a30:	6862      	ldr	r2, [r4, #4]
 8007a32:	2100      	movs	r1, #0
 8007a34:	4628      	mov	r0, r5
 8007a36:	f7f8 fbf3 	bl	8000220 <memchr>
 8007a3a:	b108      	cbz	r0, 8007a40 <_printf_i+0x1bc>
 8007a3c:	1b40      	subs	r0, r0, r5
 8007a3e:	6060      	str	r0, [r4, #4]
 8007a40:	6863      	ldr	r3, [r4, #4]
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	2300      	movs	r3, #0
 8007a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a4a:	e7a7      	b.n	800799c <_printf_i+0x118>
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	462a      	mov	r2, r5
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	47c0      	blx	r8
 8007a56:	3001      	adds	r0, #1
 8007a58:	d0aa      	beq.n	80079b0 <_printf_i+0x12c>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	079b      	lsls	r3, r3, #30
 8007a5e:	d413      	bmi.n	8007a88 <_printf_i+0x204>
 8007a60:	68e0      	ldr	r0, [r4, #12]
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	4298      	cmp	r0, r3
 8007a66:	bfb8      	it	lt
 8007a68:	4618      	movlt	r0, r3
 8007a6a:	e7a3      	b.n	80079b4 <_printf_i+0x130>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	464a      	mov	r2, r9
 8007a70:	4639      	mov	r1, r7
 8007a72:	4630      	mov	r0, r6
 8007a74:	47c0      	blx	r8
 8007a76:	3001      	adds	r0, #1
 8007a78:	d09a      	beq.n	80079b0 <_printf_i+0x12c>
 8007a7a:	3501      	adds	r5, #1
 8007a7c:	68e3      	ldr	r3, [r4, #12]
 8007a7e:	9a03      	ldr	r2, [sp, #12]
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	42ab      	cmp	r3, r5
 8007a84:	dcf2      	bgt.n	8007a6c <_printf_i+0x1e8>
 8007a86:	e7eb      	b.n	8007a60 <_printf_i+0x1dc>
 8007a88:	2500      	movs	r5, #0
 8007a8a:	f104 0919 	add.w	r9, r4, #25
 8007a8e:	e7f5      	b.n	8007a7c <_printf_i+0x1f8>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1ac      	bne.n	80079ee <_printf_i+0x16a>
 8007a94:	7803      	ldrb	r3, [r0, #0]
 8007a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a9e:	e76c      	b.n	800797a <_printf_i+0xf6>
 8007aa0:	0800aca6 	.word	0x0800aca6
 8007aa4:	0800acb7 	.word	0x0800acb7

08007aa8 <_scanf_float>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	469a      	mov	sl, r3
 8007aae:	688b      	ldr	r3, [r1, #8]
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	1e5a      	subs	r2, r3, #1
 8007ab4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ab8:	b087      	sub	sp, #28
 8007aba:	bf83      	ittte	hi
 8007abc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007ac0:	189b      	addhi	r3, r3, r2
 8007ac2:	9301      	strhi	r3, [sp, #4]
 8007ac4:	2300      	movls	r3, #0
 8007ac6:	bf86      	itte	hi
 8007ac8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007acc:	608b      	strhi	r3, [r1, #8]
 8007ace:	9301      	strls	r3, [sp, #4]
 8007ad0:	680b      	ldr	r3, [r1, #0]
 8007ad2:	4688      	mov	r8, r1
 8007ad4:	f04f 0b00 	mov.w	fp, #0
 8007ad8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007adc:	f848 3b1c 	str.w	r3, [r8], #28
 8007ae0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	4645      	mov	r5, r8
 8007aea:	465a      	mov	r2, fp
 8007aec:	46d9      	mov	r9, fp
 8007aee:	f8cd b008 	str.w	fp, [sp, #8]
 8007af2:	68a1      	ldr	r1, [r4, #8]
 8007af4:	b181      	cbz	r1, 8007b18 <_scanf_float+0x70>
 8007af6:	6833      	ldr	r3, [r6, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b49      	cmp	r3, #73	; 0x49
 8007afc:	d071      	beq.n	8007be2 <_scanf_float+0x13a>
 8007afe:	d84d      	bhi.n	8007b9c <_scanf_float+0xf4>
 8007b00:	2b39      	cmp	r3, #57	; 0x39
 8007b02:	d840      	bhi.n	8007b86 <_scanf_float+0xde>
 8007b04:	2b31      	cmp	r3, #49	; 0x31
 8007b06:	f080 8088 	bcs.w	8007c1a <_scanf_float+0x172>
 8007b0a:	2b2d      	cmp	r3, #45	; 0x2d
 8007b0c:	f000 8090 	beq.w	8007c30 <_scanf_float+0x188>
 8007b10:	d815      	bhi.n	8007b3e <_scanf_float+0x96>
 8007b12:	2b2b      	cmp	r3, #43	; 0x2b
 8007b14:	f000 808c 	beq.w	8007c30 <_scanf_float+0x188>
 8007b18:	f1b9 0f00 	cmp.w	r9, #0
 8007b1c:	d003      	beq.n	8007b26 <_scanf_float+0x7e>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	3a01      	subs	r2, #1
 8007b28:	2a01      	cmp	r2, #1
 8007b2a:	f200 80ea 	bhi.w	8007d02 <_scanf_float+0x25a>
 8007b2e:	4545      	cmp	r5, r8
 8007b30:	f200 80dc 	bhi.w	8007cec <_scanf_float+0x244>
 8007b34:	2601      	movs	r6, #1
 8007b36:	4630      	mov	r0, r6
 8007b38:	b007      	add	sp, #28
 8007b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b40:	f000 809f 	beq.w	8007c82 <_scanf_float+0x1da>
 8007b44:	2b30      	cmp	r3, #48	; 0x30
 8007b46:	d1e7      	bne.n	8007b18 <_scanf_float+0x70>
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007b4e:	d064      	beq.n	8007c1a <_scanf_float+0x172>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007b56:	6020      	str	r0, [r4, #0]
 8007b58:	f109 0901 	add.w	r9, r9, #1
 8007b5c:	b11b      	cbz	r3, 8007b66 <_scanf_float+0xbe>
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	3101      	adds	r1, #1
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	60a1      	str	r1, [r4, #8]
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	60a3      	str	r3, [r4, #8]
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	6873      	ldr	r3, [r6, #4]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	6073      	str	r3, [r6, #4]
 8007b7a:	f340 80ac 	ble.w	8007cd6 <_scanf_float+0x22e>
 8007b7e:	6833      	ldr	r3, [r6, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	6033      	str	r3, [r6, #0]
 8007b84:	e7b5      	b.n	8007af2 <_scanf_float+0x4a>
 8007b86:	2b45      	cmp	r3, #69	; 0x45
 8007b88:	f000 8085 	beq.w	8007c96 <_scanf_float+0x1ee>
 8007b8c:	2b46      	cmp	r3, #70	; 0x46
 8007b8e:	d06a      	beq.n	8007c66 <_scanf_float+0x1be>
 8007b90:	2b41      	cmp	r3, #65	; 0x41
 8007b92:	d1c1      	bne.n	8007b18 <_scanf_float+0x70>
 8007b94:	2a01      	cmp	r2, #1
 8007b96:	d1bf      	bne.n	8007b18 <_scanf_float+0x70>
 8007b98:	2202      	movs	r2, #2
 8007b9a:	e046      	b.n	8007c2a <_scanf_float+0x182>
 8007b9c:	2b65      	cmp	r3, #101	; 0x65
 8007b9e:	d07a      	beq.n	8007c96 <_scanf_float+0x1ee>
 8007ba0:	d818      	bhi.n	8007bd4 <_scanf_float+0x12c>
 8007ba2:	2b54      	cmp	r3, #84	; 0x54
 8007ba4:	d066      	beq.n	8007c74 <_scanf_float+0x1cc>
 8007ba6:	d811      	bhi.n	8007bcc <_scanf_float+0x124>
 8007ba8:	2b4e      	cmp	r3, #78	; 0x4e
 8007baa:	d1b5      	bne.n	8007b18 <_scanf_float+0x70>
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	d146      	bne.n	8007c3e <_scanf_float+0x196>
 8007bb0:	f1b9 0f00 	cmp.w	r9, #0
 8007bb4:	d145      	bne.n	8007c42 <_scanf_float+0x19a>
 8007bb6:	6821      	ldr	r1, [r4, #0]
 8007bb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007bbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007bc0:	d13f      	bne.n	8007c42 <_scanf_float+0x19a>
 8007bc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007bc6:	6021      	str	r1, [r4, #0]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	e02e      	b.n	8007c2a <_scanf_float+0x182>
 8007bcc:	2b59      	cmp	r3, #89	; 0x59
 8007bce:	d01e      	beq.n	8007c0e <_scanf_float+0x166>
 8007bd0:	2b61      	cmp	r3, #97	; 0x61
 8007bd2:	e7de      	b.n	8007b92 <_scanf_float+0xea>
 8007bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8007bd6:	d0e9      	beq.n	8007bac <_scanf_float+0x104>
 8007bd8:	d815      	bhi.n	8007c06 <_scanf_float+0x15e>
 8007bda:	2b66      	cmp	r3, #102	; 0x66
 8007bdc:	d043      	beq.n	8007c66 <_scanf_float+0x1be>
 8007bde:	2b69      	cmp	r3, #105	; 0x69
 8007be0:	d19a      	bne.n	8007b18 <_scanf_float+0x70>
 8007be2:	f1bb 0f00 	cmp.w	fp, #0
 8007be6:	d138      	bne.n	8007c5a <_scanf_float+0x1b2>
 8007be8:	f1b9 0f00 	cmp.w	r9, #0
 8007bec:	d197      	bne.n	8007b1e <_scanf_float+0x76>
 8007bee:	6821      	ldr	r1, [r4, #0]
 8007bf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007bf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007bf8:	d195      	bne.n	8007b26 <_scanf_float+0x7e>
 8007bfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007bfe:	6021      	str	r1, [r4, #0]
 8007c00:	f04f 0b01 	mov.w	fp, #1
 8007c04:	e011      	b.n	8007c2a <_scanf_float+0x182>
 8007c06:	2b74      	cmp	r3, #116	; 0x74
 8007c08:	d034      	beq.n	8007c74 <_scanf_float+0x1cc>
 8007c0a:	2b79      	cmp	r3, #121	; 0x79
 8007c0c:	d184      	bne.n	8007b18 <_scanf_float+0x70>
 8007c0e:	f1bb 0f07 	cmp.w	fp, #7
 8007c12:	d181      	bne.n	8007b18 <_scanf_float+0x70>
 8007c14:	f04f 0b08 	mov.w	fp, #8
 8007c18:	e007      	b.n	8007c2a <_scanf_float+0x182>
 8007c1a:	eb12 0f0b 	cmn.w	r2, fp
 8007c1e:	f47f af7b 	bne.w	8007b18 <_scanf_float+0x70>
 8007c22:	6821      	ldr	r1, [r4, #0]
 8007c24:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007c28:	6021      	str	r1, [r4, #0]
 8007c2a:	702b      	strb	r3, [r5, #0]
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	e79a      	b.n	8007b66 <_scanf_float+0xbe>
 8007c30:	6821      	ldr	r1, [r4, #0]
 8007c32:	0608      	lsls	r0, r1, #24
 8007c34:	f57f af70 	bpl.w	8007b18 <_scanf_float+0x70>
 8007c38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c3c:	e7f4      	b.n	8007c28 <_scanf_float+0x180>
 8007c3e:	2a02      	cmp	r2, #2
 8007c40:	d047      	beq.n	8007cd2 <_scanf_float+0x22a>
 8007c42:	f1bb 0f01 	cmp.w	fp, #1
 8007c46:	d003      	beq.n	8007c50 <_scanf_float+0x1a8>
 8007c48:	f1bb 0f04 	cmp.w	fp, #4
 8007c4c:	f47f af64 	bne.w	8007b18 <_scanf_float+0x70>
 8007c50:	f10b 0b01 	add.w	fp, fp, #1
 8007c54:	fa5f fb8b 	uxtb.w	fp, fp
 8007c58:	e7e7      	b.n	8007c2a <_scanf_float+0x182>
 8007c5a:	f1bb 0f03 	cmp.w	fp, #3
 8007c5e:	d0f7      	beq.n	8007c50 <_scanf_float+0x1a8>
 8007c60:	f1bb 0f05 	cmp.w	fp, #5
 8007c64:	e7f2      	b.n	8007c4c <_scanf_float+0x1a4>
 8007c66:	f1bb 0f02 	cmp.w	fp, #2
 8007c6a:	f47f af55 	bne.w	8007b18 <_scanf_float+0x70>
 8007c6e:	f04f 0b03 	mov.w	fp, #3
 8007c72:	e7da      	b.n	8007c2a <_scanf_float+0x182>
 8007c74:	f1bb 0f06 	cmp.w	fp, #6
 8007c78:	f47f af4e 	bne.w	8007b18 <_scanf_float+0x70>
 8007c7c:	f04f 0b07 	mov.w	fp, #7
 8007c80:	e7d3      	b.n	8007c2a <_scanf_float+0x182>
 8007c82:	6821      	ldr	r1, [r4, #0]
 8007c84:	0588      	lsls	r0, r1, #22
 8007c86:	f57f af47 	bpl.w	8007b18 <_scanf_float+0x70>
 8007c8a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007c8e:	6021      	str	r1, [r4, #0]
 8007c90:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c94:	e7c9      	b.n	8007c2a <_scanf_float+0x182>
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007c9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007ca0:	d006      	beq.n	8007cb0 <_scanf_float+0x208>
 8007ca2:	0548      	lsls	r0, r1, #21
 8007ca4:	f57f af38 	bpl.w	8007b18 <_scanf_float+0x70>
 8007ca8:	f1b9 0f00 	cmp.w	r9, #0
 8007cac:	f43f af3b 	beq.w	8007b26 <_scanf_float+0x7e>
 8007cb0:	0588      	lsls	r0, r1, #22
 8007cb2:	bf58      	it	pl
 8007cb4:	9802      	ldrpl	r0, [sp, #8]
 8007cb6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007cba:	bf58      	it	pl
 8007cbc:	eba9 0000 	subpl.w	r0, r9, r0
 8007cc0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007cc4:	bf58      	it	pl
 8007cc6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007cca:	6021      	str	r1, [r4, #0]
 8007ccc:	f04f 0900 	mov.w	r9, #0
 8007cd0:	e7ab      	b.n	8007c2a <_scanf_float+0x182>
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	e7a9      	b.n	8007c2a <_scanf_float+0x182>
 8007cd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007cda:	9205      	str	r2, [sp, #20]
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4638      	mov	r0, r7
 8007ce0:	4798      	blx	r3
 8007ce2:	9a05      	ldr	r2, [sp, #20]
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f43f af04 	beq.w	8007af2 <_scanf_float+0x4a>
 8007cea:	e715      	b.n	8007b18 <_scanf_float+0x70>
 8007cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	4798      	blx	r3
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	e715      	b.n	8007b2e <_scanf_float+0x86>
 8007d02:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007d06:	2b06      	cmp	r3, #6
 8007d08:	d80a      	bhi.n	8007d20 <_scanf_float+0x278>
 8007d0a:	f1bb 0f02 	cmp.w	fp, #2
 8007d0e:	d968      	bls.n	8007de2 <_scanf_float+0x33a>
 8007d10:	f1ab 0b03 	sub.w	fp, fp, #3
 8007d14:	fa5f fb8b 	uxtb.w	fp, fp
 8007d18:	eba5 0b0b 	sub.w	fp, r5, fp
 8007d1c:	455d      	cmp	r5, fp
 8007d1e:	d14b      	bne.n	8007db8 <_scanf_float+0x310>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	05da      	lsls	r2, r3, #23
 8007d24:	d51f      	bpl.n	8007d66 <_scanf_float+0x2be>
 8007d26:	055b      	lsls	r3, r3, #21
 8007d28:	d468      	bmi.n	8007dfc <_scanf_float+0x354>
 8007d2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	2965      	cmp	r1, #101	; 0x65
 8007d32:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d36:	f105 3bff 	add.w	fp, r5, #4294967295
 8007d3a:	6123      	str	r3, [r4, #16]
 8007d3c:	d00d      	beq.n	8007d5a <_scanf_float+0x2b2>
 8007d3e:	2945      	cmp	r1, #69	; 0x45
 8007d40:	d00b      	beq.n	8007d5a <_scanf_float+0x2b2>
 8007d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d46:	4632      	mov	r2, r6
 8007d48:	4638      	mov	r0, r7
 8007d4a:	4798      	blx	r3
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	f1a5 0b02 	sub.w	fp, r5, #2
 8007d58:	6123      	str	r3, [r4, #16]
 8007d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d5e:	4632      	mov	r2, r6
 8007d60:	4638      	mov	r0, r7
 8007d62:	4798      	blx	r3
 8007d64:	465d      	mov	r5, fp
 8007d66:	6826      	ldr	r6, [r4, #0]
 8007d68:	f016 0610 	ands.w	r6, r6, #16
 8007d6c:	d17a      	bne.n	8007e64 <_scanf_float+0x3bc>
 8007d6e:	702e      	strb	r6, [r5, #0]
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7a:	d142      	bne.n	8007e02 <_scanf_float+0x35a>
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	eba9 0303 	sub.w	r3, r9, r3
 8007d82:	425a      	negs	r2, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d149      	bne.n	8007e1c <_scanf_float+0x374>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4641      	mov	r1, r8
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f000 fea3 	bl	8008ad8 <_strtod_r>
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	f8da 3000 	ldr.w	r3, [sl]
 8007d98:	f015 0f02 	tst.w	r5, #2
 8007d9c:	f103 0204 	add.w	r2, r3, #4
 8007da0:	ec59 8b10 	vmov	r8, r9, d0
 8007da4:	f8ca 2000 	str.w	r2, [sl]
 8007da8:	d043      	beq.n	8007e32 <_scanf_float+0x38a>
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	e9c3 8900 	strd	r8, r9, [r3]
 8007db0:	68e3      	ldr	r3, [r4, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60e3      	str	r3, [r4, #12]
 8007db6:	e6be      	b.n	8007b36 <_scanf_float+0x8e>
 8007db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dbc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	4798      	blx	r3
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	e7a6      	b.n	8007d1c <_scanf_float+0x274>
 8007dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dd2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	4638      	mov	r0, r7
 8007dda:	4798      	blx	r3
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	4545      	cmp	r5, r8
 8007de4:	d8f3      	bhi.n	8007dce <_scanf_float+0x326>
 8007de6:	e6a5      	b.n	8007b34 <_scanf_float+0x8c>
 8007de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007df0:	4632      	mov	r2, r6
 8007df2:	4638      	mov	r0, r7
 8007df4:	4798      	blx	r3
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	4545      	cmp	r5, r8
 8007dfe:	d8f3      	bhi.n	8007de8 <_scanf_float+0x340>
 8007e00:	e698      	b.n	8007b34 <_scanf_float+0x8c>
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0bf      	beq.n	8007d88 <_scanf_float+0x2e0>
 8007e08:	9904      	ldr	r1, [sp, #16]
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	3101      	adds	r1, #1
 8007e10:	4638      	mov	r0, r7
 8007e12:	f000 feed 	bl	8008bf0 <_strtol_r>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	9d04      	ldr	r5, [sp, #16]
 8007e1a:	1ac2      	subs	r2, r0, r3
 8007e1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e20:	429d      	cmp	r5, r3
 8007e22:	bf28      	it	cs
 8007e24:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007e28:	490f      	ldr	r1, [pc, #60]	; (8007e68 <_scanf_float+0x3c0>)
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f000 f824 	bl	8007e78 <siprintf>
 8007e30:	e7aa      	b.n	8007d88 <_scanf_float+0x2e0>
 8007e32:	f015 0504 	ands.w	r5, r5, #4
 8007e36:	d1b8      	bne.n	8007daa <_scanf_float+0x302>
 8007e38:	681f      	ldr	r7, [r3, #0]
 8007e3a:	ee10 2a10 	vmov	r2, s0
 8007e3e:	464b      	mov	r3, r9
 8007e40:	ee10 0a10 	vmov	r0, s0
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 fe91 	bl	8000b6c <__aeabi_dcmpun>
 8007e4a:	b128      	cbz	r0, 8007e58 <_scanf_float+0x3b0>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 f80d 	bl	8007e6c <nanf>
 8007e52:	ed87 0a00 	vstr	s0, [r7]
 8007e56:	e7ab      	b.n	8007db0 <_scanf_float+0x308>
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 fee4 	bl	8000c28 <__aeabi_d2f>
 8007e60:	6038      	str	r0, [r7, #0]
 8007e62:	e7a5      	b.n	8007db0 <_scanf_float+0x308>
 8007e64:	2600      	movs	r6, #0
 8007e66:	e666      	b.n	8007b36 <_scanf_float+0x8e>
 8007e68:	0800acc8 	.word	0x0800acc8

08007e6c <nanf>:
 8007e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e74 <nanf+0x8>
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	7fc00000 	.word	0x7fc00000

08007e78 <siprintf>:
 8007e78:	b40e      	push	{r1, r2, r3}
 8007e7a:	b500      	push	{lr}
 8007e7c:	b09c      	sub	sp, #112	; 0x70
 8007e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e80:	9002      	str	r0, [sp, #8]
 8007e82:	9006      	str	r0, [sp, #24]
 8007e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e88:	4809      	ldr	r0, [pc, #36]	; (8007eb0 <siprintf+0x38>)
 8007e8a:	9107      	str	r1, [sp, #28]
 8007e8c:	9104      	str	r1, [sp, #16]
 8007e8e:	4909      	ldr	r1, [pc, #36]	; (8007eb4 <siprintf+0x3c>)
 8007e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e94:	9105      	str	r1, [sp, #20]
 8007e96:	6800      	ldr	r0, [r0, #0]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	a902      	add	r1, sp, #8
 8007e9c:	f002 fd6e 	bl	800a97c <_svfiprintf_r>
 8007ea0:	9b02      	ldr	r3, [sp, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	b01c      	add	sp, #112	; 0x70
 8007ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eac:	b003      	add	sp, #12
 8007eae:	4770      	bx	lr
 8007eb0:	2000004c 	.word	0x2000004c
 8007eb4:	ffff0208 	.word	0xffff0208

08007eb8 <sulp>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4604      	mov	r4, r0
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	ec45 4b10 	vmov	d0, r4, r5
 8007ec2:	4616      	mov	r6, r2
 8007ec4:	f002 fb16 	bl	800a4f4 <__ulp>
 8007ec8:	ec51 0b10 	vmov	r0, r1, d0
 8007ecc:	b17e      	cbz	r6, 8007eee <sulp+0x36>
 8007ece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd09      	ble.n	8007eee <sulp+0x36>
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ee0:	2400      	movs	r4, #0
 8007ee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	462b      	mov	r3, r5
 8007eea:	f7f8 fba5 	bl	8000638 <__aeabi_dmul>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}

08007ef0 <_strtod_l>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	461f      	mov	r7, r3
 8007ef6:	b0a1      	sub	sp, #132	; 0x84
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4681      	mov	r9, r0
 8007efc:	4638      	mov	r0, r7
 8007efe:	460e      	mov	r6, r1
 8007f00:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f02:	931c      	str	r3, [sp, #112]	; 0x70
 8007f04:	f001 fff5 	bl	8009ef2 <__localeconv_l>
 8007f08:	4680      	mov	r8, r0
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	f7f8 f980 	bl	8000210 <strlen>
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	4604      	mov	r4, r0
 8007f16:	f04f 0b00 	mov.w	fp, #0
 8007f1a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	2a0d      	cmp	r2, #13
 8007f22:	d832      	bhi.n	8007f8a <_strtod_l+0x9a>
 8007f24:	2a09      	cmp	r2, #9
 8007f26:	d236      	bcs.n	8007f96 <_strtod_l+0xa6>
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d03e      	beq.n	8007faa <_strtod_l+0xba>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007f32:	782b      	ldrb	r3, [r5, #0]
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	f040 80ac 	bne.w	8008092 <_strtod_l+0x1a2>
 8007f3a:	786b      	ldrb	r3, [r5, #1]
 8007f3c:	2b58      	cmp	r3, #88	; 0x58
 8007f3e:	d001      	beq.n	8007f44 <_strtod_l+0x54>
 8007f40:	2b78      	cmp	r3, #120	; 0x78
 8007f42:	d167      	bne.n	8008014 <_strtod_l+0x124>
 8007f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	ab1c      	add	r3, sp, #112	; 0x70
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	9702      	str	r7, [sp, #8]
 8007f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f50:	4a88      	ldr	r2, [pc, #544]	; (8008174 <_strtod_l+0x284>)
 8007f52:	a91b      	add	r1, sp, #108	; 0x6c
 8007f54:	4648      	mov	r0, r9
 8007f56:	f001 fcf2 	bl	800993e <__gethex>
 8007f5a:	f010 0407 	ands.w	r4, r0, #7
 8007f5e:	4606      	mov	r6, r0
 8007f60:	d005      	beq.n	8007f6e <_strtod_l+0x7e>
 8007f62:	2c06      	cmp	r4, #6
 8007f64:	d12b      	bne.n	8007fbe <_strtod_l+0xce>
 8007f66:	3501      	adds	r5, #1
 8007f68:	2300      	movs	r3, #0
 8007f6a:	951b      	str	r5, [sp, #108]	; 0x6c
 8007f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 859a 	bne.w	8008aaa <_strtod_l+0xbba>
 8007f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f78:	b1e3      	cbz	r3, 8007fb4 <_strtod_l+0xc4>
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f80:	ec43 2b10 	vmov	d0, r2, r3
 8007f84:	b021      	add	sp, #132	; 0x84
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	2a2b      	cmp	r2, #43	; 0x2b
 8007f8c:	d015      	beq.n	8007fba <_strtod_l+0xca>
 8007f8e:	2a2d      	cmp	r2, #45	; 0x2d
 8007f90:	d004      	beq.n	8007f9c <_strtod_l+0xac>
 8007f92:	2a20      	cmp	r2, #32
 8007f94:	d1ca      	bne.n	8007f2c <_strtod_l+0x3c>
 8007f96:	3301      	adds	r3, #1
 8007f98:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f9a:	e7bf      	b.n	8007f1c <_strtod_l+0x2c>
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	920d      	str	r2, [sp, #52]	; 0x34
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	921b      	str	r2, [sp, #108]	; 0x6c
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1c2      	bne.n	8007f30 <_strtod_l+0x40>
 8007faa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fac:	961b      	str	r6, [sp, #108]	; 0x6c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 8579 	bne.w	8008aa6 <_strtod_l+0xbb6>
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	465b      	mov	r3, fp
 8007fb8:	e7e2      	b.n	8007f80 <_strtod_l+0x90>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	e7ef      	b.n	8007f9e <_strtod_l+0xae>
 8007fbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007fc0:	b13a      	cbz	r2, 8007fd2 <_strtod_l+0xe2>
 8007fc2:	2135      	movs	r1, #53	; 0x35
 8007fc4:	a81e      	add	r0, sp, #120	; 0x78
 8007fc6:	f002 fb8d 	bl	800a6e4 <__copybits>
 8007fca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fcc:	4648      	mov	r0, r9
 8007fce:	f001 fffa 	bl	8009fc6 <_Bfree>
 8007fd2:	3c01      	subs	r4, #1
 8007fd4:	2c04      	cmp	r4, #4
 8007fd6:	d806      	bhi.n	8007fe6 <_strtod_l+0xf6>
 8007fd8:	e8df f004 	tbb	[pc, r4]
 8007fdc:	1714030a 	.word	0x1714030a
 8007fe0:	0a          	.byte	0x0a
 8007fe1:	00          	.byte	0x00
 8007fe2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007fe6:	0730      	lsls	r0, r6, #28
 8007fe8:	d5c1      	bpl.n	8007f6e <_strtod_l+0x7e>
 8007fea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007fee:	e7be      	b.n	8007f6e <_strtod_l+0x7e>
 8007ff0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007ff4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007ff6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ffa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ffe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008002:	e7f0      	b.n	8007fe6 <_strtod_l+0xf6>
 8008004:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008178 <_strtod_l+0x288>
 8008008:	e7ed      	b.n	8007fe6 <_strtod_l+0xf6>
 800800a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800800e:	f04f 3aff 	mov.w	sl, #4294967295
 8008012:	e7e8      	b.n	8007fe6 <_strtod_l+0xf6>
 8008014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	921b      	str	r2, [sp, #108]	; 0x6c
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d0f9      	beq.n	8008014 <_strtod_l+0x124>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0a4      	beq.n	8007f6e <_strtod_l+0x7e>
 8008024:	2301      	movs	r3, #1
 8008026:	2500      	movs	r5, #0
 8008028:	9306      	str	r3, [sp, #24]
 800802a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800802c:	9308      	str	r3, [sp, #32]
 800802e:	9507      	str	r5, [sp, #28]
 8008030:	9505      	str	r5, [sp, #20]
 8008032:	220a      	movs	r2, #10
 8008034:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008036:	7807      	ldrb	r7, [r0, #0]
 8008038:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800803c:	b2d9      	uxtb	r1, r3
 800803e:	2909      	cmp	r1, #9
 8008040:	d929      	bls.n	8008096 <_strtod_l+0x1a6>
 8008042:	4622      	mov	r2, r4
 8008044:	f8d8 1000 	ldr.w	r1, [r8]
 8008048:	f002 fda0 	bl	800ab8c <strncmp>
 800804c:	2800      	cmp	r0, #0
 800804e:	d031      	beq.n	80080b4 <_strtod_l+0x1c4>
 8008050:	2000      	movs	r0, #0
 8008052:	9c05      	ldr	r4, [sp, #20]
 8008054:	9004      	str	r0, [sp, #16]
 8008056:	463b      	mov	r3, r7
 8008058:	4602      	mov	r2, r0
 800805a:	2b65      	cmp	r3, #101	; 0x65
 800805c:	d001      	beq.n	8008062 <_strtod_l+0x172>
 800805e:	2b45      	cmp	r3, #69	; 0x45
 8008060:	d114      	bne.n	800808c <_strtod_l+0x19c>
 8008062:	b924      	cbnz	r4, 800806e <_strtod_l+0x17e>
 8008064:	b910      	cbnz	r0, 800806c <_strtod_l+0x17c>
 8008066:	9b06      	ldr	r3, [sp, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d09e      	beq.n	8007faa <_strtod_l+0xba>
 800806c:	2400      	movs	r4, #0
 800806e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008070:	1c73      	adds	r3, r6, #1
 8008072:	931b      	str	r3, [sp, #108]	; 0x6c
 8008074:	7873      	ldrb	r3, [r6, #1]
 8008076:	2b2b      	cmp	r3, #43	; 0x2b
 8008078:	d078      	beq.n	800816c <_strtod_l+0x27c>
 800807a:	2b2d      	cmp	r3, #45	; 0x2d
 800807c:	d070      	beq.n	8008160 <_strtod_l+0x270>
 800807e:	f04f 0c00 	mov.w	ip, #0
 8008082:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008086:	2f09      	cmp	r7, #9
 8008088:	d97c      	bls.n	8008184 <_strtod_l+0x294>
 800808a:	961b      	str	r6, [sp, #108]	; 0x6c
 800808c:	f04f 0e00 	mov.w	lr, #0
 8008090:	e09a      	b.n	80081c8 <_strtod_l+0x2d8>
 8008092:	2300      	movs	r3, #0
 8008094:	e7c7      	b.n	8008026 <_strtod_l+0x136>
 8008096:	9905      	ldr	r1, [sp, #20]
 8008098:	2908      	cmp	r1, #8
 800809a:	bfdd      	ittte	le
 800809c:	9907      	ldrle	r1, [sp, #28]
 800809e:	fb02 3301 	mlale	r3, r2, r1, r3
 80080a2:	9307      	strle	r3, [sp, #28]
 80080a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	3001      	adds	r0, #1
 80080ac:	3301      	adds	r3, #1
 80080ae:	9305      	str	r3, [sp, #20]
 80080b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80080b2:	e7bf      	b.n	8008034 <_strtod_l+0x144>
 80080b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080b6:	191a      	adds	r2, r3, r4
 80080b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80080ba:	9a05      	ldr	r2, [sp, #20]
 80080bc:	5d1b      	ldrb	r3, [r3, r4]
 80080be:	2a00      	cmp	r2, #0
 80080c0:	d037      	beq.n	8008132 <_strtod_l+0x242>
 80080c2:	9c05      	ldr	r4, [sp, #20]
 80080c4:	4602      	mov	r2, r0
 80080c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80080ca:	2909      	cmp	r1, #9
 80080cc:	d913      	bls.n	80080f6 <_strtod_l+0x206>
 80080ce:	2101      	movs	r1, #1
 80080d0:	9104      	str	r1, [sp, #16]
 80080d2:	e7c2      	b.n	800805a <_strtod_l+0x16a>
 80080d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	3001      	adds	r0, #1
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	d0f8      	beq.n	80080d4 <_strtod_l+0x1e4>
 80080e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80080e6:	2a08      	cmp	r2, #8
 80080e8:	f200 84e4 	bhi.w	8008ab4 <_strtod_l+0xbc4>
 80080ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80080ee:	9208      	str	r2, [sp, #32]
 80080f0:	4602      	mov	r2, r0
 80080f2:	2000      	movs	r0, #0
 80080f4:	4604      	mov	r4, r0
 80080f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80080fa:	f100 0101 	add.w	r1, r0, #1
 80080fe:	d012      	beq.n	8008126 <_strtod_l+0x236>
 8008100:	440a      	add	r2, r1
 8008102:	eb00 0c04 	add.w	ip, r0, r4
 8008106:	4621      	mov	r1, r4
 8008108:	270a      	movs	r7, #10
 800810a:	458c      	cmp	ip, r1
 800810c:	d113      	bne.n	8008136 <_strtod_l+0x246>
 800810e:	1821      	adds	r1, r4, r0
 8008110:	2908      	cmp	r1, #8
 8008112:	f104 0401 	add.w	r4, r4, #1
 8008116:	4404      	add	r4, r0
 8008118:	dc19      	bgt.n	800814e <_strtod_l+0x25e>
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	210a      	movs	r1, #10
 800811e:	fb01 e303 	mla	r3, r1, r3, lr
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	2100      	movs	r1, #0
 8008126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008128:	1c58      	adds	r0, r3, #1
 800812a:	901b      	str	r0, [sp, #108]	; 0x6c
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	4608      	mov	r0, r1
 8008130:	e7c9      	b.n	80080c6 <_strtod_l+0x1d6>
 8008132:	9805      	ldr	r0, [sp, #20]
 8008134:	e7d3      	b.n	80080de <_strtod_l+0x1ee>
 8008136:	2908      	cmp	r1, #8
 8008138:	f101 0101 	add.w	r1, r1, #1
 800813c:	dc03      	bgt.n	8008146 <_strtod_l+0x256>
 800813e:	9b07      	ldr	r3, [sp, #28]
 8008140:	437b      	muls	r3, r7
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	e7e1      	b.n	800810a <_strtod_l+0x21a>
 8008146:	2910      	cmp	r1, #16
 8008148:	bfd8      	it	le
 800814a:	437d      	mulle	r5, r7
 800814c:	e7dd      	b.n	800810a <_strtod_l+0x21a>
 800814e:	2c10      	cmp	r4, #16
 8008150:	bfdc      	itt	le
 8008152:	210a      	movle	r1, #10
 8008154:	fb01 e505 	mlale	r5, r1, r5, lr
 8008158:	e7e4      	b.n	8008124 <_strtod_l+0x234>
 800815a:	2301      	movs	r3, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	e781      	b.n	8008064 <_strtod_l+0x174>
 8008160:	f04f 0c01 	mov.w	ip, #1
 8008164:	1cb3      	adds	r3, r6, #2
 8008166:	931b      	str	r3, [sp, #108]	; 0x6c
 8008168:	78b3      	ldrb	r3, [r6, #2]
 800816a:	e78a      	b.n	8008082 <_strtod_l+0x192>
 800816c:	f04f 0c00 	mov.w	ip, #0
 8008170:	e7f8      	b.n	8008164 <_strtod_l+0x274>
 8008172:	bf00      	nop
 8008174:	0800acd0 	.word	0x0800acd0
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800817e:	1c5f      	adds	r7, r3, #1
 8008180:	971b      	str	r7, [sp, #108]	; 0x6c
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	2b30      	cmp	r3, #48	; 0x30
 8008186:	d0f9      	beq.n	800817c <_strtod_l+0x28c>
 8008188:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800818c:	2f08      	cmp	r7, #8
 800818e:	f63f af7d 	bhi.w	800808c <_strtod_l+0x19c>
 8008192:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008198:	930a      	str	r3, [sp, #40]	; 0x28
 800819a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800819c:	1c5f      	adds	r7, r3, #1
 800819e:	971b      	str	r7, [sp, #108]	; 0x6c
 80081a0:	785b      	ldrb	r3, [r3, #1]
 80081a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80081a6:	f1b8 0f09 	cmp.w	r8, #9
 80081aa:	d937      	bls.n	800821c <_strtod_l+0x32c>
 80081ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081ae:	1a7f      	subs	r7, r7, r1
 80081b0:	2f08      	cmp	r7, #8
 80081b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80081b6:	dc37      	bgt.n	8008228 <_strtod_l+0x338>
 80081b8:	45be      	cmp	lr, r7
 80081ba:	bfa8      	it	ge
 80081bc:	46be      	movge	lr, r7
 80081be:	f1bc 0f00 	cmp.w	ip, #0
 80081c2:	d001      	beq.n	80081c8 <_strtod_l+0x2d8>
 80081c4:	f1ce 0e00 	rsb	lr, lr, #0
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	d151      	bne.n	8008270 <_strtod_l+0x380>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f47f aece 	bne.w	8007f6e <_strtod_l+0x7e>
 80081d2:	9a06      	ldr	r2, [sp, #24]
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	f47f aeca 	bne.w	8007f6e <_strtod_l+0x7e>
 80081da:	9a04      	ldr	r2, [sp, #16]
 80081dc:	2a00      	cmp	r2, #0
 80081de:	f47f aee4 	bne.w	8007faa <_strtod_l+0xba>
 80081e2:	2b4e      	cmp	r3, #78	; 0x4e
 80081e4:	d027      	beq.n	8008236 <_strtod_l+0x346>
 80081e6:	dc21      	bgt.n	800822c <_strtod_l+0x33c>
 80081e8:	2b49      	cmp	r3, #73	; 0x49
 80081ea:	f47f aede 	bne.w	8007faa <_strtod_l+0xba>
 80081ee:	49a0      	ldr	r1, [pc, #640]	; (8008470 <_strtod_l+0x580>)
 80081f0:	a81b      	add	r0, sp, #108	; 0x6c
 80081f2:	f001 fdd7 	bl	8009da4 <__match>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f43f aed7 	beq.w	8007faa <_strtod_l+0xba>
 80081fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081fe:	499d      	ldr	r1, [pc, #628]	; (8008474 <_strtod_l+0x584>)
 8008200:	3b01      	subs	r3, #1
 8008202:	a81b      	add	r0, sp, #108	; 0x6c
 8008204:	931b      	str	r3, [sp, #108]	; 0x6c
 8008206:	f001 fdcd 	bl	8009da4 <__match>
 800820a:	b910      	cbnz	r0, 8008212 <_strtod_l+0x322>
 800820c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800820e:	3301      	adds	r3, #1
 8008210:	931b      	str	r3, [sp, #108]	; 0x6c
 8008212:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008488 <_strtod_l+0x598>
 8008216:	f04f 0a00 	mov.w	sl, #0
 800821a:	e6a8      	b.n	8007f6e <_strtod_l+0x7e>
 800821c:	210a      	movs	r1, #10
 800821e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008222:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008226:	e7b8      	b.n	800819a <_strtod_l+0x2aa>
 8008228:	46be      	mov	lr, r7
 800822a:	e7c8      	b.n	80081be <_strtod_l+0x2ce>
 800822c:	2b69      	cmp	r3, #105	; 0x69
 800822e:	d0de      	beq.n	80081ee <_strtod_l+0x2fe>
 8008230:	2b6e      	cmp	r3, #110	; 0x6e
 8008232:	f47f aeba 	bne.w	8007faa <_strtod_l+0xba>
 8008236:	4990      	ldr	r1, [pc, #576]	; (8008478 <_strtod_l+0x588>)
 8008238:	a81b      	add	r0, sp, #108	; 0x6c
 800823a:	f001 fdb3 	bl	8009da4 <__match>
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f aeb3 	beq.w	8007faa <_strtod_l+0xba>
 8008244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b28      	cmp	r3, #40	; 0x28
 800824a:	d10e      	bne.n	800826a <_strtod_l+0x37a>
 800824c:	aa1e      	add	r2, sp, #120	; 0x78
 800824e:	498b      	ldr	r1, [pc, #556]	; (800847c <_strtod_l+0x58c>)
 8008250:	a81b      	add	r0, sp, #108	; 0x6c
 8008252:	f001 fdbb 	bl	8009dcc <__hexnan>
 8008256:	2805      	cmp	r0, #5
 8008258:	d107      	bne.n	800826a <_strtod_l+0x37a>
 800825a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800825c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008260:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008264:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008268:	e681      	b.n	8007f6e <_strtod_l+0x7e>
 800826a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008490 <_strtod_l+0x5a0>
 800826e:	e7d2      	b.n	8008216 <_strtod_l+0x326>
 8008270:	ebae 0302 	sub.w	r3, lr, r2
 8008274:	9306      	str	r3, [sp, #24]
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	9807      	ldr	r0, [sp, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bf08      	it	eq
 800827e:	4623      	moveq	r3, r4
 8008280:	2c10      	cmp	r4, #16
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	46a0      	mov	r8, r4
 8008286:	bfa8      	it	ge
 8008288:	f04f 0810 	movge.w	r8, #16
 800828c:	f7f8 f95a 	bl	8000544 <__aeabi_ui2d>
 8008290:	2c09      	cmp	r4, #9
 8008292:	4682      	mov	sl, r0
 8008294:	468b      	mov	fp, r1
 8008296:	dc13      	bgt.n	80082c0 <_strtod_l+0x3d0>
 8008298:	9b06      	ldr	r3, [sp, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f43f ae67 	beq.w	8007f6e <_strtod_l+0x7e>
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	dd7a      	ble.n	800839a <_strtod_l+0x4aa>
 80082a4:	2b16      	cmp	r3, #22
 80082a6:	dc61      	bgt.n	800836c <_strtod_l+0x47c>
 80082a8:	4a75      	ldr	r2, [pc, #468]	; (8008480 <_strtod_l+0x590>)
 80082aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80082ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80082b2:	4652      	mov	r2, sl
 80082b4:	465b      	mov	r3, fp
 80082b6:	f7f8 f9bf 	bl	8000638 <__aeabi_dmul>
 80082ba:	4682      	mov	sl, r0
 80082bc:	468b      	mov	fp, r1
 80082be:	e656      	b.n	8007f6e <_strtod_l+0x7e>
 80082c0:	4b6f      	ldr	r3, [pc, #444]	; (8008480 <_strtod_l+0x590>)
 80082c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80082c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082ca:	f7f8 f9b5 	bl	8000638 <__aeabi_dmul>
 80082ce:	4606      	mov	r6, r0
 80082d0:	4628      	mov	r0, r5
 80082d2:	460f      	mov	r7, r1
 80082d4:	f7f8 f936 	bl	8000544 <__aeabi_ui2d>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f7 fff4 	bl	80002cc <__adddf3>
 80082e4:	2c0f      	cmp	r4, #15
 80082e6:	4682      	mov	sl, r0
 80082e8:	468b      	mov	fp, r1
 80082ea:	ddd5      	ble.n	8008298 <_strtod_l+0x3a8>
 80082ec:	9b06      	ldr	r3, [sp, #24]
 80082ee:	eba4 0808 	sub.w	r8, r4, r8
 80082f2:	4498      	add	r8, r3
 80082f4:	f1b8 0f00 	cmp.w	r8, #0
 80082f8:	f340 8096 	ble.w	8008428 <_strtod_l+0x538>
 80082fc:	f018 030f 	ands.w	r3, r8, #15
 8008300:	d00a      	beq.n	8008318 <_strtod_l+0x428>
 8008302:	495f      	ldr	r1, [pc, #380]	; (8008480 <_strtod_l+0x590>)
 8008304:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008308:	4652      	mov	r2, sl
 800830a:	465b      	mov	r3, fp
 800830c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	4682      	mov	sl, r0
 8008316:	468b      	mov	fp, r1
 8008318:	f038 080f 	bics.w	r8, r8, #15
 800831c:	d073      	beq.n	8008406 <_strtod_l+0x516>
 800831e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008322:	dd47      	ble.n	80083b4 <_strtod_l+0x4c4>
 8008324:	2400      	movs	r4, #0
 8008326:	46a0      	mov	r8, r4
 8008328:	9407      	str	r4, [sp, #28]
 800832a:	9405      	str	r4, [sp, #20]
 800832c:	2322      	movs	r3, #34	; 0x22
 800832e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008488 <_strtod_l+0x598>
 8008332:	f8c9 3000 	str.w	r3, [r9]
 8008336:	f04f 0a00 	mov.w	sl, #0
 800833a:	9b07      	ldr	r3, [sp, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f43f ae16 	beq.w	8007f6e <_strtod_l+0x7e>
 8008342:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008344:	4648      	mov	r0, r9
 8008346:	f001 fe3e 	bl	8009fc6 <_Bfree>
 800834a:	9905      	ldr	r1, [sp, #20]
 800834c:	4648      	mov	r0, r9
 800834e:	f001 fe3a 	bl	8009fc6 <_Bfree>
 8008352:	4641      	mov	r1, r8
 8008354:	4648      	mov	r0, r9
 8008356:	f001 fe36 	bl	8009fc6 <_Bfree>
 800835a:	9907      	ldr	r1, [sp, #28]
 800835c:	4648      	mov	r0, r9
 800835e:	f001 fe32 	bl	8009fc6 <_Bfree>
 8008362:	4621      	mov	r1, r4
 8008364:	4648      	mov	r0, r9
 8008366:	f001 fe2e 	bl	8009fc6 <_Bfree>
 800836a:	e600      	b.n	8007f6e <_strtod_l+0x7e>
 800836c:	9a06      	ldr	r2, [sp, #24]
 800836e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008372:	4293      	cmp	r3, r2
 8008374:	dbba      	blt.n	80082ec <_strtod_l+0x3fc>
 8008376:	4d42      	ldr	r5, [pc, #264]	; (8008480 <_strtod_l+0x590>)
 8008378:	f1c4 040f 	rsb	r4, r4, #15
 800837c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008380:	4652      	mov	r2, sl
 8008382:	465b      	mov	r3, fp
 8008384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008388:	f7f8 f956 	bl	8000638 <__aeabi_dmul>
 800838c:	9b06      	ldr	r3, [sp, #24]
 800838e:	1b1c      	subs	r4, r3, r4
 8008390:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008398:	e78d      	b.n	80082b6 <_strtod_l+0x3c6>
 800839a:	f113 0f16 	cmn.w	r3, #22
 800839e:	dba5      	blt.n	80082ec <_strtod_l+0x3fc>
 80083a0:	4a37      	ldr	r2, [pc, #220]	; (8008480 <_strtod_l+0x590>)
 80083a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80083a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80083aa:	4650      	mov	r0, sl
 80083ac:	4659      	mov	r1, fp
 80083ae:	f7f8 fa6d 	bl	800088c <__aeabi_ddiv>
 80083b2:	e782      	b.n	80082ba <_strtod_l+0x3ca>
 80083b4:	2300      	movs	r3, #0
 80083b6:	4e33      	ldr	r6, [pc, #204]	; (8008484 <_strtod_l+0x594>)
 80083b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80083bc:	4650      	mov	r0, sl
 80083be:	4659      	mov	r1, fp
 80083c0:	461d      	mov	r5, r3
 80083c2:	f1b8 0f01 	cmp.w	r8, #1
 80083c6:	dc21      	bgt.n	800840c <_strtod_l+0x51c>
 80083c8:	b10b      	cbz	r3, 80083ce <_strtod_l+0x4de>
 80083ca:	4682      	mov	sl, r0
 80083cc:	468b      	mov	fp, r1
 80083ce:	4b2d      	ldr	r3, [pc, #180]	; (8008484 <_strtod_l+0x594>)
 80083d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80083d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80083d8:	4652      	mov	r2, sl
 80083da:	465b      	mov	r3, fp
 80083dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80083e0:	f7f8 f92a 	bl	8000638 <__aeabi_dmul>
 80083e4:	4b28      	ldr	r3, [pc, #160]	; (8008488 <_strtod_l+0x598>)
 80083e6:	460a      	mov	r2, r1
 80083e8:	400b      	ands	r3, r1
 80083ea:	4928      	ldr	r1, [pc, #160]	; (800848c <_strtod_l+0x59c>)
 80083ec:	428b      	cmp	r3, r1
 80083ee:	4682      	mov	sl, r0
 80083f0:	d898      	bhi.n	8008324 <_strtod_l+0x434>
 80083f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80083f6:	428b      	cmp	r3, r1
 80083f8:	bf86      	itte	hi
 80083fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008494 <_strtod_l+0x5a4>
 80083fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8008402:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008406:	2300      	movs	r3, #0
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	e077      	b.n	80084fc <_strtod_l+0x60c>
 800840c:	f018 0f01 	tst.w	r8, #1
 8008410:	d006      	beq.n	8008420 <_strtod_l+0x530>
 8008412:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f8 f90d 	bl	8000638 <__aeabi_dmul>
 800841e:	2301      	movs	r3, #1
 8008420:	3501      	adds	r5, #1
 8008422:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008426:	e7cc      	b.n	80083c2 <_strtod_l+0x4d2>
 8008428:	d0ed      	beq.n	8008406 <_strtod_l+0x516>
 800842a:	f1c8 0800 	rsb	r8, r8, #0
 800842e:	f018 020f 	ands.w	r2, r8, #15
 8008432:	d00a      	beq.n	800844a <_strtod_l+0x55a>
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <_strtod_l+0x590>)
 8008436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800843a:	4650      	mov	r0, sl
 800843c:	4659      	mov	r1, fp
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f7f8 fa23 	bl	800088c <__aeabi_ddiv>
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800844e:	d0da      	beq.n	8008406 <_strtod_l+0x516>
 8008450:	f1b8 0f1f 	cmp.w	r8, #31
 8008454:	dd20      	ble.n	8008498 <_strtod_l+0x5a8>
 8008456:	2400      	movs	r4, #0
 8008458:	46a0      	mov	r8, r4
 800845a:	9407      	str	r4, [sp, #28]
 800845c:	9405      	str	r4, [sp, #20]
 800845e:	2322      	movs	r3, #34	; 0x22
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	f04f 0b00 	mov.w	fp, #0
 8008468:	f8c9 3000 	str.w	r3, [r9]
 800846c:	e765      	b.n	800833a <_strtod_l+0x44a>
 800846e:	bf00      	nop
 8008470:	0800ac99 	.word	0x0800ac99
 8008474:	0800ad23 	.word	0x0800ad23
 8008478:	0800aca1 	.word	0x0800aca1
 800847c:	0800ace4 	.word	0x0800ace4
 8008480:	0800ad60 	.word	0x0800ad60
 8008484:	0800ad38 	.word	0x0800ad38
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	7ca00000 	.word	0x7ca00000
 8008490:	fff80000 	.word	0xfff80000
 8008494:	7fefffff 	.word	0x7fefffff
 8008498:	f018 0310 	ands.w	r3, r8, #16
 800849c:	bf18      	it	ne
 800849e:	236a      	movne	r3, #106	; 0x6a
 80084a0:	4da0      	ldr	r5, [pc, #640]	; (8008724 <_strtod_l+0x834>)
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	4650      	mov	r0, sl
 80084a6:	4659      	mov	r1, fp
 80084a8:	2300      	movs	r3, #0
 80084aa:	f1b8 0f00 	cmp.w	r8, #0
 80084ae:	f300 810a 	bgt.w	80086c6 <_strtod_l+0x7d6>
 80084b2:	b10b      	cbz	r3, 80084b8 <_strtod_l+0x5c8>
 80084b4:	4682      	mov	sl, r0
 80084b6:	468b      	mov	fp, r1
 80084b8:	9b04      	ldr	r3, [sp, #16]
 80084ba:	b1bb      	cbz	r3, 80084ec <_strtod_l+0x5fc>
 80084bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80084c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	4659      	mov	r1, fp
 80084c8:	dd10      	ble.n	80084ec <_strtod_l+0x5fc>
 80084ca:	2b1f      	cmp	r3, #31
 80084cc:	f340 8107 	ble.w	80086de <_strtod_l+0x7ee>
 80084d0:	2b34      	cmp	r3, #52	; 0x34
 80084d2:	bfde      	ittt	le
 80084d4:	3b20      	suble	r3, #32
 80084d6:	f04f 32ff 	movle.w	r2, #4294967295
 80084da:	fa02 f303 	lslle.w	r3, r2, r3
 80084de:	f04f 0a00 	mov.w	sl, #0
 80084e2:	bfcc      	ite	gt
 80084e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80084e8:	ea03 0b01 	andle.w	fp, r3, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	f7f8 fb08 	bl	8000b08 <__aeabi_dcmpeq>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d1ac      	bne.n	8008456 <_strtod_l+0x566>
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	9a05      	ldr	r2, [sp, #20]
 8008502:	9908      	ldr	r1, [sp, #32]
 8008504:	4623      	mov	r3, r4
 8008506:	4648      	mov	r0, r9
 8008508:	f001 fdaf 	bl	800a06a <__s2b>
 800850c:	9007      	str	r0, [sp, #28]
 800850e:	2800      	cmp	r0, #0
 8008510:	f43f af08 	beq.w	8008324 <_strtod_l+0x434>
 8008514:	9a06      	ldr	r2, [sp, #24]
 8008516:	9b06      	ldr	r3, [sp, #24]
 8008518:	2a00      	cmp	r2, #0
 800851a:	f1c3 0300 	rsb	r3, r3, #0
 800851e:	bfa8      	it	ge
 8008520:	2300      	movge	r3, #0
 8008522:	930e      	str	r3, [sp, #56]	; 0x38
 8008524:	2400      	movs	r4, #0
 8008526:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800852a:	9316      	str	r3, [sp, #88]	; 0x58
 800852c:	46a0      	mov	r8, r4
 800852e:	9b07      	ldr	r3, [sp, #28]
 8008530:	4648      	mov	r0, r9
 8008532:	6859      	ldr	r1, [r3, #4]
 8008534:	f001 fd13 	bl	8009f5e <_Balloc>
 8008538:	9005      	str	r0, [sp, #20]
 800853a:	2800      	cmp	r0, #0
 800853c:	f43f aef6 	beq.w	800832c <_strtod_l+0x43c>
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	3202      	adds	r2, #2
 8008546:	f103 010c 	add.w	r1, r3, #12
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	300c      	adds	r0, #12
 800854e:	f001 fcfb 	bl	8009f48 <memcpy>
 8008552:	aa1e      	add	r2, sp, #120	; 0x78
 8008554:	a91d      	add	r1, sp, #116	; 0x74
 8008556:	ec4b ab10 	vmov	d0, sl, fp
 800855a:	4648      	mov	r0, r9
 800855c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008560:	f002 f83e 	bl	800a5e0 <__d2b>
 8008564:	901c      	str	r0, [sp, #112]	; 0x70
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f aee0 	beq.w	800832c <_strtod_l+0x43c>
 800856c:	2101      	movs	r1, #1
 800856e:	4648      	mov	r0, r9
 8008570:	f001 fe07 	bl	800a182 <__i2b>
 8008574:	4680      	mov	r8, r0
 8008576:	2800      	cmp	r0, #0
 8008578:	f43f aed8 	beq.w	800832c <_strtod_l+0x43c>
 800857c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800857e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008580:	2e00      	cmp	r6, #0
 8008582:	bfab      	itete	ge
 8008584:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008586:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008588:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800858a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800858c:	bfac      	ite	ge
 800858e:	18f7      	addge	r7, r6, r3
 8008590:	1b9d      	sublt	r5, r3, r6
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	1af6      	subs	r6, r6, r3
 8008596:	4416      	add	r6, r2
 8008598:	4b63      	ldr	r3, [pc, #396]	; (8008728 <_strtod_l+0x838>)
 800859a:	3e01      	subs	r6, #1
 800859c:	429e      	cmp	r6, r3
 800859e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085a2:	f280 80af 	bge.w	8008704 <_strtod_l+0x814>
 80085a6:	1b9b      	subs	r3, r3, r6
 80085a8:	2b1f      	cmp	r3, #31
 80085aa:	eba2 0203 	sub.w	r2, r2, r3
 80085ae:	f04f 0101 	mov.w	r1, #1
 80085b2:	f300 809b 	bgt.w	80086ec <_strtod_l+0x7fc>
 80085b6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80085bc:	2300      	movs	r3, #0
 80085be:	930a      	str	r3, [sp, #40]	; 0x28
 80085c0:	18be      	adds	r6, r7, r2
 80085c2:	9b04      	ldr	r3, [sp, #16]
 80085c4:	42b7      	cmp	r7, r6
 80085c6:	4415      	add	r5, r2
 80085c8:	441d      	add	r5, r3
 80085ca:	463b      	mov	r3, r7
 80085cc:	bfa8      	it	ge
 80085ce:	4633      	movge	r3, r6
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	bfa8      	it	ge
 80085d4:	462b      	movge	r3, r5
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfc2      	ittt	gt
 80085da:	1af6      	subgt	r6, r6, r3
 80085dc:	1aed      	subgt	r5, r5, r3
 80085de:	1aff      	subgt	r7, r7, r3
 80085e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085e2:	b1bb      	cbz	r3, 8008614 <_strtod_l+0x724>
 80085e4:	4641      	mov	r1, r8
 80085e6:	461a      	mov	r2, r3
 80085e8:	4648      	mov	r0, r9
 80085ea:	f001 fe69 	bl	800a2c0 <__pow5mult>
 80085ee:	4680      	mov	r8, r0
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f43f ae9b 	beq.w	800832c <_strtod_l+0x43c>
 80085f6:	4601      	mov	r1, r0
 80085f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80085fa:	4648      	mov	r0, r9
 80085fc:	f001 fdca 	bl	800a194 <__multiply>
 8008600:	900c      	str	r0, [sp, #48]	; 0x30
 8008602:	2800      	cmp	r0, #0
 8008604:	f43f ae92 	beq.w	800832c <_strtod_l+0x43c>
 8008608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800860a:	4648      	mov	r0, r9
 800860c:	f001 fcdb 	bl	8009fc6 <_Bfree>
 8008610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008612:	931c      	str	r3, [sp, #112]	; 0x70
 8008614:	2e00      	cmp	r6, #0
 8008616:	dc7a      	bgt.n	800870e <_strtod_l+0x81e>
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd08      	ble.n	8008630 <_strtod_l+0x740>
 800861e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008620:	9905      	ldr	r1, [sp, #20]
 8008622:	4648      	mov	r0, r9
 8008624:	f001 fe4c 	bl	800a2c0 <__pow5mult>
 8008628:	9005      	str	r0, [sp, #20]
 800862a:	2800      	cmp	r0, #0
 800862c:	f43f ae7e 	beq.w	800832c <_strtod_l+0x43c>
 8008630:	2d00      	cmp	r5, #0
 8008632:	dd08      	ble.n	8008646 <_strtod_l+0x756>
 8008634:	462a      	mov	r2, r5
 8008636:	9905      	ldr	r1, [sp, #20]
 8008638:	4648      	mov	r0, r9
 800863a:	f001 fe8f 	bl	800a35c <__lshift>
 800863e:	9005      	str	r0, [sp, #20]
 8008640:	2800      	cmp	r0, #0
 8008642:	f43f ae73 	beq.w	800832c <_strtod_l+0x43c>
 8008646:	2f00      	cmp	r7, #0
 8008648:	dd08      	ble.n	800865c <_strtod_l+0x76c>
 800864a:	4641      	mov	r1, r8
 800864c:	463a      	mov	r2, r7
 800864e:	4648      	mov	r0, r9
 8008650:	f001 fe84 	bl	800a35c <__lshift>
 8008654:	4680      	mov	r8, r0
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f ae68 	beq.w	800832c <_strtod_l+0x43c>
 800865c:	9a05      	ldr	r2, [sp, #20]
 800865e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008660:	4648      	mov	r0, r9
 8008662:	f001 fee9 	bl	800a438 <__mdiff>
 8008666:	4604      	mov	r4, r0
 8008668:	2800      	cmp	r0, #0
 800866a:	f43f ae5f 	beq.w	800832c <_strtod_l+0x43c>
 800866e:	68c3      	ldr	r3, [r0, #12]
 8008670:	930c      	str	r3, [sp, #48]	; 0x30
 8008672:	2300      	movs	r3, #0
 8008674:	60c3      	str	r3, [r0, #12]
 8008676:	4641      	mov	r1, r8
 8008678:	f001 fec4 	bl	800a404 <__mcmp>
 800867c:	2800      	cmp	r0, #0
 800867e:	da55      	bge.n	800872c <_strtod_l+0x83c>
 8008680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008682:	b9e3      	cbnz	r3, 80086be <_strtod_l+0x7ce>
 8008684:	f1ba 0f00 	cmp.w	sl, #0
 8008688:	d119      	bne.n	80086be <_strtod_l+0x7ce>
 800868a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800868e:	b9b3      	cbnz	r3, 80086be <_strtod_l+0x7ce>
 8008690:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008694:	0d1b      	lsrs	r3, r3, #20
 8008696:	051b      	lsls	r3, r3, #20
 8008698:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800869c:	d90f      	bls.n	80086be <_strtod_l+0x7ce>
 800869e:	6963      	ldr	r3, [r4, #20]
 80086a0:	b913      	cbnz	r3, 80086a8 <_strtod_l+0x7b8>
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	dd0a      	ble.n	80086be <_strtod_l+0x7ce>
 80086a8:	4621      	mov	r1, r4
 80086aa:	2201      	movs	r2, #1
 80086ac:	4648      	mov	r0, r9
 80086ae:	f001 fe55 	bl	800a35c <__lshift>
 80086b2:	4641      	mov	r1, r8
 80086b4:	4604      	mov	r4, r0
 80086b6:	f001 fea5 	bl	800a404 <__mcmp>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	dc67      	bgt.n	800878e <_strtod_l+0x89e>
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d171      	bne.n	80087a8 <_strtod_l+0x8b8>
 80086c4:	e63d      	b.n	8008342 <_strtod_l+0x452>
 80086c6:	f018 0f01 	tst.w	r8, #1
 80086ca:	d004      	beq.n	80086d6 <_strtod_l+0x7e6>
 80086cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086d0:	f7f7 ffb2 	bl	8000638 <__aeabi_dmul>
 80086d4:	2301      	movs	r3, #1
 80086d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086da:	3508      	adds	r5, #8
 80086dc:	e6e5      	b.n	80084aa <_strtod_l+0x5ba>
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	ea03 0a0a 	and.w	sl, r3, sl
 80086ea:	e6ff      	b.n	80084ec <_strtod_l+0x5fc>
 80086ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80086f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80086f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80086f8:	36e2      	adds	r6, #226	; 0xe2
 80086fa:	fa01 f306 	lsl.w	r3, r1, r6
 80086fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008700:	910f      	str	r1, [sp, #60]	; 0x3c
 8008702:	e75d      	b.n	80085c0 <_strtod_l+0x6d0>
 8008704:	2300      	movs	r3, #0
 8008706:	930a      	str	r3, [sp, #40]	; 0x28
 8008708:	2301      	movs	r3, #1
 800870a:	930f      	str	r3, [sp, #60]	; 0x3c
 800870c:	e758      	b.n	80085c0 <_strtod_l+0x6d0>
 800870e:	4632      	mov	r2, r6
 8008710:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008712:	4648      	mov	r0, r9
 8008714:	f001 fe22 	bl	800a35c <__lshift>
 8008718:	901c      	str	r0, [sp, #112]	; 0x70
 800871a:	2800      	cmp	r0, #0
 800871c:	f47f af7c 	bne.w	8008618 <_strtod_l+0x728>
 8008720:	e604      	b.n	800832c <_strtod_l+0x43c>
 8008722:	bf00      	nop
 8008724:	0800acf8 	.word	0x0800acf8
 8008728:	fffffc02 	.word	0xfffffc02
 800872c:	465d      	mov	r5, fp
 800872e:	f040 8086 	bne.w	800883e <_strtod_l+0x94e>
 8008732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008738:	b32a      	cbz	r2, 8008786 <_strtod_l+0x896>
 800873a:	4aaf      	ldr	r2, [pc, #700]	; (80089f8 <_strtod_l+0xb08>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d153      	bne.n	80087e8 <_strtod_l+0x8f8>
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	4650      	mov	r0, sl
 8008744:	b1d3      	cbz	r3, 800877c <_strtod_l+0x88c>
 8008746:	4aad      	ldr	r2, [pc, #692]	; (80089fc <_strtod_l+0xb0c>)
 8008748:	402a      	ands	r2, r5
 800874a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800874e:	f04f 31ff 	mov.w	r1, #4294967295
 8008752:	d816      	bhi.n	8008782 <_strtod_l+0x892>
 8008754:	0d12      	lsrs	r2, r2, #20
 8008756:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800875a:	fa01 f303 	lsl.w	r3, r1, r3
 800875e:	4298      	cmp	r0, r3
 8008760:	d142      	bne.n	80087e8 <_strtod_l+0x8f8>
 8008762:	4ba7      	ldr	r3, [pc, #668]	; (8008a00 <_strtod_l+0xb10>)
 8008764:	429d      	cmp	r5, r3
 8008766:	d102      	bne.n	800876e <_strtod_l+0x87e>
 8008768:	3001      	adds	r0, #1
 800876a:	f43f addf 	beq.w	800832c <_strtod_l+0x43c>
 800876e:	4ba3      	ldr	r3, [pc, #652]	; (80089fc <_strtod_l+0xb0c>)
 8008770:	402b      	ands	r3, r5
 8008772:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	e7a0      	b.n	80086be <_strtod_l+0x7ce>
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	e7ed      	b.n	800875e <_strtod_l+0x86e>
 8008782:	460b      	mov	r3, r1
 8008784:	e7eb      	b.n	800875e <_strtod_l+0x86e>
 8008786:	bb7b      	cbnz	r3, 80087e8 <_strtod_l+0x8f8>
 8008788:	f1ba 0f00 	cmp.w	sl, #0
 800878c:	d12c      	bne.n	80087e8 <_strtod_l+0x8f8>
 800878e:	9904      	ldr	r1, [sp, #16]
 8008790:	4a9a      	ldr	r2, [pc, #616]	; (80089fc <_strtod_l+0xb0c>)
 8008792:	465b      	mov	r3, fp
 8008794:	b1f1      	cbz	r1, 80087d4 <_strtod_l+0x8e4>
 8008796:	ea02 010b 	and.w	r1, r2, fp
 800879a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800879e:	dc19      	bgt.n	80087d4 <_strtod_l+0x8e4>
 80087a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087a4:	f77f ae5b 	ble.w	800845e <_strtod_l+0x56e>
 80087a8:	4a96      	ldr	r2, [pc, #600]	; (8008a04 <_strtod_l+0xb14>)
 80087aa:	2300      	movs	r3, #0
 80087ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80087b0:	4650      	mov	r0, sl
 80087b2:	4659      	mov	r1, fp
 80087b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80087b8:	f7f7 ff3e 	bl	8000638 <__aeabi_dmul>
 80087bc:	4682      	mov	sl, r0
 80087be:	468b      	mov	fp, r1
 80087c0:	2900      	cmp	r1, #0
 80087c2:	f47f adbe 	bne.w	8008342 <_strtod_l+0x452>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f47f adbb 	bne.w	8008342 <_strtod_l+0x452>
 80087cc:	2322      	movs	r3, #34	; 0x22
 80087ce:	f8c9 3000 	str.w	r3, [r9]
 80087d2:	e5b6      	b.n	8008342 <_strtod_l+0x452>
 80087d4:	4013      	ands	r3, r2
 80087d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80087de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80087e2:	f04f 3aff 	mov.w	sl, #4294967295
 80087e6:	e76a      	b.n	80086be <_strtod_l+0x7ce>
 80087e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ea:	b193      	cbz	r3, 8008812 <_strtod_l+0x922>
 80087ec:	422b      	tst	r3, r5
 80087ee:	f43f af66 	beq.w	80086be <_strtod_l+0x7ce>
 80087f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087f4:	9a04      	ldr	r2, [sp, #16]
 80087f6:	4650      	mov	r0, sl
 80087f8:	4659      	mov	r1, fp
 80087fa:	b173      	cbz	r3, 800881a <_strtod_l+0x92a>
 80087fc:	f7ff fb5c 	bl	8007eb8 <sulp>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008808:	f7f7 fd60 	bl	80002cc <__adddf3>
 800880c:	4682      	mov	sl, r0
 800880e:	468b      	mov	fp, r1
 8008810:	e755      	b.n	80086be <_strtod_l+0x7ce>
 8008812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008814:	ea13 0f0a 	tst.w	r3, sl
 8008818:	e7e9      	b.n	80087ee <_strtod_l+0x8fe>
 800881a:	f7ff fb4d 	bl	8007eb8 <sulp>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008826:	f7f7 fd4f 	bl	80002c8 <__aeabi_dsub>
 800882a:	2200      	movs	r2, #0
 800882c:	2300      	movs	r3, #0
 800882e:	4682      	mov	sl, r0
 8008830:	468b      	mov	fp, r1
 8008832:	f7f8 f969 	bl	8000b08 <__aeabi_dcmpeq>
 8008836:	2800      	cmp	r0, #0
 8008838:	f47f ae11 	bne.w	800845e <_strtod_l+0x56e>
 800883c:	e73f      	b.n	80086be <_strtod_l+0x7ce>
 800883e:	4641      	mov	r1, r8
 8008840:	4620      	mov	r0, r4
 8008842:	f001 ff1c 	bl	800a67e <__ratio>
 8008846:	ec57 6b10 	vmov	r6, r7, d0
 800884a:	2200      	movs	r2, #0
 800884c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008850:	ee10 0a10 	vmov	r0, s0
 8008854:	4639      	mov	r1, r7
 8008856:	f7f8 f96b 	bl	8000b30 <__aeabi_dcmple>
 800885a:	2800      	cmp	r0, #0
 800885c:	d077      	beq.n	800894e <_strtod_l+0xa5e>
 800885e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008860:	2b00      	cmp	r3, #0
 8008862:	d04a      	beq.n	80088fa <_strtod_l+0xa0a>
 8008864:	4b68      	ldr	r3, [pc, #416]	; (8008a08 <_strtod_l+0xb18>)
 8008866:	2200      	movs	r2, #0
 8008868:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800886c:	4f66      	ldr	r7, [pc, #408]	; (8008a08 <_strtod_l+0xb18>)
 800886e:	2600      	movs	r6, #0
 8008870:	4b62      	ldr	r3, [pc, #392]	; (80089fc <_strtod_l+0xb0c>)
 8008872:	402b      	ands	r3, r5
 8008874:	930f      	str	r3, [sp, #60]	; 0x3c
 8008876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008878:	4b64      	ldr	r3, [pc, #400]	; (8008a0c <_strtod_l+0xb1c>)
 800887a:	429a      	cmp	r2, r3
 800887c:	f040 80ce 	bne.w	8008a1c <_strtod_l+0xb2c>
 8008880:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008888:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800888c:	ec4b ab10 	vmov	d0, sl, fp
 8008890:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008894:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008898:	f001 fe2c 	bl	800a4f4 <__ulp>
 800889c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088a0:	ec53 2b10 	vmov	r2, r3, d0
 80088a4:	f7f7 fec8 	bl	8000638 <__aeabi_dmul>
 80088a8:	4652      	mov	r2, sl
 80088aa:	465b      	mov	r3, fp
 80088ac:	f7f7 fd0e 	bl	80002cc <__adddf3>
 80088b0:	460b      	mov	r3, r1
 80088b2:	4952      	ldr	r1, [pc, #328]	; (80089fc <_strtod_l+0xb0c>)
 80088b4:	4a56      	ldr	r2, [pc, #344]	; (8008a10 <_strtod_l+0xb20>)
 80088b6:	4019      	ands	r1, r3
 80088b8:	4291      	cmp	r1, r2
 80088ba:	4682      	mov	sl, r0
 80088bc:	d95b      	bls.n	8008976 <_strtod_l+0xa86>
 80088be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d103      	bne.n	80088d0 <_strtod_l+0x9e0>
 80088c8:	9b08      	ldr	r3, [sp, #32]
 80088ca:	3301      	adds	r3, #1
 80088cc:	f43f ad2e 	beq.w	800832c <_strtod_l+0x43c>
 80088d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008a00 <_strtod_l+0xb10>
 80088d4:	f04f 3aff 	mov.w	sl, #4294967295
 80088d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088da:	4648      	mov	r0, r9
 80088dc:	f001 fb73 	bl	8009fc6 <_Bfree>
 80088e0:	9905      	ldr	r1, [sp, #20]
 80088e2:	4648      	mov	r0, r9
 80088e4:	f001 fb6f 	bl	8009fc6 <_Bfree>
 80088e8:	4641      	mov	r1, r8
 80088ea:	4648      	mov	r0, r9
 80088ec:	f001 fb6b 	bl	8009fc6 <_Bfree>
 80088f0:	4621      	mov	r1, r4
 80088f2:	4648      	mov	r0, r9
 80088f4:	f001 fb67 	bl	8009fc6 <_Bfree>
 80088f8:	e619      	b.n	800852e <_strtod_l+0x63e>
 80088fa:	f1ba 0f00 	cmp.w	sl, #0
 80088fe:	d11a      	bne.n	8008936 <_strtod_l+0xa46>
 8008900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008904:	b9eb      	cbnz	r3, 8008942 <_strtod_l+0xa52>
 8008906:	2200      	movs	r2, #0
 8008908:	4b3f      	ldr	r3, [pc, #252]	; (8008a08 <_strtod_l+0xb18>)
 800890a:	4630      	mov	r0, r6
 800890c:	4639      	mov	r1, r7
 800890e:	f7f8 f905 	bl	8000b1c <__aeabi_dcmplt>
 8008912:	b9c8      	cbnz	r0, 8008948 <_strtod_l+0xa58>
 8008914:	4630      	mov	r0, r6
 8008916:	4639      	mov	r1, r7
 8008918:	2200      	movs	r2, #0
 800891a:	4b3e      	ldr	r3, [pc, #248]	; (8008a14 <_strtod_l+0xb24>)
 800891c:	f7f7 fe8c 	bl	8000638 <__aeabi_dmul>
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008928:	9618      	str	r6, [sp, #96]	; 0x60
 800892a:	9319      	str	r3, [sp, #100]	; 0x64
 800892c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008930:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008934:	e79c      	b.n	8008870 <_strtod_l+0x980>
 8008936:	f1ba 0f01 	cmp.w	sl, #1
 800893a:	d102      	bne.n	8008942 <_strtod_l+0xa52>
 800893c:	2d00      	cmp	r5, #0
 800893e:	f43f ad8e 	beq.w	800845e <_strtod_l+0x56e>
 8008942:	2200      	movs	r2, #0
 8008944:	4b34      	ldr	r3, [pc, #208]	; (8008a18 <_strtod_l+0xb28>)
 8008946:	e78f      	b.n	8008868 <_strtod_l+0x978>
 8008948:	2600      	movs	r6, #0
 800894a:	4f32      	ldr	r7, [pc, #200]	; (8008a14 <_strtod_l+0xb24>)
 800894c:	e7ea      	b.n	8008924 <_strtod_l+0xa34>
 800894e:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <_strtod_l+0xb24>)
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	2200      	movs	r2, #0
 8008956:	f7f7 fe6f 	bl	8000638 <__aeabi_dmul>
 800895a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	b933      	cbnz	r3, 8008970 <_strtod_l+0xa80>
 8008962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008966:	9010      	str	r0, [sp, #64]	; 0x40
 8008968:	9311      	str	r3, [sp, #68]	; 0x44
 800896a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800896e:	e7df      	b.n	8008930 <_strtod_l+0xa40>
 8008970:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008974:	e7f9      	b.n	800896a <_strtod_l+0xa7a>
 8008976:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800897a:	9b04      	ldr	r3, [sp, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1ab      	bne.n	80088d8 <_strtod_l+0x9e8>
 8008980:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008984:	0d1b      	lsrs	r3, r3, #20
 8008986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008988:	051b      	lsls	r3, r3, #20
 800898a:	429a      	cmp	r2, r3
 800898c:	465d      	mov	r5, fp
 800898e:	d1a3      	bne.n	80088d8 <_strtod_l+0x9e8>
 8008990:	4639      	mov	r1, r7
 8008992:	4630      	mov	r0, r6
 8008994:	f7f8 f900 	bl	8000b98 <__aeabi_d2iz>
 8008998:	f7f7 fde4 	bl	8000564 <__aeabi_i2d>
 800899c:	460b      	mov	r3, r1
 800899e:	4602      	mov	r2, r0
 80089a0:	4639      	mov	r1, r7
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7f7 fc90 	bl	80002c8 <__aeabi_dsub>
 80089a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	b933      	cbnz	r3, 80089be <_strtod_l+0xace>
 80089b0:	f1ba 0f00 	cmp.w	sl, #0
 80089b4:	d103      	bne.n	80089be <_strtod_l+0xace>
 80089b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	d06d      	beq.n	8008a9a <_strtod_l+0xbaa>
 80089be:	a30a      	add	r3, pc, #40	; (adr r3, 80089e8 <_strtod_l+0xaf8>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	4630      	mov	r0, r6
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f8 f8a8 	bl	8000b1c <__aeabi_dcmplt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f47f acb8 	bne.w	8008342 <_strtod_l+0x452>
 80089d2:	a307      	add	r3, pc, #28	; (adr r3, 80089f0 <_strtod_l+0xb00>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f8 f8bc 	bl	8000b58 <__aeabi_dcmpgt>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f43f af79 	beq.w	80088d8 <_strtod_l+0x9e8>
 80089e6:	e4ac      	b.n	8008342 <_strtod_l+0x452>
 80089e8:	94a03595 	.word	0x94a03595
 80089ec:	3fdfffff 	.word	0x3fdfffff
 80089f0:	35afe535 	.word	0x35afe535
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	000fffff 	.word	0x000fffff
 80089fc:	7ff00000 	.word	0x7ff00000
 8008a00:	7fefffff 	.word	0x7fefffff
 8008a04:	39500000 	.word	0x39500000
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	7fe00000 	.word	0x7fe00000
 8008a10:	7c9fffff 	.word	0x7c9fffff
 8008a14:	3fe00000 	.word	0x3fe00000
 8008a18:	bff00000 	.word	0xbff00000
 8008a1c:	9b04      	ldr	r3, [sp, #16]
 8008a1e:	b333      	cbz	r3, 8008a6e <_strtod_l+0xb7e>
 8008a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a26:	d822      	bhi.n	8008a6e <_strtod_l+0xb7e>
 8008a28:	a327      	add	r3, pc, #156	; (adr r3, 8008ac8 <_strtod_l+0xbd8>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	f7f8 f87d 	bl	8000b30 <__aeabi_dcmple>
 8008a36:	b1a0      	cbz	r0, 8008a62 <_strtod_l+0xb72>
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7f8 f8d4 	bl	8000be8 <__aeabi_d2uiz>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	bf08      	it	eq
 8008a44:	2001      	moveq	r0, #1
 8008a46:	f7f7 fd7d 	bl	8000544 <__aeabi_ui2d>
 8008a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	bb03      	cbnz	r3, 8008a94 <_strtod_l+0xba4>
 8008a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a56:	9012      	str	r0, [sp, #72]	; 0x48
 8008a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008a5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008a72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008a76:	f001 fd3d 	bl	800a4f4 <__ulp>
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	ec53 2b10 	vmov	r2, r3, d0
 8008a80:	4659      	mov	r1, fp
 8008a82:	f7f7 fdd9 	bl	8000638 <__aeabi_dmul>
 8008a86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a8a:	f7f7 fc1f 	bl	80002cc <__adddf3>
 8008a8e:	4682      	mov	sl, r0
 8008a90:	468b      	mov	fp, r1
 8008a92:	e772      	b.n	800897a <_strtod_l+0xa8a>
 8008a94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008a98:	e7df      	b.n	8008a5a <_strtod_l+0xb6a>
 8008a9a:	a30d      	add	r3, pc, #52	; (adr r3, 8008ad0 <_strtod_l+0xbe0>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f8 f83c 	bl	8000b1c <__aeabi_dcmplt>
 8008aa4:	e79c      	b.n	80089e0 <_strtod_l+0xaf0>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	930d      	str	r3, [sp, #52]	; 0x34
 8008aaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008aac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	f7ff ba61 	b.w	8007f76 <_strtod_l+0x86>
 8008ab4:	2b65      	cmp	r3, #101	; 0x65
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	f43f ab4e 	beq.w	800815a <_strtod_l+0x26a>
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	9104      	str	r1, [sp, #16]
 8008ac4:	f7ff bacb 	b.w	800805e <_strtod_l+0x16e>
 8008ac8:	ffc00000 	.word	0xffc00000
 8008acc:	41dfffff 	.word	0x41dfffff
 8008ad0:	94a03595 	.word	0x94a03595
 8008ad4:	3fcfffff 	.word	0x3fcfffff

08008ad8 <_strtod_r>:
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <_strtod_r+0x18>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	b410      	push	{r4}
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	4c04      	ldr	r4, [pc, #16]	; (8008af4 <_strtod_r+0x1c>)
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bf08      	it	eq
 8008ae6:	4623      	moveq	r3, r4
 8008ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aec:	f7ff ba00 	b.w	8007ef0 <_strtod_l>
 8008af0:	2000004c 	.word	0x2000004c
 8008af4:	200000b0 	.word	0x200000b0

08008af8 <_strtol_l.isra.0>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	4680      	mov	r8, r0
 8008afe:	4689      	mov	r9, r1
 8008b00:	4692      	mov	sl, r2
 8008b02:	461e      	mov	r6, r3
 8008b04:	460f      	mov	r7, r1
 8008b06:	463d      	mov	r5, r7
 8008b08:	9808      	ldr	r0, [sp, #32]
 8008b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b0e:	f001 f9ed 	bl	8009eec <__locale_ctype_ptr_l>
 8008b12:	4420      	add	r0, r4
 8008b14:	7843      	ldrb	r3, [r0, #1]
 8008b16:	f013 0308 	ands.w	r3, r3, #8
 8008b1a:	d132      	bne.n	8008b82 <_strtol_l.isra.0+0x8a>
 8008b1c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b1e:	d132      	bne.n	8008b86 <_strtol_l.isra.0+0x8e>
 8008b20:	787c      	ldrb	r4, [r7, #1]
 8008b22:	1cbd      	adds	r5, r7, #2
 8008b24:	2201      	movs	r2, #1
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	d05d      	beq.n	8008be6 <_strtol_l.isra.0+0xee>
 8008b2a:	2e10      	cmp	r6, #16
 8008b2c:	d109      	bne.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008b2e:	2c30      	cmp	r4, #48	; 0x30
 8008b30:	d107      	bne.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008b32:	782b      	ldrb	r3, [r5, #0]
 8008b34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b38:	2b58      	cmp	r3, #88	; 0x58
 8008b3a:	d14f      	bne.n	8008bdc <_strtol_l.isra.0+0xe4>
 8008b3c:	786c      	ldrb	r4, [r5, #1]
 8008b3e:	2610      	movs	r6, #16
 8008b40:	3502      	adds	r5, #2
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	bf14      	ite	ne
 8008b46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008b4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008b4e:	2700      	movs	r7, #0
 8008b50:	fbb1 fcf6 	udiv	ip, r1, r6
 8008b54:	4638      	mov	r0, r7
 8008b56:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008b5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008b5e:	2b09      	cmp	r3, #9
 8008b60:	d817      	bhi.n	8008b92 <_strtol_l.isra.0+0x9a>
 8008b62:	461c      	mov	r4, r3
 8008b64:	42a6      	cmp	r6, r4
 8008b66:	dd23      	ble.n	8008bb0 <_strtol_l.isra.0+0xb8>
 8008b68:	1c7b      	adds	r3, r7, #1
 8008b6a:	d007      	beq.n	8008b7c <_strtol_l.isra.0+0x84>
 8008b6c:	4584      	cmp	ip, r0
 8008b6e:	d31c      	bcc.n	8008baa <_strtol_l.isra.0+0xb2>
 8008b70:	d101      	bne.n	8008b76 <_strtol_l.isra.0+0x7e>
 8008b72:	45a6      	cmp	lr, r4
 8008b74:	db19      	blt.n	8008baa <_strtol_l.isra.0+0xb2>
 8008b76:	fb00 4006 	mla	r0, r0, r6, r4
 8008b7a:	2701      	movs	r7, #1
 8008b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b80:	e7eb      	b.n	8008b5a <_strtol_l.isra.0+0x62>
 8008b82:	462f      	mov	r7, r5
 8008b84:	e7bf      	b.n	8008b06 <_strtol_l.isra.0+0xe>
 8008b86:	2c2b      	cmp	r4, #43	; 0x2b
 8008b88:	bf04      	itt	eq
 8008b8a:	1cbd      	addeq	r5, r7, #2
 8008b8c:	787c      	ldrbeq	r4, [r7, #1]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	e7c9      	b.n	8008b26 <_strtol_l.isra.0+0x2e>
 8008b92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008b96:	2b19      	cmp	r3, #25
 8008b98:	d801      	bhi.n	8008b9e <_strtol_l.isra.0+0xa6>
 8008b9a:	3c37      	subs	r4, #55	; 0x37
 8008b9c:	e7e2      	b.n	8008b64 <_strtol_l.isra.0+0x6c>
 8008b9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008ba2:	2b19      	cmp	r3, #25
 8008ba4:	d804      	bhi.n	8008bb0 <_strtol_l.isra.0+0xb8>
 8008ba6:	3c57      	subs	r4, #87	; 0x57
 8008ba8:	e7dc      	b.n	8008b64 <_strtol_l.isra.0+0x6c>
 8008baa:	f04f 37ff 	mov.w	r7, #4294967295
 8008bae:	e7e5      	b.n	8008b7c <_strtol_l.isra.0+0x84>
 8008bb0:	1c7b      	adds	r3, r7, #1
 8008bb2:	d108      	bne.n	8008bc6 <_strtol_l.isra.0+0xce>
 8008bb4:	2322      	movs	r3, #34	; 0x22
 8008bb6:	f8c8 3000 	str.w	r3, [r8]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	f1ba 0f00 	cmp.w	sl, #0
 8008bc0:	d107      	bne.n	8008bd2 <_strtol_l.isra.0+0xda>
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	b102      	cbz	r2, 8008bca <_strtol_l.isra.0+0xd2>
 8008bc8:	4240      	negs	r0, r0
 8008bca:	f1ba 0f00 	cmp.w	sl, #0
 8008bce:	d0f8      	beq.n	8008bc2 <_strtol_l.isra.0+0xca>
 8008bd0:	b10f      	cbz	r7, 8008bd6 <_strtol_l.isra.0+0xde>
 8008bd2:	f105 39ff 	add.w	r9, r5, #4294967295
 8008bd6:	f8ca 9000 	str.w	r9, [sl]
 8008bda:	e7f2      	b.n	8008bc2 <_strtol_l.isra.0+0xca>
 8008bdc:	2430      	movs	r4, #48	; 0x30
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d1af      	bne.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008be2:	2608      	movs	r6, #8
 8008be4:	e7ad      	b.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008be6:	2c30      	cmp	r4, #48	; 0x30
 8008be8:	d0a3      	beq.n	8008b32 <_strtol_l.isra.0+0x3a>
 8008bea:	260a      	movs	r6, #10
 8008bec:	e7a9      	b.n	8008b42 <_strtol_l.isra.0+0x4a>
	...

08008bf0 <_strtol_r>:
 8008bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf2:	4c06      	ldr	r4, [pc, #24]	; (8008c0c <_strtol_r+0x1c>)
 8008bf4:	4d06      	ldr	r5, [pc, #24]	; (8008c10 <_strtol_r+0x20>)
 8008bf6:	6824      	ldr	r4, [r4, #0]
 8008bf8:	6a24      	ldr	r4, [r4, #32]
 8008bfa:	2c00      	cmp	r4, #0
 8008bfc:	bf08      	it	eq
 8008bfe:	462c      	moveq	r4, r5
 8008c00:	9400      	str	r4, [sp, #0]
 8008c02:	f7ff ff79 	bl	8008af8 <_strtol_l.isra.0>
 8008c06:	b003      	add	sp, #12
 8008c08:	bd30      	pop	{r4, r5, pc}
 8008c0a:	bf00      	nop
 8008c0c:	2000004c 	.word	0x2000004c
 8008c10:	200000b0 	.word	0x200000b0

08008c14 <quorem>:
 8008c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	6903      	ldr	r3, [r0, #16]
 8008c1a:	690c      	ldr	r4, [r1, #16]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	4680      	mov	r8, r0
 8008c20:	f2c0 8082 	blt.w	8008d28 <quorem+0x114>
 8008c24:	3c01      	subs	r4, #1
 8008c26:	f101 0714 	add.w	r7, r1, #20
 8008c2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008c2e:	f100 0614 	add.w	r6, r0, #20
 8008c32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008c36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008c3a:	eb06 030c 	add.w	r3, r6, ip
 8008c3e:	3501      	adds	r5, #1
 8008c40:	eb07 090c 	add.w	r9, r7, ip
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	fbb0 f5f5 	udiv	r5, r0, r5
 8008c4a:	b395      	cbz	r5, 8008cb2 <quorem+0x9e>
 8008c4c:	f04f 0a00 	mov.w	sl, #0
 8008c50:	4638      	mov	r0, r7
 8008c52:	46b6      	mov	lr, r6
 8008c54:	46d3      	mov	fp, sl
 8008c56:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c5a:	b293      	uxth	r3, r2
 8008c5c:	fb05 a303 	mla	r3, r5, r3, sl
 8008c60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	ebab 0303 	sub.w	r3, fp, r3
 8008c6a:	0c12      	lsrs	r2, r2, #16
 8008c6c:	f8de b000 	ldr.w	fp, [lr]
 8008c70:	fb05 a202 	mla	r2, r5, r2, sl
 8008c74:	fa13 f38b 	uxtah	r3, r3, fp
 8008c78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008c7c:	fa1f fb82 	uxth.w	fp, r2
 8008c80:	f8de 2000 	ldr.w	r2, [lr]
 8008c84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c92:	4581      	cmp	r9, r0
 8008c94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c98:	f84e 3b04 	str.w	r3, [lr], #4
 8008c9c:	d2db      	bcs.n	8008c56 <quorem+0x42>
 8008c9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008ca2:	b933      	cbnz	r3, 8008cb2 <quorem+0x9e>
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	429e      	cmp	r6, r3
 8008caa:	461a      	mov	r2, r3
 8008cac:	d330      	bcc.n	8008d10 <quorem+0xfc>
 8008cae:	f8c8 4010 	str.w	r4, [r8, #16]
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	f001 fba6 	bl	800a404 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	db25      	blt.n	8008d08 <quorem+0xf4>
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f04f 0c00 	mov.w	ip, #0
 8008cc4:	f857 2b04 	ldr.w	r2, [r7], #4
 8008cc8:	f8d0 e000 	ldr.w	lr, [r0]
 8008ccc:	b293      	uxth	r3, r2
 8008cce:	ebac 0303 	sub.w	r3, ip, r3
 8008cd2:	0c12      	lsrs	r2, r2, #16
 8008cd4:	fa13 f38e 	uxtah	r3, r3, lr
 8008cd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ce6:	45b9      	cmp	r9, r7
 8008ce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cec:	f840 3b04 	str.w	r3, [r0], #4
 8008cf0:	d2e8      	bcs.n	8008cc4 <quorem+0xb0>
 8008cf2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008cf6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008cfa:	b92a      	cbnz	r2, 8008d08 <quorem+0xf4>
 8008cfc:	3b04      	subs	r3, #4
 8008cfe:	429e      	cmp	r6, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	d30b      	bcc.n	8008d1c <quorem+0x108>
 8008d04:	f8c8 4010 	str.w	r4, [r8, #16]
 8008d08:	4628      	mov	r0, r5
 8008d0a:	b003      	add	sp, #12
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	3b04      	subs	r3, #4
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	d1ca      	bne.n	8008cae <quorem+0x9a>
 8008d18:	3c01      	subs	r4, #1
 8008d1a:	e7c5      	b.n	8008ca8 <quorem+0x94>
 8008d1c:	6812      	ldr	r2, [r2, #0]
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	d1ef      	bne.n	8008d04 <quorem+0xf0>
 8008d24:	3c01      	subs	r4, #1
 8008d26:	e7ea      	b.n	8008cfe <quorem+0xea>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7ee      	b.n	8008d0a <quorem+0xf6>
 8008d2c:	0000      	movs	r0, r0
	...

08008d30 <_dtoa_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	ec57 6b10 	vmov	r6, r7, d0
 8008d38:	b097      	sub	sp, #92	; 0x5c
 8008d3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d3c:	9106      	str	r1, [sp, #24]
 8008d3e:	4604      	mov	r4, r0
 8008d40:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d42:	9312      	str	r3, [sp, #72]	; 0x48
 8008d44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d48:	e9cd 6700 	strd	r6, r7, [sp]
 8008d4c:	b93d      	cbnz	r5, 8008d5e <_dtoa_r+0x2e>
 8008d4e:	2010      	movs	r0, #16
 8008d50:	f001 f8e0 	bl	8009f14 <malloc>
 8008d54:	6260      	str	r0, [r4, #36]	; 0x24
 8008d56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d5a:	6005      	str	r5, [r0, #0]
 8008d5c:	60c5      	str	r5, [r0, #12]
 8008d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	b151      	cbz	r1, 8008d7a <_dtoa_r+0x4a>
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	604a      	str	r2, [r1, #4]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4093      	lsls	r3, r2
 8008d6c:	608b      	str	r3, [r1, #8]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f001 f929 	bl	8009fc6 <_Bfree>
 8008d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	1e3b      	subs	r3, r7, #0
 8008d7c:	bfbb      	ittet	lt
 8008d7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	9301      	strlt	r3, [sp, #4]
 8008d84:	2300      	movge	r3, #0
 8008d86:	2201      	movlt	r2, #1
 8008d88:	bfac      	ite	ge
 8008d8a:	f8c8 3000 	strge.w	r3, [r8]
 8008d8e:	f8c8 2000 	strlt.w	r2, [r8]
 8008d92:	4baf      	ldr	r3, [pc, #700]	; (8009050 <_dtoa_r+0x320>)
 8008d94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d98:	ea33 0308 	bics.w	r3, r3, r8
 8008d9c:	d114      	bne.n	8008dc8 <_dtoa_r+0x98>
 8008d9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	b923      	cbnz	r3, 8008db4 <_dtoa_r+0x84>
 8008daa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008dae:	2800      	cmp	r0, #0
 8008db0:	f000 8542 	beq.w	8009838 <_dtoa_r+0xb08>
 8008db4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009064 <_dtoa_r+0x334>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8544 	beq.w	8009848 <_dtoa_r+0xb18>
 8008dc0:	f10b 0303 	add.w	r3, fp, #3
 8008dc4:	f000 bd3e 	b.w	8009844 <_dtoa_r+0xb14>
 8008dc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8008dd8:	4681      	mov	r9, r0
 8008dda:	b168      	cbz	r0, 8008df8 <_dtoa_r+0xc8>
 8008ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dde:	2301      	movs	r3, #1
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8524 	beq.w	8009832 <_dtoa_r+0xb02>
 8008dea:	4b9a      	ldr	r3, [pc, #616]	; (8009054 <_dtoa_r+0x324>)
 8008dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dee:	f103 3bff 	add.w	fp, r3, #4294967295
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	f000 bd28 	b.w	8009848 <_dtoa_r+0xb18>
 8008df8:	aa14      	add	r2, sp, #80	; 0x50
 8008dfa:	a915      	add	r1, sp, #84	; 0x54
 8008dfc:	ec47 6b10 	vmov	d0, r6, r7
 8008e00:	4620      	mov	r0, r4
 8008e02:	f001 fbed 	bl	800a5e0 <__d2b>
 8008e06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e0a:	9004      	str	r0, [sp, #16]
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	d07c      	beq.n	8008f0a <_dtoa_r+0x1da>
 8008e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008e18:	46b2      	mov	sl, r6
 8008e1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008e26:	2200      	movs	r2, #0
 8008e28:	4b8b      	ldr	r3, [pc, #556]	; (8009058 <_dtoa_r+0x328>)
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	f7f7 fa4b 	bl	80002c8 <__aeabi_dsub>
 8008e32:	a381      	add	r3, pc, #516	; (adr r3, 8009038 <_dtoa_r+0x308>)
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f7f7 fbfe 	bl	8000638 <__aeabi_dmul>
 8008e3c:	a380      	add	r3, pc, #512	; (adr r3, 8009040 <_dtoa_r+0x310>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f7f7 fa43 	bl	80002cc <__adddf3>
 8008e46:	4606      	mov	r6, r0
 8008e48:	4628      	mov	r0, r5
 8008e4a:	460f      	mov	r7, r1
 8008e4c:	f7f7 fb8a 	bl	8000564 <__aeabi_i2d>
 8008e50:	a37d      	add	r3, pc, #500	; (adr r3, 8009048 <_dtoa_r+0x318>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fbef 	bl	8000638 <__aeabi_dmul>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4630      	mov	r0, r6
 8008e60:	4639      	mov	r1, r7
 8008e62:	f7f7 fa33 	bl	80002cc <__adddf3>
 8008e66:	4606      	mov	r6, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	f7f7 fe95 	bl	8000b98 <__aeabi_d2iz>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4682      	mov	sl, r0
 8008e72:	2300      	movs	r3, #0
 8008e74:	4630      	mov	r0, r6
 8008e76:	4639      	mov	r1, r7
 8008e78:	f7f7 fe50 	bl	8000b1c <__aeabi_dcmplt>
 8008e7c:	b148      	cbz	r0, 8008e92 <_dtoa_r+0x162>
 8008e7e:	4650      	mov	r0, sl
 8008e80:	f7f7 fb70 	bl	8000564 <__aeabi_i2d>
 8008e84:	4632      	mov	r2, r6
 8008e86:	463b      	mov	r3, r7
 8008e88:	f7f7 fe3e 	bl	8000b08 <__aeabi_dcmpeq>
 8008e8c:	b908      	cbnz	r0, 8008e92 <_dtoa_r+0x162>
 8008e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e92:	f1ba 0f16 	cmp.w	sl, #22
 8008e96:	d859      	bhi.n	8008f4c <_dtoa_r+0x21c>
 8008e98:	4970      	ldr	r1, [pc, #448]	; (800905c <_dtoa_r+0x32c>)
 8008e9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea6:	f7f7 fe57 	bl	8000b58 <__aeabi_dcmpgt>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d050      	beq.n	8008f50 <_dtoa_r+0x220>
 8008eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eb8:	1b5d      	subs	r5, r3, r5
 8008eba:	f1b5 0801 	subs.w	r8, r5, #1
 8008ebe:	bf49      	itett	mi
 8008ec0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ec4:	2300      	movpl	r3, #0
 8008ec6:	9305      	strmi	r3, [sp, #20]
 8008ec8:	f04f 0800 	movmi.w	r8, #0
 8008ecc:	bf58      	it	pl
 8008ece:	9305      	strpl	r3, [sp, #20]
 8008ed0:	f1ba 0f00 	cmp.w	sl, #0
 8008ed4:	db3e      	blt.n	8008f54 <_dtoa_r+0x224>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	44d0      	add	r8, sl
 8008eda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008ede:	9307      	str	r3, [sp, #28]
 8008ee0:	9b06      	ldr	r3, [sp, #24]
 8008ee2:	2b09      	cmp	r3, #9
 8008ee4:	f200 8090 	bhi.w	8009008 <_dtoa_r+0x2d8>
 8008ee8:	2b05      	cmp	r3, #5
 8008eea:	bfc4      	itt	gt
 8008eec:	3b04      	subgt	r3, #4
 8008eee:	9306      	strgt	r3, [sp, #24]
 8008ef0:	9b06      	ldr	r3, [sp, #24]
 8008ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ef6:	bfcc      	ite	gt
 8008ef8:	2500      	movgt	r5, #0
 8008efa:	2501      	movle	r5, #1
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	f200 808f 	bhi.w	8009020 <_dtoa_r+0x2f0>
 8008f02:	e8df f003 	tbb	[pc, r3]
 8008f06:	7f7d      	.short	0x7f7d
 8008f08:	7131      	.short	0x7131
 8008f0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008f0e:	441d      	add	r5, r3
 8008f10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008f14:	2820      	cmp	r0, #32
 8008f16:	dd13      	ble.n	8008f40 <_dtoa_r+0x210>
 8008f18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008f1c:	9b00      	ldr	r3, [sp, #0]
 8008f1e:	fa08 f800 	lsl.w	r8, r8, r0
 8008f22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008f26:	fa23 f000 	lsr.w	r0, r3, r0
 8008f2a:	ea48 0000 	orr.w	r0, r8, r0
 8008f2e:	f7f7 fb09 	bl	8000544 <__aeabi_ui2d>
 8008f32:	2301      	movs	r3, #1
 8008f34:	4682      	mov	sl, r0
 8008f36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008f3a:	3d01      	subs	r5, #1
 8008f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f3e:	e772      	b.n	8008e26 <_dtoa_r+0xf6>
 8008f40:	9b00      	ldr	r3, [sp, #0]
 8008f42:	f1c0 0020 	rsb	r0, r0, #32
 8008f46:	fa03 f000 	lsl.w	r0, r3, r0
 8008f4a:	e7f0      	b.n	8008f2e <_dtoa_r+0x1fe>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e7b1      	b.n	8008eb4 <_dtoa_r+0x184>
 8008f50:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f52:	e7b0      	b.n	8008eb6 <_dtoa_r+0x186>
 8008f54:	9b05      	ldr	r3, [sp, #20]
 8008f56:	eba3 030a 	sub.w	r3, r3, sl
 8008f5a:	9305      	str	r3, [sp, #20]
 8008f5c:	f1ca 0300 	rsb	r3, sl, #0
 8008f60:	9307      	str	r3, [sp, #28]
 8008f62:	2300      	movs	r3, #0
 8008f64:	930e      	str	r3, [sp, #56]	; 0x38
 8008f66:	e7bb      	b.n	8008ee0 <_dtoa_r+0x1b0>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd59      	ble.n	8009026 <_dtoa_r+0x2f6>
 8008f72:	9302      	str	r3, [sp, #8]
 8008f74:	4699      	mov	r9, r3
 8008f76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f78:	2200      	movs	r2, #0
 8008f7a:	6072      	str	r2, [r6, #4]
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	f102 0014 	add.w	r0, r2, #20
 8008f82:	4298      	cmp	r0, r3
 8008f84:	6871      	ldr	r1, [r6, #4]
 8008f86:	d953      	bls.n	8009030 <_dtoa_r+0x300>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 ffe8 	bl	8009f5e <_Balloc>
 8008f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	f1b9 0f0e 	cmp.w	r9, #14
 8008f96:	f8d3 b000 	ldr.w	fp, [r3]
 8008f9a:	f200 80e6 	bhi.w	800916a <_dtoa_r+0x43a>
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	f000 80e3 	beq.w	800916a <_dtoa_r+0x43a>
 8008fa4:	ed9d 7b00 	vldr	d7, [sp]
 8008fa8:	f1ba 0f00 	cmp.w	sl, #0
 8008fac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008fb0:	dd74      	ble.n	800909c <_dtoa_r+0x36c>
 8008fb2:	4a2a      	ldr	r2, [pc, #168]	; (800905c <_dtoa_r+0x32c>)
 8008fb4:	f00a 030f 	and.w	r3, sl, #15
 8008fb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fbc:	ed93 7b00 	vldr	d7, [r3]
 8008fc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008fc4:	06f0      	lsls	r0, r6, #27
 8008fc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008fca:	d565      	bpl.n	8009098 <_dtoa_r+0x368>
 8008fcc:	4b24      	ldr	r3, [pc, #144]	; (8009060 <_dtoa_r+0x330>)
 8008fce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd6:	f7f7 fc59 	bl	800088c <__aeabi_ddiv>
 8008fda:	e9cd 0100 	strd	r0, r1, [sp]
 8008fde:	f006 060f 	and.w	r6, r6, #15
 8008fe2:	2503      	movs	r5, #3
 8008fe4:	4f1e      	ldr	r7, [pc, #120]	; (8009060 <_dtoa_r+0x330>)
 8008fe6:	e04c      	b.n	8009082 <_dtoa_r+0x352>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	930a      	str	r3, [sp, #40]	; 0x28
 8008fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fee:	4453      	add	r3, sl
 8008ff0:	f103 0901 	add.w	r9, r3, #1
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	bfb8      	it	lt
 8008ffc:	2301      	movlt	r3, #1
 8008ffe:	e7ba      	b.n	8008f76 <_dtoa_r+0x246>
 8009000:	2300      	movs	r3, #0
 8009002:	e7b2      	b.n	8008f6a <_dtoa_r+0x23a>
 8009004:	2300      	movs	r3, #0
 8009006:	e7f0      	b.n	8008fea <_dtoa_r+0x2ba>
 8009008:	2501      	movs	r5, #1
 800900a:	2300      	movs	r3, #0
 800900c:	9306      	str	r3, [sp, #24]
 800900e:	950a      	str	r5, [sp, #40]	; 0x28
 8009010:	f04f 33ff 	mov.w	r3, #4294967295
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	4699      	mov	r9, r3
 8009018:	2200      	movs	r2, #0
 800901a:	2312      	movs	r3, #18
 800901c:	920b      	str	r2, [sp, #44]	; 0x2c
 800901e:	e7aa      	b.n	8008f76 <_dtoa_r+0x246>
 8009020:	2301      	movs	r3, #1
 8009022:	930a      	str	r3, [sp, #40]	; 0x28
 8009024:	e7f4      	b.n	8009010 <_dtoa_r+0x2e0>
 8009026:	2301      	movs	r3, #1
 8009028:	9302      	str	r3, [sp, #8]
 800902a:	4699      	mov	r9, r3
 800902c:	461a      	mov	r2, r3
 800902e:	e7f5      	b.n	800901c <_dtoa_r+0x2ec>
 8009030:	3101      	adds	r1, #1
 8009032:	6071      	str	r1, [r6, #4]
 8009034:	0052      	lsls	r2, r2, #1
 8009036:	e7a2      	b.n	8008f7e <_dtoa_r+0x24e>
 8009038:	636f4361 	.word	0x636f4361
 800903c:	3fd287a7 	.word	0x3fd287a7
 8009040:	8b60c8b3 	.word	0x8b60c8b3
 8009044:	3fc68a28 	.word	0x3fc68a28
 8009048:	509f79fb 	.word	0x509f79fb
 800904c:	3fd34413 	.word	0x3fd34413
 8009050:	7ff00000 	.word	0x7ff00000
 8009054:	0800aca5 	.word	0x0800aca5
 8009058:	3ff80000 	.word	0x3ff80000
 800905c:	0800ad60 	.word	0x0800ad60
 8009060:	0800ad38 	.word	0x0800ad38
 8009064:	0800ad29 	.word	0x0800ad29
 8009068:	07f1      	lsls	r1, r6, #31
 800906a:	d508      	bpl.n	800907e <_dtoa_r+0x34e>
 800906c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	f7f7 fae0 	bl	8000638 <__aeabi_dmul>
 8009078:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800907c:	3501      	adds	r5, #1
 800907e:	1076      	asrs	r6, r6, #1
 8009080:	3708      	adds	r7, #8
 8009082:	2e00      	cmp	r6, #0
 8009084:	d1f0      	bne.n	8009068 <_dtoa_r+0x338>
 8009086:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800908a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800908e:	f7f7 fbfd 	bl	800088c <__aeabi_ddiv>
 8009092:	e9cd 0100 	strd	r0, r1, [sp]
 8009096:	e01a      	b.n	80090ce <_dtoa_r+0x39e>
 8009098:	2502      	movs	r5, #2
 800909a:	e7a3      	b.n	8008fe4 <_dtoa_r+0x2b4>
 800909c:	f000 80a0 	beq.w	80091e0 <_dtoa_r+0x4b0>
 80090a0:	f1ca 0600 	rsb	r6, sl, #0
 80090a4:	4b9f      	ldr	r3, [pc, #636]	; (8009324 <_dtoa_r+0x5f4>)
 80090a6:	4fa0      	ldr	r7, [pc, #640]	; (8009328 <_dtoa_r+0x5f8>)
 80090a8:	f006 020f 	and.w	r2, r6, #15
 80090ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090b8:	f7f7 fabe 	bl	8000638 <__aeabi_dmul>
 80090bc:	e9cd 0100 	strd	r0, r1, [sp]
 80090c0:	1136      	asrs	r6, r6, #4
 80090c2:	2300      	movs	r3, #0
 80090c4:	2502      	movs	r5, #2
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d17f      	bne.n	80091ca <_dtoa_r+0x49a>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e1      	bne.n	8009092 <_dtoa_r+0x362>
 80090ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8087 	beq.w	80091e4 <_dtoa_r+0x4b4>
 80090d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80090da:	2200      	movs	r2, #0
 80090dc:	4b93      	ldr	r3, [pc, #588]	; (800932c <_dtoa_r+0x5fc>)
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 fd1b 	bl	8000b1c <__aeabi_dcmplt>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d07c      	beq.n	80091e4 <_dtoa_r+0x4b4>
 80090ea:	f1b9 0f00 	cmp.w	r9, #0
 80090ee:	d079      	beq.n	80091e4 <_dtoa_r+0x4b4>
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dd35      	ble.n	8009162 <_dtoa_r+0x432>
 80090f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80090fa:	9308      	str	r3, [sp, #32]
 80090fc:	4639      	mov	r1, r7
 80090fe:	2200      	movs	r2, #0
 8009100:	4b8b      	ldr	r3, [pc, #556]	; (8009330 <_dtoa_r+0x600>)
 8009102:	4630      	mov	r0, r6
 8009104:	f7f7 fa98 	bl	8000638 <__aeabi_dmul>
 8009108:	e9cd 0100 	strd	r0, r1, [sp]
 800910c:	9f02      	ldr	r7, [sp, #8]
 800910e:	3501      	adds	r5, #1
 8009110:	4628      	mov	r0, r5
 8009112:	f7f7 fa27 	bl	8000564 <__aeabi_i2d>
 8009116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800911a:	f7f7 fa8d 	bl	8000638 <__aeabi_dmul>
 800911e:	2200      	movs	r2, #0
 8009120:	4b84      	ldr	r3, [pc, #528]	; (8009334 <_dtoa_r+0x604>)
 8009122:	f7f7 f8d3 	bl	80002cc <__adddf3>
 8009126:	4605      	mov	r5, r0
 8009128:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800912c:	2f00      	cmp	r7, #0
 800912e:	d15d      	bne.n	80091ec <_dtoa_r+0x4bc>
 8009130:	2200      	movs	r2, #0
 8009132:	4b81      	ldr	r3, [pc, #516]	; (8009338 <_dtoa_r+0x608>)
 8009134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009138:	f7f7 f8c6 	bl	80002c8 <__aeabi_dsub>
 800913c:	462a      	mov	r2, r5
 800913e:	4633      	mov	r3, r6
 8009140:	e9cd 0100 	strd	r0, r1, [sp]
 8009144:	f7f7 fd08 	bl	8000b58 <__aeabi_dcmpgt>
 8009148:	2800      	cmp	r0, #0
 800914a:	f040 8288 	bne.w	800965e <_dtoa_r+0x92e>
 800914e:	462a      	mov	r2, r5
 8009150:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009154:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009158:	f7f7 fce0 	bl	8000b1c <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	f040 827c 	bne.w	800965a <_dtoa_r+0x92a>
 8009162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009166:	e9cd 2300 	strd	r2, r3, [sp]
 800916a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800916c:	2b00      	cmp	r3, #0
 800916e:	f2c0 8150 	blt.w	8009412 <_dtoa_r+0x6e2>
 8009172:	f1ba 0f0e 	cmp.w	sl, #14
 8009176:	f300 814c 	bgt.w	8009412 <_dtoa_r+0x6e2>
 800917a:	4b6a      	ldr	r3, [pc, #424]	; (8009324 <_dtoa_r+0x5f4>)
 800917c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009180:	ed93 7b00 	vldr	d7, [r3]
 8009184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800918c:	f280 80d8 	bge.w	8009340 <_dtoa_r+0x610>
 8009190:	f1b9 0f00 	cmp.w	r9, #0
 8009194:	f300 80d4 	bgt.w	8009340 <_dtoa_r+0x610>
 8009198:	f040 825e 	bne.w	8009658 <_dtoa_r+0x928>
 800919c:	2200      	movs	r2, #0
 800919e:	4b66      	ldr	r3, [pc, #408]	; (8009338 <_dtoa_r+0x608>)
 80091a0:	ec51 0b17 	vmov	r0, r1, d7
 80091a4:	f7f7 fa48 	bl	8000638 <__aeabi_dmul>
 80091a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ac:	f7f7 fcca 	bl	8000b44 <__aeabi_dcmpge>
 80091b0:	464f      	mov	r7, r9
 80091b2:	464e      	mov	r6, r9
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f040 8234 	bne.w	8009622 <_dtoa_r+0x8f2>
 80091ba:	2331      	movs	r3, #49	; 0x31
 80091bc:	f10b 0501 	add.w	r5, fp, #1
 80091c0:	f88b 3000 	strb.w	r3, [fp]
 80091c4:	f10a 0a01 	add.w	sl, sl, #1
 80091c8:	e22f      	b.n	800962a <_dtoa_r+0x8fa>
 80091ca:	07f2      	lsls	r2, r6, #31
 80091cc:	d505      	bpl.n	80091da <_dtoa_r+0x4aa>
 80091ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d2:	f7f7 fa31 	bl	8000638 <__aeabi_dmul>
 80091d6:	3501      	adds	r5, #1
 80091d8:	2301      	movs	r3, #1
 80091da:	1076      	asrs	r6, r6, #1
 80091dc:	3708      	adds	r7, #8
 80091de:	e772      	b.n	80090c6 <_dtoa_r+0x396>
 80091e0:	2502      	movs	r5, #2
 80091e2:	e774      	b.n	80090ce <_dtoa_r+0x39e>
 80091e4:	f8cd a020 	str.w	sl, [sp, #32]
 80091e8:	464f      	mov	r7, r9
 80091ea:	e791      	b.n	8009110 <_dtoa_r+0x3e0>
 80091ec:	4b4d      	ldr	r3, [pc, #308]	; (8009324 <_dtoa_r+0x5f4>)
 80091ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80091f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d047      	beq.n	800928c <_dtoa_r+0x55c>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	2000      	movs	r0, #0
 8009202:	494e      	ldr	r1, [pc, #312]	; (800933c <_dtoa_r+0x60c>)
 8009204:	f7f7 fb42 	bl	800088c <__aeabi_ddiv>
 8009208:	462a      	mov	r2, r5
 800920a:	4633      	mov	r3, r6
 800920c:	f7f7 f85c 	bl	80002c8 <__aeabi_dsub>
 8009210:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009214:	465d      	mov	r5, fp
 8009216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800921a:	f7f7 fcbd 	bl	8000b98 <__aeabi_d2iz>
 800921e:	4606      	mov	r6, r0
 8009220:	f7f7 f9a0 	bl	8000564 <__aeabi_i2d>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800922c:	f7f7 f84c 	bl	80002c8 <__aeabi_dsub>
 8009230:	3630      	adds	r6, #48	; 0x30
 8009232:	f805 6b01 	strb.w	r6, [r5], #1
 8009236:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800923a:	e9cd 0100 	strd	r0, r1, [sp]
 800923e:	f7f7 fc6d 	bl	8000b1c <__aeabi_dcmplt>
 8009242:	2800      	cmp	r0, #0
 8009244:	d163      	bne.n	800930e <_dtoa_r+0x5de>
 8009246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800924a:	2000      	movs	r0, #0
 800924c:	4937      	ldr	r1, [pc, #220]	; (800932c <_dtoa_r+0x5fc>)
 800924e:	f7f7 f83b 	bl	80002c8 <__aeabi_dsub>
 8009252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009256:	f7f7 fc61 	bl	8000b1c <__aeabi_dcmplt>
 800925a:	2800      	cmp	r0, #0
 800925c:	f040 80b7 	bne.w	80093ce <_dtoa_r+0x69e>
 8009260:	eba5 030b 	sub.w	r3, r5, fp
 8009264:	429f      	cmp	r7, r3
 8009266:	f77f af7c 	ble.w	8009162 <_dtoa_r+0x432>
 800926a:	2200      	movs	r2, #0
 800926c:	4b30      	ldr	r3, [pc, #192]	; (8009330 <_dtoa_r+0x600>)
 800926e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009272:	f7f7 f9e1 	bl	8000638 <__aeabi_dmul>
 8009276:	2200      	movs	r2, #0
 8009278:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800927c:	4b2c      	ldr	r3, [pc, #176]	; (8009330 <_dtoa_r+0x600>)
 800927e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009282:	f7f7 f9d9 	bl	8000638 <__aeabi_dmul>
 8009286:	e9cd 0100 	strd	r0, r1, [sp]
 800928a:	e7c4      	b.n	8009216 <_dtoa_r+0x4e6>
 800928c:	462a      	mov	r2, r5
 800928e:	4633      	mov	r3, r6
 8009290:	f7f7 f9d2 	bl	8000638 <__aeabi_dmul>
 8009294:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009298:	eb0b 0507 	add.w	r5, fp, r7
 800929c:	465e      	mov	r6, fp
 800929e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092a2:	f7f7 fc79 	bl	8000b98 <__aeabi_d2iz>
 80092a6:	4607      	mov	r7, r0
 80092a8:	f7f7 f95c 	bl	8000564 <__aeabi_i2d>
 80092ac:	3730      	adds	r7, #48	; 0x30
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092b6:	f7f7 f807 	bl	80002c8 <__aeabi_dsub>
 80092ba:	f806 7b01 	strb.w	r7, [r6], #1
 80092be:	42ae      	cmp	r6, r5
 80092c0:	e9cd 0100 	strd	r0, r1, [sp]
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	d126      	bne.n	8009318 <_dtoa_r+0x5e8>
 80092ca:	4b1c      	ldr	r3, [pc, #112]	; (800933c <_dtoa_r+0x60c>)
 80092cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092d0:	f7f6 fffc 	bl	80002cc <__adddf3>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092dc:	f7f7 fc3c 	bl	8000b58 <__aeabi_dcmpgt>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d174      	bne.n	80093ce <_dtoa_r+0x69e>
 80092e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80092e8:	2000      	movs	r0, #0
 80092ea:	4914      	ldr	r1, [pc, #80]	; (800933c <_dtoa_r+0x60c>)
 80092ec:	f7f6 ffec 	bl	80002c8 <__aeabi_dsub>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092f8:	f7f7 fc10 	bl	8000b1c <__aeabi_dcmplt>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	f43f af30 	beq.w	8009162 <_dtoa_r+0x432>
 8009302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009306:	2b30      	cmp	r3, #48	; 0x30
 8009308:	f105 32ff 	add.w	r2, r5, #4294967295
 800930c:	d002      	beq.n	8009314 <_dtoa_r+0x5e4>
 800930e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009312:	e04a      	b.n	80093aa <_dtoa_r+0x67a>
 8009314:	4615      	mov	r5, r2
 8009316:	e7f4      	b.n	8009302 <_dtoa_r+0x5d2>
 8009318:	4b05      	ldr	r3, [pc, #20]	; (8009330 <_dtoa_r+0x600>)
 800931a:	f7f7 f98d 	bl	8000638 <__aeabi_dmul>
 800931e:	e9cd 0100 	strd	r0, r1, [sp]
 8009322:	e7bc      	b.n	800929e <_dtoa_r+0x56e>
 8009324:	0800ad60 	.word	0x0800ad60
 8009328:	0800ad38 	.word	0x0800ad38
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	40240000 	.word	0x40240000
 8009334:	401c0000 	.word	0x401c0000
 8009338:	40140000 	.word	0x40140000
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009344:	465d      	mov	r5, fp
 8009346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f7f7 fa9d 	bl	800088c <__aeabi_ddiv>
 8009352:	f7f7 fc21 	bl	8000b98 <__aeabi_d2iz>
 8009356:	4680      	mov	r8, r0
 8009358:	f7f7 f904 	bl	8000564 <__aeabi_i2d>
 800935c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009360:	f7f7 f96a 	bl	8000638 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009370:	f7f6 ffaa 	bl	80002c8 <__aeabi_dsub>
 8009374:	f805 6b01 	strb.w	r6, [r5], #1
 8009378:	eba5 060b 	sub.w	r6, r5, fp
 800937c:	45b1      	cmp	r9, r6
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	d139      	bne.n	80093f8 <_dtoa_r+0x6c8>
 8009384:	f7f6 ffa2 	bl	80002cc <__adddf3>
 8009388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	f7f7 fbe2 	bl	8000b58 <__aeabi_dcmpgt>
 8009394:	b9c8      	cbnz	r0, 80093ca <_dtoa_r+0x69a>
 8009396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f7 fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 80093a2:	b110      	cbz	r0, 80093aa <_dtoa_r+0x67a>
 80093a4:	f018 0f01 	tst.w	r8, #1
 80093a8:	d10f      	bne.n	80093ca <_dtoa_r+0x69a>
 80093aa:	9904      	ldr	r1, [sp, #16]
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fe0a 	bl	8009fc6 <_Bfree>
 80093b2:	2300      	movs	r3, #0
 80093b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093b6:	702b      	strb	r3, [r5, #0]
 80093b8:	f10a 0301 	add.w	r3, sl, #1
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8241 	beq.w	8009848 <_dtoa_r+0xb18>
 80093c6:	601d      	str	r5, [r3, #0]
 80093c8:	e23e      	b.n	8009848 <_dtoa_r+0xb18>
 80093ca:	f8cd a020 	str.w	sl, [sp, #32]
 80093ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093d2:	2a39      	cmp	r2, #57	; 0x39
 80093d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80093d8:	d108      	bne.n	80093ec <_dtoa_r+0x6bc>
 80093da:	459b      	cmp	fp, r3
 80093dc:	d10a      	bne.n	80093f4 <_dtoa_r+0x6c4>
 80093de:	9b08      	ldr	r3, [sp, #32]
 80093e0:	3301      	adds	r3, #1
 80093e2:	9308      	str	r3, [sp, #32]
 80093e4:	2330      	movs	r3, #48	; 0x30
 80093e6:	f88b 3000 	strb.w	r3, [fp]
 80093ea:	465b      	mov	r3, fp
 80093ec:	781a      	ldrb	r2, [r3, #0]
 80093ee:	3201      	adds	r2, #1
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	e78c      	b.n	800930e <_dtoa_r+0x5de>
 80093f4:	461d      	mov	r5, r3
 80093f6:	e7ea      	b.n	80093ce <_dtoa_r+0x69e>
 80093f8:	2200      	movs	r2, #0
 80093fa:	4b9b      	ldr	r3, [pc, #620]	; (8009668 <_dtoa_r+0x938>)
 80093fc:	f7f7 f91c 	bl	8000638 <__aeabi_dmul>
 8009400:	2200      	movs	r2, #0
 8009402:	2300      	movs	r3, #0
 8009404:	4606      	mov	r6, r0
 8009406:	460f      	mov	r7, r1
 8009408:	f7f7 fb7e 	bl	8000b08 <__aeabi_dcmpeq>
 800940c:	2800      	cmp	r0, #0
 800940e:	d09a      	beq.n	8009346 <_dtoa_r+0x616>
 8009410:	e7cb      	b.n	80093aa <_dtoa_r+0x67a>
 8009412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009414:	2a00      	cmp	r2, #0
 8009416:	f000 808b 	beq.w	8009530 <_dtoa_r+0x800>
 800941a:	9a06      	ldr	r2, [sp, #24]
 800941c:	2a01      	cmp	r2, #1
 800941e:	dc6e      	bgt.n	80094fe <_dtoa_r+0x7ce>
 8009420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009422:	2a00      	cmp	r2, #0
 8009424:	d067      	beq.n	80094f6 <_dtoa_r+0x7c6>
 8009426:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800942a:	9f07      	ldr	r7, [sp, #28]
 800942c:	9d05      	ldr	r5, [sp, #20]
 800942e:	9a05      	ldr	r2, [sp, #20]
 8009430:	2101      	movs	r1, #1
 8009432:	441a      	add	r2, r3
 8009434:	4620      	mov	r0, r4
 8009436:	9205      	str	r2, [sp, #20]
 8009438:	4498      	add	r8, r3
 800943a:	f000 fea2 	bl	800a182 <__i2b>
 800943e:	4606      	mov	r6, r0
 8009440:	2d00      	cmp	r5, #0
 8009442:	dd0c      	ble.n	800945e <_dtoa_r+0x72e>
 8009444:	f1b8 0f00 	cmp.w	r8, #0
 8009448:	dd09      	ble.n	800945e <_dtoa_r+0x72e>
 800944a:	4545      	cmp	r5, r8
 800944c:	9a05      	ldr	r2, [sp, #20]
 800944e:	462b      	mov	r3, r5
 8009450:	bfa8      	it	ge
 8009452:	4643      	movge	r3, r8
 8009454:	1ad2      	subs	r2, r2, r3
 8009456:	9205      	str	r2, [sp, #20]
 8009458:	1aed      	subs	r5, r5, r3
 800945a:	eba8 0803 	sub.w	r8, r8, r3
 800945e:	9b07      	ldr	r3, [sp, #28]
 8009460:	b1eb      	cbz	r3, 800949e <_dtoa_r+0x76e>
 8009462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009464:	2b00      	cmp	r3, #0
 8009466:	d067      	beq.n	8009538 <_dtoa_r+0x808>
 8009468:	b18f      	cbz	r7, 800948e <_dtoa_r+0x75e>
 800946a:	4631      	mov	r1, r6
 800946c:	463a      	mov	r2, r7
 800946e:	4620      	mov	r0, r4
 8009470:	f000 ff26 	bl	800a2c0 <__pow5mult>
 8009474:	9a04      	ldr	r2, [sp, #16]
 8009476:	4601      	mov	r1, r0
 8009478:	4606      	mov	r6, r0
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fe8a 	bl	800a194 <__multiply>
 8009480:	9904      	ldr	r1, [sp, #16]
 8009482:	9008      	str	r0, [sp, #32]
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fd9e 	bl	8009fc6 <_Bfree>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	9b07      	ldr	r3, [sp, #28]
 8009490:	1bda      	subs	r2, r3, r7
 8009492:	d004      	beq.n	800949e <_dtoa_r+0x76e>
 8009494:	9904      	ldr	r1, [sp, #16]
 8009496:	4620      	mov	r0, r4
 8009498:	f000 ff12 	bl	800a2c0 <__pow5mult>
 800949c:	9004      	str	r0, [sp, #16]
 800949e:	2101      	movs	r1, #1
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 fe6e 	bl	800a182 <__i2b>
 80094a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a8:	4607      	mov	r7, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 81d0 	beq.w	8009850 <_dtoa_r+0xb20>
 80094b0:	461a      	mov	r2, r3
 80094b2:	4601      	mov	r1, r0
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 ff03 	bl	800a2c0 <__pow5mult>
 80094ba:	9b06      	ldr	r3, [sp, #24]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	4607      	mov	r7, r0
 80094c0:	dc40      	bgt.n	8009544 <_dtoa_r+0x814>
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d139      	bne.n	800953c <_dtoa_r+0x80c>
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d136      	bne.n	8009540 <_dtoa_r+0x810>
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	b12b      	cbz	r3, 80094ea <_dtoa_r+0x7ba>
 80094de:	9b05      	ldr	r3, [sp, #20]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	f108 0801 	add.w	r8, r8, #1
 80094e8:	2301      	movs	r3, #1
 80094ea:	9307      	str	r3, [sp, #28]
 80094ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d12a      	bne.n	8009548 <_dtoa_r+0x818>
 80094f2:	2001      	movs	r0, #1
 80094f4:	e030      	b.n	8009558 <_dtoa_r+0x828>
 80094f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094fc:	e795      	b.n	800942a <_dtoa_r+0x6fa>
 80094fe:	9b07      	ldr	r3, [sp, #28]
 8009500:	f109 37ff 	add.w	r7, r9, #4294967295
 8009504:	42bb      	cmp	r3, r7
 8009506:	bfbf      	itttt	lt
 8009508:	9b07      	ldrlt	r3, [sp, #28]
 800950a:	9707      	strlt	r7, [sp, #28]
 800950c:	1afa      	sublt	r2, r7, r3
 800950e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009510:	bfbb      	ittet	lt
 8009512:	189b      	addlt	r3, r3, r2
 8009514:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009516:	1bdf      	subge	r7, r3, r7
 8009518:	2700      	movlt	r7, #0
 800951a:	f1b9 0f00 	cmp.w	r9, #0
 800951e:	bfb5      	itete	lt
 8009520:	9b05      	ldrlt	r3, [sp, #20]
 8009522:	9d05      	ldrge	r5, [sp, #20]
 8009524:	eba3 0509 	sublt.w	r5, r3, r9
 8009528:	464b      	movge	r3, r9
 800952a:	bfb8      	it	lt
 800952c:	2300      	movlt	r3, #0
 800952e:	e77e      	b.n	800942e <_dtoa_r+0x6fe>
 8009530:	9f07      	ldr	r7, [sp, #28]
 8009532:	9d05      	ldr	r5, [sp, #20]
 8009534:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009536:	e783      	b.n	8009440 <_dtoa_r+0x710>
 8009538:	9a07      	ldr	r2, [sp, #28]
 800953a:	e7ab      	b.n	8009494 <_dtoa_r+0x764>
 800953c:	2300      	movs	r3, #0
 800953e:	e7d4      	b.n	80094ea <_dtoa_r+0x7ba>
 8009540:	9b00      	ldr	r3, [sp, #0]
 8009542:	e7d2      	b.n	80094ea <_dtoa_r+0x7ba>
 8009544:	2300      	movs	r3, #0
 8009546:	9307      	str	r3, [sp, #28]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800954e:	6918      	ldr	r0, [r3, #16]
 8009550:	f000 fdc9 	bl	800a0e6 <__hi0bits>
 8009554:	f1c0 0020 	rsb	r0, r0, #32
 8009558:	4440      	add	r0, r8
 800955a:	f010 001f 	ands.w	r0, r0, #31
 800955e:	d047      	beq.n	80095f0 <_dtoa_r+0x8c0>
 8009560:	f1c0 0320 	rsb	r3, r0, #32
 8009564:	2b04      	cmp	r3, #4
 8009566:	dd3b      	ble.n	80095e0 <_dtoa_r+0x8b0>
 8009568:	9b05      	ldr	r3, [sp, #20]
 800956a:	f1c0 001c 	rsb	r0, r0, #28
 800956e:	4403      	add	r3, r0
 8009570:	9305      	str	r3, [sp, #20]
 8009572:	4405      	add	r5, r0
 8009574:	4480      	add	r8, r0
 8009576:	9b05      	ldr	r3, [sp, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	dd05      	ble.n	8009588 <_dtoa_r+0x858>
 800957c:	461a      	mov	r2, r3
 800957e:	9904      	ldr	r1, [sp, #16]
 8009580:	4620      	mov	r0, r4
 8009582:	f000 feeb 	bl	800a35c <__lshift>
 8009586:	9004      	str	r0, [sp, #16]
 8009588:	f1b8 0f00 	cmp.w	r8, #0
 800958c:	dd05      	ble.n	800959a <_dtoa_r+0x86a>
 800958e:	4639      	mov	r1, r7
 8009590:	4642      	mov	r2, r8
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fee2 	bl	800a35c <__lshift>
 8009598:	4607      	mov	r7, r0
 800959a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800959c:	b353      	cbz	r3, 80095f4 <_dtoa_r+0x8c4>
 800959e:	4639      	mov	r1, r7
 80095a0:	9804      	ldr	r0, [sp, #16]
 80095a2:	f000 ff2f 	bl	800a404 <__mcmp>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	da24      	bge.n	80095f4 <_dtoa_r+0x8c4>
 80095aa:	2300      	movs	r3, #0
 80095ac:	220a      	movs	r2, #10
 80095ae:	9904      	ldr	r1, [sp, #16]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fd1f 	bl	8009ff4 <__multadd>
 80095b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b8:	9004      	str	r0, [sp, #16]
 80095ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 814d 	beq.w	800985e <_dtoa_r+0xb2e>
 80095c4:	2300      	movs	r3, #0
 80095c6:	4631      	mov	r1, r6
 80095c8:	220a      	movs	r2, #10
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fd12 	bl	8009ff4 <__multadd>
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	dc4f      	bgt.n	8009678 <_dtoa_r+0x948>
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	dd4c      	ble.n	8009678 <_dtoa_r+0x948>
 80095de:	e011      	b.n	8009604 <_dtoa_r+0x8d4>
 80095e0:	d0c9      	beq.n	8009576 <_dtoa_r+0x846>
 80095e2:	9a05      	ldr	r2, [sp, #20]
 80095e4:	331c      	adds	r3, #28
 80095e6:	441a      	add	r2, r3
 80095e8:	9205      	str	r2, [sp, #20]
 80095ea:	441d      	add	r5, r3
 80095ec:	4498      	add	r8, r3
 80095ee:	e7c2      	b.n	8009576 <_dtoa_r+0x846>
 80095f0:	4603      	mov	r3, r0
 80095f2:	e7f6      	b.n	80095e2 <_dtoa_r+0x8b2>
 80095f4:	f1b9 0f00 	cmp.w	r9, #0
 80095f8:	dc38      	bgt.n	800966c <_dtoa_r+0x93c>
 80095fa:	9b06      	ldr	r3, [sp, #24]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	dd35      	ble.n	800966c <_dtoa_r+0x93c>
 8009600:	f8cd 9008 	str.w	r9, [sp, #8]
 8009604:	9b02      	ldr	r3, [sp, #8]
 8009606:	b963      	cbnz	r3, 8009622 <_dtoa_r+0x8f2>
 8009608:	4639      	mov	r1, r7
 800960a:	2205      	movs	r2, #5
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fcf1 	bl	8009ff4 <__multadd>
 8009612:	4601      	mov	r1, r0
 8009614:	4607      	mov	r7, r0
 8009616:	9804      	ldr	r0, [sp, #16]
 8009618:	f000 fef4 	bl	800a404 <__mcmp>
 800961c:	2800      	cmp	r0, #0
 800961e:	f73f adcc 	bgt.w	80091ba <_dtoa_r+0x48a>
 8009622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009624:	465d      	mov	r5, fp
 8009626:	ea6f 0a03 	mvn.w	sl, r3
 800962a:	f04f 0900 	mov.w	r9, #0
 800962e:	4639      	mov	r1, r7
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fcc8 	bl	8009fc6 <_Bfree>
 8009636:	2e00      	cmp	r6, #0
 8009638:	f43f aeb7 	beq.w	80093aa <_dtoa_r+0x67a>
 800963c:	f1b9 0f00 	cmp.w	r9, #0
 8009640:	d005      	beq.n	800964e <_dtoa_r+0x91e>
 8009642:	45b1      	cmp	r9, r6
 8009644:	d003      	beq.n	800964e <_dtoa_r+0x91e>
 8009646:	4649      	mov	r1, r9
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fcbc 	bl	8009fc6 <_Bfree>
 800964e:	4631      	mov	r1, r6
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fcb8 	bl	8009fc6 <_Bfree>
 8009656:	e6a8      	b.n	80093aa <_dtoa_r+0x67a>
 8009658:	2700      	movs	r7, #0
 800965a:	463e      	mov	r6, r7
 800965c:	e7e1      	b.n	8009622 <_dtoa_r+0x8f2>
 800965e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009662:	463e      	mov	r6, r7
 8009664:	e5a9      	b.n	80091ba <_dtoa_r+0x48a>
 8009666:	bf00      	nop
 8009668:	40240000 	.word	0x40240000
 800966c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 80fa 	beq.w	800986c <_dtoa_r+0xb3c>
 8009678:	2d00      	cmp	r5, #0
 800967a:	dd05      	ble.n	8009688 <_dtoa_r+0x958>
 800967c:	4631      	mov	r1, r6
 800967e:	462a      	mov	r2, r5
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fe6b 	bl	800a35c <__lshift>
 8009686:	4606      	mov	r6, r0
 8009688:	9b07      	ldr	r3, [sp, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d04c      	beq.n	8009728 <_dtoa_r+0x9f8>
 800968e:	6871      	ldr	r1, [r6, #4]
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fc64 	bl	8009f5e <_Balloc>
 8009696:	6932      	ldr	r2, [r6, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	4605      	mov	r5, r0
 800969c:	0092      	lsls	r2, r2, #2
 800969e:	f106 010c 	add.w	r1, r6, #12
 80096a2:	300c      	adds	r0, #12
 80096a4:	f000 fc50 	bl	8009f48 <memcpy>
 80096a8:	2201      	movs	r2, #1
 80096aa:	4629      	mov	r1, r5
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fe55 	bl	800a35c <__lshift>
 80096b2:	9b00      	ldr	r3, [sp, #0]
 80096b4:	f8cd b014 	str.w	fp, [sp, #20]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	46b1      	mov	r9, r6
 80096be:	9307      	str	r3, [sp, #28]
 80096c0:	4606      	mov	r6, r0
 80096c2:	4639      	mov	r1, r7
 80096c4:	9804      	ldr	r0, [sp, #16]
 80096c6:	f7ff faa5 	bl	8008c14 <quorem>
 80096ca:	4649      	mov	r1, r9
 80096cc:	4605      	mov	r5, r0
 80096ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80096d2:	9804      	ldr	r0, [sp, #16]
 80096d4:	f000 fe96 	bl	800a404 <__mcmp>
 80096d8:	4632      	mov	r2, r6
 80096da:	9000      	str	r0, [sp, #0]
 80096dc:	4639      	mov	r1, r7
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 feaa 	bl	800a438 <__mdiff>
 80096e4:	68c3      	ldr	r3, [r0, #12]
 80096e6:	4602      	mov	r2, r0
 80096e8:	bb03      	cbnz	r3, 800972c <_dtoa_r+0x9fc>
 80096ea:	4601      	mov	r1, r0
 80096ec:	9008      	str	r0, [sp, #32]
 80096ee:	9804      	ldr	r0, [sp, #16]
 80096f0:	f000 fe88 	bl	800a404 <__mcmp>
 80096f4:	9a08      	ldr	r2, [sp, #32]
 80096f6:	4603      	mov	r3, r0
 80096f8:	4611      	mov	r1, r2
 80096fa:	4620      	mov	r0, r4
 80096fc:	9308      	str	r3, [sp, #32]
 80096fe:	f000 fc62 	bl	8009fc6 <_Bfree>
 8009702:	9b08      	ldr	r3, [sp, #32]
 8009704:	b9a3      	cbnz	r3, 8009730 <_dtoa_r+0xa00>
 8009706:	9a06      	ldr	r2, [sp, #24]
 8009708:	b992      	cbnz	r2, 8009730 <_dtoa_r+0xa00>
 800970a:	9a07      	ldr	r2, [sp, #28]
 800970c:	b982      	cbnz	r2, 8009730 <_dtoa_r+0xa00>
 800970e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009712:	d029      	beq.n	8009768 <_dtoa_r+0xa38>
 8009714:	9b00      	ldr	r3, [sp, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	dd01      	ble.n	800971e <_dtoa_r+0x9ee>
 800971a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800971e:	9b05      	ldr	r3, [sp, #20]
 8009720:	1c5d      	adds	r5, r3, #1
 8009722:	f883 8000 	strb.w	r8, [r3]
 8009726:	e782      	b.n	800962e <_dtoa_r+0x8fe>
 8009728:	4630      	mov	r0, r6
 800972a:	e7c2      	b.n	80096b2 <_dtoa_r+0x982>
 800972c:	2301      	movs	r3, #1
 800972e:	e7e3      	b.n	80096f8 <_dtoa_r+0x9c8>
 8009730:	9a00      	ldr	r2, [sp, #0]
 8009732:	2a00      	cmp	r2, #0
 8009734:	db04      	blt.n	8009740 <_dtoa_r+0xa10>
 8009736:	d125      	bne.n	8009784 <_dtoa_r+0xa54>
 8009738:	9a06      	ldr	r2, [sp, #24]
 800973a:	bb1a      	cbnz	r2, 8009784 <_dtoa_r+0xa54>
 800973c:	9a07      	ldr	r2, [sp, #28]
 800973e:	bb0a      	cbnz	r2, 8009784 <_dtoa_r+0xa54>
 8009740:	2b00      	cmp	r3, #0
 8009742:	ddec      	ble.n	800971e <_dtoa_r+0x9ee>
 8009744:	2201      	movs	r2, #1
 8009746:	9904      	ldr	r1, [sp, #16]
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fe07 	bl	800a35c <__lshift>
 800974e:	4639      	mov	r1, r7
 8009750:	9004      	str	r0, [sp, #16]
 8009752:	f000 fe57 	bl	800a404 <__mcmp>
 8009756:	2800      	cmp	r0, #0
 8009758:	dc03      	bgt.n	8009762 <_dtoa_r+0xa32>
 800975a:	d1e0      	bne.n	800971e <_dtoa_r+0x9ee>
 800975c:	f018 0f01 	tst.w	r8, #1
 8009760:	d0dd      	beq.n	800971e <_dtoa_r+0x9ee>
 8009762:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009766:	d1d8      	bne.n	800971a <_dtoa_r+0x9ea>
 8009768:	9b05      	ldr	r3, [sp, #20]
 800976a:	9a05      	ldr	r2, [sp, #20]
 800976c:	1c5d      	adds	r5, r3, #1
 800976e:	2339      	movs	r3, #57	; 0x39
 8009770:	7013      	strb	r3, [r2, #0]
 8009772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009776:	2b39      	cmp	r3, #57	; 0x39
 8009778:	f105 32ff 	add.w	r2, r5, #4294967295
 800977c:	d04f      	beq.n	800981e <_dtoa_r+0xaee>
 800977e:	3301      	adds	r3, #1
 8009780:	7013      	strb	r3, [r2, #0]
 8009782:	e754      	b.n	800962e <_dtoa_r+0x8fe>
 8009784:	9a05      	ldr	r2, [sp, #20]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f102 0501 	add.w	r5, r2, #1
 800978c:	dd06      	ble.n	800979c <_dtoa_r+0xa6c>
 800978e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009792:	d0e9      	beq.n	8009768 <_dtoa_r+0xa38>
 8009794:	f108 0801 	add.w	r8, r8, #1
 8009798:	9b05      	ldr	r3, [sp, #20]
 800979a:	e7c2      	b.n	8009722 <_dtoa_r+0x9f2>
 800979c:	9a02      	ldr	r2, [sp, #8]
 800979e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80097a2:	eba5 030b 	sub.w	r3, r5, fp
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d021      	beq.n	80097ee <_dtoa_r+0xabe>
 80097aa:	2300      	movs	r3, #0
 80097ac:	220a      	movs	r2, #10
 80097ae:	9904      	ldr	r1, [sp, #16]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fc1f 	bl	8009ff4 <__multadd>
 80097b6:	45b1      	cmp	r9, r6
 80097b8:	9004      	str	r0, [sp, #16]
 80097ba:	f04f 0300 	mov.w	r3, #0
 80097be:	f04f 020a 	mov.w	r2, #10
 80097c2:	4649      	mov	r1, r9
 80097c4:	4620      	mov	r0, r4
 80097c6:	d105      	bne.n	80097d4 <_dtoa_r+0xaa4>
 80097c8:	f000 fc14 	bl	8009ff4 <__multadd>
 80097cc:	4681      	mov	r9, r0
 80097ce:	4606      	mov	r6, r0
 80097d0:	9505      	str	r5, [sp, #20]
 80097d2:	e776      	b.n	80096c2 <_dtoa_r+0x992>
 80097d4:	f000 fc0e 	bl	8009ff4 <__multadd>
 80097d8:	4631      	mov	r1, r6
 80097da:	4681      	mov	r9, r0
 80097dc:	2300      	movs	r3, #0
 80097de:	220a      	movs	r2, #10
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fc07 	bl	8009ff4 <__multadd>
 80097e6:	4606      	mov	r6, r0
 80097e8:	e7f2      	b.n	80097d0 <_dtoa_r+0xaa0>
 80097ea:	f04f 0900 	mov.w	r9, #0
 80097ee:	2201      	movs	r2, #1
 80097f0:	9904      	ldr	r1, [sp, #16]
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fdb2 	bl	800a35c <__lshift>
 80097f8:	4639      	mov	r1, r7
 80097fa:	9004      	str	r0, [sp, #16]
 80097fc:	f000 fe02 	bl	800a404 <__mcmp>
 8009800:	2800      	cmp	r0, #0
 8009802:	dcb6      	bgt.n	8009772 <_dtoa_r+0xa42>
 8009804:	d102      	bne.n	800980c <_dtoa_r+0xadc>
 8009806:	f018 0f01 	tst.w	r8, #1
 800980a:	d1b2      	bne.n	8009772 <_dtoa_r+0xa42>
 800980c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009810:	2b30      	cmp	r3, #48	; 0x30
 8009812:	f105 32ff 	add.w	r2, r5, #4294967295
 8009816:	f47f af0a 	bne.w	800962e <_dtoa_r+0x8fe>
 800981a:	4615      	mov	r5, r2
 800981c:	e7f6      	b.n	800980c <_dtoa_r+0xadc>
 800981e:	4593      	cmp	fp, r2
 8009820:	d105      	bne.n	800982e <_dtoa_r+0xafe>
 8009822:	2331      	movs	r3, #49	; 0x31
 8009824:	f10a 0a01 	add.w	sl, sl, #1
 8009828:	f88b 3000 	strb.w	r3, [fp]
 800982c:	e6ff      	b.n	800962e <_dtoa_r+0x8fe>
 800982e:	4615      	mov	r5, r2
 8009830:	e79f      	b.n	8009772 <_dtoa_r+0xa42>
 8009832:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009898 <_dtoa_r+0xb68>
 8009836:	e007      	b.n	8009848 <_dtoa_r+0xb18>
 8009838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800983a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800989c <_dtoa_r+0xb6c>
 800983e:	b11b      	cbz	r3, 8009848 <_dtoa_r+0xb18>
 8009840:	f10b 0308 	add.w	r3, fp, #8
 8009844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	4658      	mov	r0, fp
 800984a:	b017      	add	sp, #92	; 0x5c
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009850:	9b06      	ldr	r3, [sp, #24]
 8009852:	2b01      	cmp	r3, #1
 8009854:	f77f ae35 	ble.w	80094c2 <_dtoa_r+0x792>
 8009858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800985a:	9307      	str	r3, [sp, #28]
 800985c:	e649      	b.n	80094f2 <_dtoa_r+0x7c2>
 800985e:	9b02      	ldr	r3, [sp, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	dc03      	bgt.n	800986c <_dtoa_r+0xb3c>
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	2b02      	cmp	r3, #2
 8009868:	f73f aecc 	bgt.w	8009604 <_dtoa_r+0x8d4>
 800986c:	465d      	mov	r5, fp
 800986e:	4639      	mov	r1, r7
 8009870:	9804      	ldr	r0, [sp, #16]
 8009872:	f7ff f9cf 	bl	8008c14 <quorem>
 8009876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800987a:	f805 8b01 	strb.w	r8, [r5], #1
 800987e:	9a02      	ldr	r2, [sp, #8]
 8009880:	eba5 030b 	sub.w	r3, r5, fp
 8009884:	429a      	cmp	r2, r3
 8009886:	ddb0      	ble.n	80097ea <_dtoa_r+0xaba>
 8009888:	2300      	movs	r3, #0
 800988a:	220a      	movs	r2, #10
 800988c:	9904      	ldr	r1, [sp, #16]
 800988e:	4620      	mov	r0, r4
 8009890:	f000 fbb0 	bl	8009ff4 <__multadd>
 8009894:	9004      	str	r0, [sp, #16]
 8009896:	e7ea      	b.n	800986e <_dtoa_r+0xb3e>
 8009898:	0800aca4 	.word	0x0800aca4
 800989c:	0800ad20 	.word	0x0800ad20

080098a0 <rshift>:
 80098a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a2:	6906      	ldr	r6, [r0, #16]
 80098a4:	114b      	asrs	r3, r1, #5
 80098a6:	429e      	cmp	r6, r3
 80098a8:	f100 0414 	add.w	r4, r0, #20
 80098ac:	dd30      	ble.n	8009910 <rshift+0x70>
 80098ae:	f011 011f 	ands.w	r1, r1, #31
 80098b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80098b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80098ba:	d108      	bne.n	80098ce <rshift+0x2e>
 80098bc:	4621      	mov	r1, r4
 80098be:	42b2      	cmp	r2, r6
 80098c0:	460b      	mov	r3, r1
 80098c2:	d211      	bcs.n	80098e8 <rshift+0x48>
 80098c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80098c8:	f841 3b04 	str.w	r3, [r1], #4
 80098cc:	e7f7      	b.n	80098be <rshift+0x1e>
 80098ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80098d2:	f1c1 0c20 	rsb	ip, r1, #32
 80098d6:	40cd      	lsrs	r5, r1
 80098d8:	3204      	adds	r2, #4
 80098da:	4623      	mov	r3, r4
 80098dc:	42b2      	cmp	r2, r6
 80098de:	4617      	mov	r7, r2
 80098e0:	d30c      	bcc.n	80098fc <rshift+0x5c>
 80098e2:	601d      	str	r5, [r3, #0]
 80098e4:	b105      	cbz	r5, 80098e8 <rshift+0x48>
 80098e6:	3304      	adds	r3, #4
 80098e8:	1b1a      	subs	r2, r3, r4
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098f0:	bf08      	it	eq
 80098f2:	2300      	moveq	r3, #0
 80098f4:	6102      	str	r2, [r0, #16]
 80098f6:	bf08      	it	eq
 80098f8:	6143      	streq	r3, [r0, #20]
 80098fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fc:	683f      	ldr	r7, [r7, #0]
 80098fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8009902:	433d      	orrs	r5, r7
 8009904:	f843 5b04 	str.w	r5, [r3], #4
 8009908:	f852 5b04 	ldr.w	r5, [r2], #4
 800990c:	40cd      	lsrs	r5, r1
 800990e:	e7e5      	b.n	80098dc <rshift+0x3c>
 8009910:	4623      	mov	r3, r4
 8009912:	e7e9      	b.n	80098e8 <rshift+0x48>

08009914 <__hexdig_fun>:
 8009914:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009918:	2b09      	cmp	r3, #9
 800991a:	d802      	bhi.n	8009922 <__hexdig_fun+0xe>
 800991c:	3820      	subs	r0, #32
 800991e:	b2c0      	uxtb	r0, r0
 8009920:	4770      	bx	lr
 8009922:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009926:	2b05      	cmp	r3, #5
 8009928:	d801      	bhi.n	800992e <__hexdig_fun+0x1a>
 800992a:	3847      	subs	r0, #71	; 0x47
 800992c:	e7f7      	b.n	800991e <__hexdig_fun+0xa>
 800992e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009932:	2b05      	cmp	r3, #5
 8009934:	d801      	bhi.n	800993a <__hexdig_fun+0x26>
 8009936:	3827      	subs	r0, #39	; 0x27
 8009938:	e7f1      	b.n	800991e <__hexdig_fun+0xa>
 800993a:	2000      	movs	r0, #0
 800993c:	4770      	bx	lr

0800993e <__gethex>:
 800993e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009942:	b08b      	sub	sp, #44	; 0x2c
 8009944:	468a      	mov	sl, r1
 8009946:	9002      	str	r0, [sp, #8]
 8009948:	9816      	ldr	r0, [sp, #88]	; 0x58
 800994a:	9306      	str	r3, [sp, #24]
 800994c:	4690      	mov	r8, r2
 800994e:	f000 fad0 	bl	8009ef2 <__localeconv_l>
 8009952:	6803      	ldr	r3, [r0, #0]
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	4618      	mov	r0, r3
 8009958:	f7f6 fc5a 	bl	8000210 <strlen>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	9001      	str	r0, [sp, #4]
 8009960:	4403      	add	r3, r0
 8009962:	f04f 0b00 	mov.w	fp, #0
 8009966:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	f8da 3000 	ldr.w	r3, [sl]
 8009970:	3302      	adds	r3, #2
 8009972:	461f      	mov	r7, r3
 8009974:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009978:	2830      	cmp	r0, #48	; 0x30
 800997a:	d06c      	beq.n	8009a56 <__gethex+0x118>
 800997c:	f7ff ffca 	bl	8009914 <__hexdig_fun>
 8009980:	4604      	mov	r4, r0
 8009982:	2800      	cmp	r0, #0
 8009984:	d16a      	bne.n	8009a5c <__gethex+0x11e>
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	9903      	ldr	r1, [sp, #12]
 800998a:	4638      	mov	r0, r7
 800998c:	f001 f8fe 	bl	800ab8c <strncmp>
 8009990:	2800      	cmp	r0, #0
 8009992:	d166      	bne.n	8009a62 <__gethex+0x124>
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	5cf8      	ldrb	r0, [r7, r3]
 8009998:	18fe      	adds	r6, r7, r3
 800999a:	f7ff ffbb 	bl	8009914 <__hexdig_fun>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d062      	beq.n	8009a68 <__gethex+0x12a>
 80099a2:	4633      	mov	r3, r6
 80099a4:	7818      	ldrb	r0, [r3, #0]
 80099a6:	2830      	cmp	r0, #48	; 0x30
 80099a8:	461f      	mov	r7, r3
 80099aa:	f103 0301 	add.w	r3, r3, #1
 80099ae:	d0f9      	beq.n	80099a4 <__gethex+0x66>
 80099b0:	f7ff ffb0 	bl	8009914 <__hexdig_fun>
 80099b4:	fab0 f580 	clz	r5, r0
 80099b8:	096d      	lsrs	r5, r5, #5
 80099ba:	4634      	mov	r4, r6
 80099bc:	f04f 0b01 	mov.w	fp, #1
 80099c0:	463a      	mov	r2, r7
 80099c2:	4616      	mov	r6, r2
 80099c4:	3201      	adds	r2, #1
 80099c6:	7830      	ldrb	r0, [r6, #0]
 80099c8:	f7ff ffa4 	bl	8009914 <__hexdig_fun>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d1f8      	bne.n	80099c2 <__gethex+0x84>
 80099d0:	9a01      	ldr	r2, [sp, #4]
 80099d2:	9903      	ldr	r1, [sp, #12]
 80099d4:	4630      	mov	r0, r6
 80099d6:	f001 f8d9 	bl	800ab8c <strncmp>
 80099da:	b950      	cbnz	r0, 80099f2 <__gethex+0xb4>
 80099dc:	b954      	cbnz	r4, 80099f4 <__gethex+0xb6>
 80099de:	9b01      	ldr	r3, [sp, #4]
 80099e0:	18f4      	adds	r4, r6, r3
 80099e2:	4622      	mov	r2, r4
 80099e4:	4616      	mov	r6, r2
 80099e6:	3201      	adds	r2, #1
 80099e8:	7830      	ldrb	r0, [r6, #0]
 80099ea:	f7ff ff93 	bl	8009914 <__hexdig_fun>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d1f8      	bne.n	80099e4 <__gethex+0xa6>
 80099f2:	b10c      	cbz	r4, 80099f8 <__gethex+0xba>
 80099f4:	1ba4      	subs	r4, r4, r6
 80099f6:	00a4      	lsls	r4, r4, #2
 80099f8:	7833      	ldrb	r3, [r6, #0]
 80099fa:	2b50      	cmp	r3, #80	; 0x50
 80099fc:	d001      	beq.n	8009a02 <__gethex+0xc4>
 80099fe:	2b70      	cmp	r3, #112	; 0x70
 8009a00:	d140      	bne.n	8009a84 <__gethex+0x146>
 8009a02:	7873      	ldrb	r3, [r6, #1]
 8009a04:	2b2b      	cmp	r3, #43	; 0x2b
 8009a06:	d031      	beq.n	8009a6c <__gethex+0x12e>
 8009a08:	2b2d      	cmp	r3, #45	; 0x2d
 8009a0a:	d033      	beq.n	8009a74 <__gethex+0x136>
 8009a0c:	1c71      	adds	r1, r6, #1
 8009a0e:	f04f 0900 	mov.w	r9, #0
 8009a12:	7808      	ldrb	r0, [r1, #0]
 8009a14:	f7ff ff7e 	bl	8009914 <__hexdig_fun>
 8009a18:	1e43      	subs	r3, r0, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b18      	cmp	r3, #24
 8009a1e:	d831      	bhi.n	8009a84 <__gethex+0x146>
 8009a20:	f1a0 0210 	sub.w	r2, r0, #16
 8009a24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a28:	f7ff ff74 	bl	8009914 <__hexdig_fun>
 8009a2c:	1e43      	subs	r3, r0, #1
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b18      	cmp	r3, #24
 8009a32:	d922      	bls.n	8009a7a <__gethex+0x13c>
 8009a34:	f1b9 0f00 	cmp.w	r9, #0
 8009a38:	d000      	beq.n	8009a3c <__gethex+0xfe>
 8009a3a:	4252      	negs	r2, r2
 8009a3c:	4414      	add	r4, r2
 8009a3e:	f8ca 1000 	str.w	r1, [sl]
 8009a42:	b30d      	cbz	r5, 8009a88 <__gethex+0x14a>
 8009a44:	f1bb 0f00 	cmp.w	fp, #0
 8009a48:	bf0c      	ite	eq
 8009a4a:	2706      	moveq	r7, #6
 8009a4c:	2700      	movne	r7, #0
 8009a4e:	4638      	mov	r0, r7
 8009a50:	b00b      	add	sp, #44	; 0x2c
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	f10b 0b01 	add.w	fp, fp, #1
 8009a5a:	e78a      	b.n	8009972 <__gethex+0x34>
 8009a5c:	2500      	movs	r5, #0
 8009a5e:	462c      	mov	r4, r5
 8009a60:	e7ae      	b.n	80099c0 <__gethex+0x82>
 8009a62:	463e      	mov	r6, r7
 8009a64:	2501      	movs	r5, #1
 8009a66:	e7c7      	b.n	80099f8 <__gethex+0xba>
 8009a68:	4604      	mov	r4, r0
 8009a6a:	e7fb      	b.n	8009a64 <__gethex+0x126>
 8009a6c:	f04f 0900 	mov.w	r9, #0
 8009a70:	1cb1      	adds	r1, r6, #2
 8009a72:	e7ce      	b.n	8009a12 <__gethex+0xd4>
 8009a74:	f04f 0901 	mov.w	r9, #1
 8009a78:	e7fa      	b.n	8009a70 <__gethex+0x132>
 8009a7a:	230a      	movs	r3, #10
 8009a7c:	fb03 0202 	mla	r2, r3, r2, r0
 8009a80:	3a10      	subs	r2, #16
 8009a82:	e7cf      	b.n	8009a24 <__gethex+0xe6>
 8009a84:	4631      	mov	r1, r6
 8009a86:	e7da      	b.n	8009a3e <__gethex+0x100>
 8009a88:	1bf3      	subs	r3, r6, r7
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	2b07      	cmp	r3, #7
 8009a90:	dc49      	bgt.n	8009b26 <__gethex+0x1e8>
 8009a92:	9802      	ldr	r0, [sp, #8]
 8009a94:	f000 fa63 	bl	8009f5e <_Balloc>
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	f100 0914 	add.w	r9, r0, #20
 8009a9e:	f04f 0b00 	mov.w	fp, #0
 8009aa2:	f1c3 0301 	rsb	r3, r3, #1
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	f8cd 9010 	str.w	r9, [sp, #16]
 8009aac:	46da      	mov	sl, fp
 8009aae:	9308      	str	r3, [sp, #32]
 8009ab0:	42b7      	cmp	r7, r6
 8009ab2:	d33b      	bcc.n	8009b2c <__gethex+0x1ee>
 8009ab4:	9804      	ldr	r0, [sp, #16]
 8009ab6:	f840 ab04 	str.w	sl, [r0], #4
 8009aba:	eba0 0009 	sub.w	r0, r0, r9
 8009abe:	1080      	asrs	r0, r0, #2
 8009ac0:	6128      	str	r0, [r5, #16]
 8009ac2:	0147      	lsls	r7, r0, #5
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	f000 fb0e 	bl	800a0e6 <__hi0bits>
 8009aca:	f8d8 6000 	ldr.w	r6, [r8]
 8009ace:	1a3f      	subs	r7, r7, r0
 8009ad0:	42b7      	cmp	r7, r6
 8009ad2:	dd64      	ble.n	8009b9e <__gethex+0x260>
 8009ad4:	1bbf      	subs	r7, r7, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f000 fe1d 	bl	800a718 <__any_on>
 8009ade:	4682      	mov	sl, r0
 8009ae0:	b178      	cbz	r0, 8009b02 <__gethex+0x1c4>
 8009ae2:	1e7b      	subs	r3, r7, #1
 8009ae4:	1159      	asrs	r1, r3, #5
 8009ae6:	f003 021f 	and.w	r2, r3, #31
 8009aea:	f04f 0a01 	mov.w	sl, #1
 8009aee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009af2:	fa0a f202 	lsl.w	r2, sl, r2
 8009af6:	420a      	tst	r2, r1
 8009af8:	d003      	beq.n	8009b02 <__gethex+0x1c4>
 8009afa:	4553      	cmp	r3, sl
 8009afc:	dc46      	bgt.n	8009b8c <__gethex+0x24e>
 8009afe:	f04f 0a02 	mov.w	sl, #2
 8009b02:	4639      	mov	r1, r7
 8009b04:	4628      	mov	r0, r5
 8009b06:	f7ff fecb 	bl	80098a0 <rshift>
 8009b0a:	443c      	add	r4, r7
 8009b0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	da52      	bge.n	8009bba <__gethex+0x27c>
 8009b14:	4629      	mov	r1, r5
 8009b16:	9802      	ldr	r0, [sp, #8]
 8009b18:	f000 fa55 	bl	8009fc6 <_Bfree>
 8009b1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	27a3      	movs	r7, #163	; 0xa3
 8009b24:	e793      	b.n	8009a4e <__gethex+0x110>
 8009b26:	3101      	adds	r1, #1
 8009b28:	105b      	asrs	r3, r3, #1
 8009b2a:	e7b0      	b.n	8009a8e <__gethex+0x150>
 8009b2c:	1e73      	subs	r3, r6, #1
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	9a07      	ldr	r2, [sp, #28]
 8009b32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d018      	beq.n	8009b6c <__gethex+0x22e>
 8009b3a:	f1bb 0f20 	cmp.w	fp, #32
 8009b3e:	d107      	bne.n	8009b50 <__gethex+0x212>
 8009b40:	9b04      	ldr	r3, [sp, #16]
 8009b42:	f8c3 a000 	str.w	sl, [r3]
 8009b46:	3304      	adds	r3, #4
 8009b48:	f04f 0a00 	mov.w	sl, #0
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	46d3      	mov	fp, sl
 8009b50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b54:	f7ff fede 	bl	8009914 <__hexdig_fun>
 8009b58:	f000 000f 	and.w	r0, r0, #15
 8009b5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b64:	f10b 0b04 	add.w	fp, fp, #4
 8009b68:	9b05      	ldr	r3, [sp, #20]
 8009b6a:	e00d      	b.n	8009b88 <__gethex+0x24a>
 8009b6c:	9b05      	ldr	r3, [sp, #20]
 8009b6e:	9a08      	ldr	r2, [sp, #32]
 8009b70:	4413      	add	r3, r2
 8009b72:	42bb      	cmp	r3, r7
 8009b74:	d3e1      	bcc.n	8009b3a <__gethex+0x1fc>
 8009b76:	4618      	mov	r0, r3
 8009b78:	9a01      	ldr	r2, [sp, #4]
 8009b7a:	9903      	ldr	r1, [sp, #12]
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	f001 f805 	bl	800ab8c <strncmp>
 8009b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d1d8      	bne.n	8009b3a <__gethex+0x1fc>
 8009b88:	461e      	mov	r6, r3
 8009b8a:	e791      	b.n	8009ab0 <__gethex+0x172>
 8009b8c:	1eb9      	subs	r1, r7, #2
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 fdc2 	bl	800a718 <__any_on>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d0b2      	beq.n	8009afe <__gethex+0x1c0>
 8009b98:	f04f 0a03 	mov.w	sl, #3
 8009b9c:	e7b1      	b.n	8009b02 <__gethex+0x1c4>
 8009b9e:	da09      	bge.n	8009bb4 <__gethex+0x276>
 8009ba0:	1bf7      	subs	r7, r6, r7
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	463a      	mov	r2, r7
 8009ba6:	9802      	ldr	r0, [sp, #8]
 8009ba8:	f000 fbd8 	bl	800a35c <__lshift>
 8009bac:	1be4      	subs	r4, r4, r7
 8009bae:	4605      	mov	r5, r0
 8009bb0:	f100 0914 	add.w	r9, r0, #20
 8009bb4:	f04f 0a00 	mov.w	sl, #0
 8009bb8:	e7a8      	b.n	8009b0c <__gethex+0x1ce>
 8009bba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009bbe:	42a0      	cmp	r0, r4
 8009bc0:	dd6a      	ble.n	8009c98 <__gethex+0x35a>
 8009bc2:	1b04      	subs	r4, r0, r4
 8009bc4:	42a6      	cmp	r6, r4
 8009bc6:	dc2e      	bgt.n	8009c26 <__gethex+0x2e8>
 8009bc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d022      	beq.n	8009c16 <__gethex+0x2d8>
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d024      	beq.n	8009c1e <__gethex+0x2e0>
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d115      	bne.n	8009c04 <__gethex+0x2c6>
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	d113      	bne.n	8009c04 <__gethex+0x2c6>
 8009bdc:	2e01      	cmp	r6, #1
 8009bde:	dc0b      	bgt.n	8009bf8 <__gethex+0x2ba>
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	2301      	movs	r3, #1
 8009bea:	612b      	str	r3, [r5, #16]
 8009bec:	f8c9 3000 	str.w	r3, [r9]
 8009bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bf2:	2762      	movs	r7, #98	; 0x62
 8009bf4:	601d      	str	r5, [r3, #0]
 8009bf6:	e72a      	b.n	8009a4e <__gethex+0x110>
 8009bf8:	1e71      	subs	r1, r6, #1
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f000 fd8c 	bl	800a718 <__any_on>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d1ed      	bne.n	8009be0 <__gethex+0x2a2>
 8009c04:	4629      	mov	r1, r5
 8009c06:	9802      	ldr	r0, [sp, #8]
 8009c08:	f000 f9dd 	bl	8009fc6 <_Bfree>
 8009c0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	2750      	movs	r7, #80	; 0x50
 8009c14:	e71b      	b.n	8009a4e <__gethex+0x110>
 8009c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0e1      	beq.n	8009be0 <__gethex+0x2a2>
 8009c1c:	e7f2      	b.n	8009c04 <__gethex+0x2c6>
 8009c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1dd      	bne.n	8009be0 <__gethex+0x2a2>
 8009c24:	e7ee      	b.n	8009c04 <__gethex+0x2c6>
 8009c26:	1e67      	subs	r7, r4, #1
 8009c28:	f1ba 0f00 	cmp.w	sl, #0
 8009c2c:	d131      	bne.n	8009c92 <__gethex+0x354>
 8009c2e:	b127      	cbz	r7, 8009c3a <__gethex+0x2fc>
 8009c30:	4639      	mov	r1, r7
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 fd70 	bl	800a718 <__any_on>
 8009c38:	4682      	mov	sl, r0
 8009c3a:	117a      	asrs	r2, r7, #5
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f007 071f 	and.w	r7, r7, #31
 8009c42:	fa03 f707 	lsl.w	r7, r3, r7
 8009c46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	421f      	tst	r7, r3
 8009c4e:	4628      	mov	r0, r5
 8009c50:	bf18      	it	ne
 8009c52:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c56:	1b36      	subs	r6, r6, r4
 8009c58:	f7ff fe22 	bl	80098a0 <rshift>
 8009c5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009c60:	2702      	movs	r7, #2
 8009c62:	f1ba 0f00 	cmp.w	sl, #0
 8009c66:	d048      	beq.n	8009cfa <__gethex+0x3bc>
 8009c68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d015      	beq.n	8009c9c <__gethex+0x35e>
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d017      	beq.n	8009ca4 <__gethex+0x366>
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d109      	bne.n	8009c8c <__gethex+0x34e>
 8009c78:	f01a 0f02 	tst.w	sl, #2
 8009c7c:	d006      	beq.n	8009c8c <__gethex+0x34e>
 8009c7e:	f8d9 3000 	ldr.w	r3, [r9]
 8009c82:	ea4a 0a03 	orr.w	sl, sl, r3
 8009c86:	f01a 0f01 	tst.w	sl, #1
 8009c8a:	d10e      	bne.n	8009caa <__gethex+0x36c>
 8009c8c:	f047 0710 	orr.w	r7, r7, #16
 8009c90:	e033      	b.n	8009cfa <__gethex+0x3bc>
 8009c92:	f04f 0a01 	mov.w	sl, #1
 8009c96:	e7d0      	b.n	8009c3a <__gethex+0x2fc>
 8009c98:	2701      	movs	r7, #1
 8009c9a:	e7e2      	b.n	8009c62 <__gethex+0x324>
 8009c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c9e:	f1c3 0301 	rsb	r3, r3, #1
 8009ca2:	9315      	str	r3, [sp, #84]	; 0x54
 8009ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0f0      	beq.n	8009c8c <__gethex+0x34e>
 8009caa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009cae:	f105 0314 	add.w	r3, r5, #20
 8009cb2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009cb6:	eb03 010a 	add.w	r1, r3, sl
 8009cba:	f04f 0c00 	mov.w	ip, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cc8:	d01c      	beq.n	8009d04 <__gethex+0x3c6>
 8009cca:	3201      	adds	r2, #1
 8009ccc:	6002      	str	r2, [r0, #0]
 8009cce:	2f02      	cmp	r7, #2
 8009cd0:	f105 0314 	add.w	r3, r5, #20
 8009cd4:	d138      	bne.n	8009d48 <__gethex+0x40a>
 8009cd6:	f8d8 2000 	ldr.w	r2, [r8]
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	42b2      	cmp	r2, r6
 8009cde:	d10a      	bne.n	8009cf6 <__gethex+0x3b8>
 8009ce0:	1171      	asrs	r1, r6, #5
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f006 061f 	and.w	r6, r6, #31
 8009ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cec:	fa02 f606 	lsl.w	r6, r2, r6
 8009cf0:	421e      	tst	r6, r3
 8009cf2:	bf18      	it	ne
 8009cf4:	4617      	movne	r7, r2
 8009cf6:	f047 0720 	orr.w	r7, r7, #32
 8009cfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cfc:	601d      	str	r5, [r3, #0]
 8009cfe:	9b06      	ldr	r3, [sp, #24]
 8009d00:	601c      	str	r4, [r3, #0]
 8009d02:	e6a4      	b.n	8009a4e <__gethex+0x110>
 8009d04:	4299      	cmp	r1, r3
 8009d06:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d0a:	d8d8      	bhi.n	8009cbe <__gethex+0x380>
 8009d0c:	68ab      	ldr	r3, [r5, #8]
 8009d0e:	4599      	cmp	r9, r3
 8009d10:	db12      	blt.n	8009d38 <__gethex+0x3fa>
 8009d12:	6869      	ldr	r1, [r5, #4]
 8009d14:	9802      	ldr	r0, [sp, #8]
 8009d16:	3101      	adds	r1, #1
 8009d18:	f000 f921 	bl	8009f5e <_Balloc>
 8009d1c:	692a      	ldr	r2, [r5, #16]
 8009d1e:	3202      	adds	r2, #2
 8009d20:	f105 010c 	add.w	r1, r5, #12
 8009d24:	4683      	mov	fp, r0
 8009d26:	0092      	lsls	r2, r2, #2
 8009d28:	300c      	adds	r0, #12
 8009d2a:	f000 f90d 	bl	8009f48 <memcpy>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	9802      	ldr	r0, [sp, #8]
 8009d32:	f000 f948 	bl	8009fc6 <_Bfree>
 8009d36:	465d      	mov	r5, fp
 8009d38:	692b      	ldr	r3, [r5, #16]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009d40:	612a      	str	r2, [r5, #16]
 8009d42:	2201      	movs	r2, #1
 8009d44:	615a      	str	r2, [r3, #20]
 8009d46:	e7c2      	b.n	8009cce <__gethex+0x390>
 8009d48:	692a      	ldr	r2, [r5, #16]
 8009d4a:	454a      	cmp	r2, r9
 8009d4c:	dd0b      	ble.n	8009d66 <__gethex+0x428>
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4628      	mov	r0, r5
 8009d52:	f7ff fda5 	bl	80098a0 <rshift>
 8009d56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d5a:	3401      	adds	r4, #1
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	f6ff aed9 	blt.w	8009b14 <__gethex+0x1d6>
 8009d62:	2701      	movs	r7, #1
 8009d64:	e7c7      	b.n	8009cf6 <__gethex+0x3b8>
 8009d66:	f016 061f 	ands.w	r6, r6, #31
 8009d6a:	d0fa      	beq.n	8009d62 <__gethex+0x424>
 8009d6c:	449a      	add	sl, r3
 8009d6e:	f1c6 0620 	rsb	r6, r6, #32
 8009d72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009d76:	f000 f9b6 	bl	800a0e6 <__hi0bits>
 8009d7a:	42b0      	cmp	r0, r6
 8009d7c:	dbe7      	blt.n	8009d4e <__gethex+0x410>
 8009d7e:	e7f0      	b.n	8009d62 <__gethex+0x424>

08009d80 <L_shift>:
 8009d80:	f1c2 0208 	rsb	r2, r2, #8
 8009d84:	0092      	lsls	r2, r2, #2
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	f1c2 0620 	rsb	r6, r2, #32
 8009d8c:	6843      	ldr	r3, [r0, #4]
 8009d8e:	6804      	ldr	r4, [r0, #0]
 8009d90:	fa03 f506 	lsl.w	r5, r3, r6
 8009d94:	432c      	orrs	r4, r5
 8009d96:	40d3      	lsrs	r3, r2
 8009d98:	6004      	str	r4, [r0, #0]
 8009d9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d9e:	4288      	cmp	r0, r1
 8009da0:	d3f4      	bcc.n	8009d8c <L_shift+0xc>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}

08009da4 <__match>:
 8009da4:	b530      	push	{r4, r5, lr}
 8009da6:	6803      	ldr	r3, [r0, #0]
 8009da8:	3301      	adds	r3, #1
 8009daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dae:	b914      	cbnz	r4, 8009db6 <__match+0x12>
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	2001      	movs	r0, #1
 8009db4:	bd30      	pop	{r4, r5, pc}
 8009db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009dbe:	2d19      	cmp	r5, #25
 8009dc0:	bf98      	it	ls
 8009dc2:	3220      	addls	r2, #32
 8009dc4:	42a2      	cmp	r2, r4
 8009dc6:	d0f0      	beq.n	8009daa <__match+0x6>
 8009dc8:	2000      	movs	r0, #0
 8009dca:	e7f3      	b.n	8009db4 <__match+0x10>

08009dcc <__hexnan>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	680b      	ldr	r3, [r1, #0]
 8009dd2:	6801      	ldr	r1, [r0, #0]
 8009dd4:	115f      	asrs	r7, r3, #5
 8009dd6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009dda:	f013 031f 	ands.w	r3, r3, #31
 8009dde:	b087      	sub	sp, #28
 8009de0:	bf18      	it	ne
 8009de2:	3704      	addne	r7, #4
 8009de4:	2500      	movs	r5, #0
 8009de6:	1f3e      	subs	r6, r7, #4
 8009de8:	4682      	mov	sl, r0
 8009dea:	4690      	mov	r8, r2
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	f847 5c04 	str.w	r5, [r7, #-4]
 8009df2:	46b1      	mov	r9, r6
 8009df4:	4634      	mov	r4, r6
 8009df6:	9502      	str	r5, [sp, #8]
 8009df8:	46ab      	mov	fp, r5
 8009dfa:	784a      	ldrb	r2, [r1, #1]
 8009dfc:	1c4b      	adds	r3, r1, #1
 8009dfe:	9303      	str	r3, [sp, #12]
 8009e00:	b342      	cbz	r2, 8009e54 <__hexnan+0x88>
 8009e02:	4610      	mov	r0, r2
 8009e04:	9105      	str	r1, [sp, #20]
 8009e06:	9204      	str	r2, [sp, #16]
 8009e08:	f7ff fd84 	bl	8009914 <__hexdig_fun>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d143      	bne.n	8009e98 <__hexnan+0xcc>
 8009e10:	9a04      	ldr	r2, [sp, #16]
 8009e12:	9905      	ldr	r1, [sp, #20]
 8009e14:	2a20      	cmp	r2, #32
 8009e16:	d818      	bhi.n	8009e4a <__hexnan+0x7e>
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	459b      	cmp	fp, r3
 8009e1c:	dd13      	ble.n	8009e46 <__hexnan+0x7a>
 8009e1e:	454c      	cmp	r4, r9
 8009e20:	d206      	bcs.n	8009e30 <__hexnan+0x64>
 8009e22:	2d07      	cmp	r5, #7
 8009e24:	dc04      	bgt.n	8009e30 <__hexnan+0x64>
 8009e26:	462a      	mov	r2, r5
 8009e28:	4649      	mov	r1, r9
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f7ff ffa8 	bl	8009d80 <L_shift>
 8009e30:	4544      	cmp	r4, r8
 8009e32:	d944      	bls.n	8009ebe <__hexnan+0xf2>
 8009e34:	2300      	movs	r3, #0
 8009e36:	f1a4 0904 	sub.w	r9, r4, #4
 8009e3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e3e:	f8cd b008 	str.w	fp, [sp, #8]
 8009e42:	464c      	mov	r4, r9
 8009e44:	461d      	mov	r5, r3
 8009e46:	9903      	ldr	r1, [sp, #12]
 8009e48:	e7d7      	b.n	8009dfa <__hexnan+0x2e>
 8009e4a:	2a29      	cmp	r2, #41	; 0x29
 8009e4c:	d14a      	bne.n	8009ee4 <__hexnan+0x118>
 8009e4e:	3102      	adds	r1, #2
 8009e50:	f8ca 1000 	str.w	r1, [sl]
 8009e54:	f1bb 0f00 	cmp.w	fp, #0
 8009e58:	d044      	beq.n	8009ee4 <__hexnan+0x118>
 8009e5a:	454c      	cmp	r4, r9
 8009e5c:	d206      	bcs.n	8009e6c <__hexnan+0xa0>
 8009e5e:	2d07      	cmp	r5, #7
 8009e60:	dc04      	bgt.n	8009e6c <__hexnan+0xa0>
 8009e62:	462a      	mov	r2, r5
 8009e64:	4649      	mov	r1, r9
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7ff ff8a 	bl	8009d80 <L_shift>
 8009e6c:	4544      	cmp	r4, r8
 8009e6e:	d928      	bls.n	8009ec2 <__hexnan+0xf6>
 8009e70:	4643      	mov	r3, r8
 8009e72:	f854 2b04 	ldr.w	r2, [r4], #4
 8009e76:	f843 2b04 	str.w	r2, [r3], #4
 8009e7a:	42a6      	cmp	r6, r4
 8009e7c:	d2f9      	bcs.n	8009e72 <__hexnan+0xa6>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f843 2b04 	str.w	r2, [r3], #4
 8009e84:	429e      	cmp	r6, r3
 8009e86:	d2fb      	bcs.n	8009e80 <__hexnan+0xb4>
 8009e88:	6833      	ldr	r3, [r6, #0]
 8009e8a:	b91b      	cbnz	r3, 8009e94 <__hexnan+0xc8>
 8009e8c:	4546      	cmp	r6, r8
 8009e8e:	d127      	bne.n	8009ee0 <__hexnan+0x114>
 8009e90:	2301      	movs	r3, #1
 8009e92:	6033      	str	r3, [r6, #0]
 8009e94:	2005      	movs	r0, #5
 8009e96:	e026      	b.n	8009ee6 <__hexnan+0x11a>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	2d08      	cmp	r5, #8
 8009e9c:	f10b 0b01 	add.w	fp, fp, #1
 8009ea0:	dd06      	ble.n	8009eb0 <__hexnan+0xe4>
 8009ea2:	4544      	cmp	r4, r8
 8009ea4:	d9cf      	bls.n	8009e46 <__hexnan+0x7a>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eac:	2501      	movs	r5, #1
 8009eae:	3c04      	subs	r4, #4
 8009eb0:	6822      	ldr	r2, [r4, #0]
 8009eb2:	f000 000f 	and.w	r0, r0, #15
 8009eb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009eba:	6020      	str	r0, [r4, #0]
 8009ebc:	e7c3      	b.n	8009e46 <__hexnan+0x7a>
 8009ebe:	2508      	movs	r5, #8
 8009ec0:	e7c1      	b.n	8009e46 <__hexnan+0x7a>
 8009ec2:	9b01      	ldr	r3, [sp, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0df      	beq.n	8009e88 <__hexnan+0xbc>
 8009ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ecc:	f1c3 0320 	rsb	r3, r3, #32
 8009ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009ed8:	401a      	ands	r2, r3
 8009eda:	f847 2c04 	str.w	r2, [r7, #-4]
 8009ede:	e7d3      	b.n	8009e88 <__hexnan+0xbc>
 8009ee0:	3e04      	subs	r6, #4
 8009ee2:	e7d1      	b.n	8009e88 <__hexnan+0xbc>
 8009ee4:	2004      	movs	r0, #4
 8009ee6:	b007      	add	sp, #28
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eec <__locale_ctype_ptr_l>:
 8009eec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009ef0:	4770      	bx	lr

08009ef2 <__localeconv_l>:
 8009ef2:	30f0      	adds	r0, #240	; 0xf0
 8009ef4:	4770      	bx	lr
	...

08009ef8 <_localeconv_r>:
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <_localeconv_r+0x14>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6a18      	ldr	r0, [r3, #32]
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <_localeconv_r+0x18>)
 8009f00:	2800      	cmp	r0, #0
 8009f02:	bf08      	it	eq
 8009f04:	4618      	moveq	r0, r3
 8009f06:	30f0      	adds	r0, #240	; 0xf0
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	2000004c 	.word	0x2000004c
 8009f10:	200000b0 	.word	0x200000b0

08009f14 <malloc>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	; (8009f20 <malloc+0xc>)
 8009f16:	4601      	mov	r1, r0
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	f000 bc7b 	b.w	800a814 <_malloc_r>
 8009f1e:	bf00      	nop
 8009f20:	2000004c 	.word	0x2000004c

08009f24 <__ascii_mbtowc>:
 8009f24:	b082      	sub	sp, #8
 8009f26:	b901      	cbnz	r1, 8009f2a <__ascii_mbtowc+0x6>
 8009f28:	a901      	add	r1, sp, #4
 8009f2a:	b142      	cbz	r2, 8009f3e <__ascii_mbtowc+0x1a>
 8009f2c:	b14b      	cbz	r3, 8009f42 <__ascii_mbtowc+0x1e>
 8009f2e:	7813      	ldrb	r3, [r2, #0]
 8009f30:	600b      	str	r3, [r1, #0]
 8009f32:	7812      	ldrb	r2, [r2, #0]
 8009f34:	1c10      	adds	r0, r2, #0
 8009f36:	bf18      	it	ne
 8009f38:	2001      	movne	r0, #1
 8009f3a:	b002      	add	sp, #8
 8009f3c:	4770      	bx	lr
 8009f3e:	4610      	mov	r0, r2
 8009f40:	e7fb      	b.n	8009f3a <__ascii_mbtowc+0x16>
 8009f42:	f06f 0001 	mvn.w	r0, #1
 8009f46:	e7f8      	b.n	8009f3a <__ascii_mbtowc+0x16>

08009f48 <memcpy>:
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	1e43      	subs	r3, r0, #1
 8009f4c:	440a      	add	r2, r1
 8009f4e:	4291      	cmp	r1, r2
 8009f50:	d100      	bne.n	8009f54 <memcpy+0xc>
 8009f52:	bd10      	pop	{r4, pc}
 8009f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f5c:	e7f7      	b.n	8009f4e <memcpy+0x6>

08009f5e <_Balloc>:
 8009f5e:	b570      	push	{r4, r5, r6, lr}
 8009f60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f62:	4604      	mov	r4, r0
 8009f64:	460e      	mov	r6, r1
 8009f66:	b93d      	cbnz	r5, 8009f78 <_Balloc+0x1a>
 8009f68:	2010      	movs	r0, #16
 8009f6a:	f7ff ffd3 	bl	8009f14 <malloc>
 8009f6e:	6260      	str	r0, [r4, #36]	; 0x24
 8009f70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f74:	6005      	str	r5, [r0, #0]
 8009f76:	60c5      	str	r5, [r0, #12]
 8009f78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f7a:	68eb      	ldr	r3, [r5, #12]
 8009f7c:	b183      	cbz	r3, 8009fa0 <_Balloc+0x42>
 8009f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f86:	b9b8      	cbnz	r0, 8009fb8 <_Balloc+0x5a>
 8009f88:	2101      	movs	r1, #1
 8009f8a:	fa01 f506 	lsl.w	r5, r1, r6
 8009f8e:	1d6a      	adds	r2, r5, #5
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 fbe1 	bl	800a75a <_calloc_r>
 8009f98:	b160      	cbz	r0, 8009fb4 <_Balloc+0x56>
 8009f9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009f9e:	e00e      	b.n	8009fbe <_Balloc+0x60>
 8009fa0:	2221      	movs	r2, #33	; 0x21
 8009fa2:	2104      	movs	r1, #4
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 fbd8 	bl	800a75a <_calloc_r>
 8009faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fac:	60e8      	str	r0, [r5, #12]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <_Balloc+0x20>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	6802      	ldr	r2, [r0, #0]
 8009fba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc4:	e7f7      	b.n	8009fb6 <_Balloc+0x58>

08009fc6 <_Bfree>:
 8009fc6:	b570      	push	{r4, r5, r6, lr}
 8009fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460d      	mov	r5, r1
 8009fce:	b93c      	cbnz	r4, 8009fe0 <_Bfree+0x1a>
 8009fd0:	2010      	movs	r0, #16
 8009fd2:	f7ff ff9f 	bl	8009f14 <malloc>
 8009fd6:	6270      	str	r0, [r6, #36]	; 0x24
 8009fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fdc:	6004      	str	r4, [r0, #0]
 8009fde:	60c4      	str	r4, [r0, #12]
 8009fe0:	b13d      	cbz	r5, 8009ff2 <_Bfree+0x2c>
 8009fe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fe4:	686a      	ldr	r2, [r5, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fec:	6029      	str	r1, [r5, #0]
 8009fee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}

08009ff4 <__multadd>:
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff8:	690d      	ldr	r5, [r1, #16]
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460c      	mov	r4, r1
 800a000:	f101 0c14 	add.w	ip, r1, #20
 800a004:	2300      	movs	r3, #0
 800a006:	f8dc 0000 	ldr.w	r0, [ip]
 800a00a:	b281      	uxth	r1, r0
 800a00c:	fb02 7101 	mla	r1, r2, r1, r7
 800a010:	0c0f      	lsrs	r7, r1, #16
 800a012:	0c00      	lsrs	r0, r0, #16
 800a014:	fb02 7000 	mla	r0, r2, r0, r7
 800a018:	b289      	uxth	r1, r1
 800a01a:	3301      	adds	r3, #1
 800a01c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a020:	429d      	cmp	r5, r3
 800a022:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a026:	f84c 1b04 	str.w	r1, [ip], #4
 800a02a:	dcec      	bgt.n	800a006 <__multadd+0x12>
 800a02c:	b1d7      	cbz	r7, 800a064 <__multadd+0x70>
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	42ab      	cmp	r3, r5
 800a032:	dc12      	bgt.n	800a05a <__multadd+0x66>
 800a034:	6861      	ldr	r1, [r4, #4]
 800a036:	4630      	mov	r0, r6
 800a038:	3101      	adds	r1, #1
 800a03a:	f7ff ff90 	bl	8009f5e <_Balloc>
 800a03e:	6922      	ldr	r2, [r4, #16]
 800a040:	3202      	adds	r2, #2
 800a042:	f104 010c 	add.w	r1, r4, #12
 800a046:	4680      	mov	r8, r0
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	300c      	adds	r0, #12
 800a04c:	f7ff ff7c 	bl	8009f48 <memcpy>
 800a050:	4621      	mov	r1, r4
 800a052:	4630      	mov	r0, r6
 800a054:	f7ff ffb7 	bl	8009fc6 <_Bfree>
 800a058:	4644      	mov	r4, r8
 800a05a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a05e:	3501      	adds	r5, #1
 800a060:	615f      	str	r7, [r3, #20]
 800a062:	6125      	str	r5, [r4, #16]
 800a064:	4620      	mov	r0, r4
 800a066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a06a <__s2b>:
 800a06a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a06e:	460c      	mov	r4, r1
 800a070:	4615      	mov	r5, r2
 800a072:	461f      	mov	r7, r3
 800a074:	2209      	movs	r2, #9
 800a076:	3308      	adds	r3, #8
 800a078:	4606      	mov	r6, r0
 800a07a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a07e:	2100      	movs	r1, #0
 800a080:	2201      	movs	r2, #1
 800a082:	429a      	cmp	r2, r3
 800a084:	db20      	blt.n	800a0c8 <__s2b+0x5e>
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ff69 	bl	8009f5e <_Balloc>
 800a08c:	9b08      	ldr	r3, [sp, #32]
 800a08e:	6143      	str	r3, [r0, #20]
 800a090:	2d09      	cmp	r5, #9
 800a092:	f04f 0301 	mov.w	r3, #1
 800a096:	6103      	str	r3, [r0, #16]
 800a098:	dd19      	ble.n	800a0ce <__s2b+0x64>
 800a09a:	f104 0809 	add.w	r8, r4, #9
 800a09e:	46c1      	mov	r9, r8
 800a0a0:	442c      	add	r4, r5
 800a0a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	3b30      	subs	r3, #48	; 0x30
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff ffa1 	bl	8009ff4 <__multadd>
 800a0b2:	45a1      	cmp	r9, r4
 800a0b4:	d1f5      	bne.n	800a0a2 <__s2b+0x38>
 800a0b6:	eb08 0405 	add.w	r4, r8, r5
 800a0ba:	3c08      	subs	r4, #8
 800a0bc:	1b2d      	subs	r5, r5, r4
 800a0be:	1963      	adds	r3, r4, r5
 800a0c0:	42bb      	cmp	r3, r7
 800a0c2:	db07      	blt.n	800a0d4 <__s2b+0x6a>
 800a0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c8:	0052      	lsls	r2, r2, #1
 800a0ca:	3101      	adds	r1, #1
 800a0cc:	e7d9      	b.n	800a082 <__s2b+0x18>
 800a0ce:	340a      	adds	r4, #10
 800a0d0:	2509      	movs	r5, #9
 800a0d2:	e7f3      	b.n	800a0bc <__s2b+0x52>
 800a0d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0d8:	4601      	mov	r1, r0
 800a0da:	3b30      	subs	r3, #48	; 0x30
 800a0dc:	220a      	movs	r2, #10
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7ff ff88 	bl	8009ff4 <__multadd>
 800a0e4:	e7eb      	b.n	800a0be <__s2b+0x54>

0800a0e6 <__hi0bits>:
 800a0e6:	0c02      	lsrs	r2, r0, #16
 800a0e8:	0412      	lsls	r2, r2, #16
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	b9b2      	cbnz	r2, 800a11c <__hi0bits+0x36>
 800a0ee:	0403      	lsls	r3, r0, #16
 800a0f0:	2010      	movs	r0, #16
 800a0f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a0f6:	bf04      	itt	eq
 800a0f8:	021b      	lsleq	r3, r3, #8
 800a0fa:	3008      	addeq	r0, #8
 800a0fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a100:	bf04      	itt	eq
 800a102:	011b      	lsleq	r3, r3, #4
 800a104:	3004      	addeq	r0, #4
 800a106:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a10a:	bf04      	itt	eq
 800a10c:	009b      	lsleq	r3, r3, #2
 800a10e:	3002      	addeq	r0, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	db06      	blt.n	800a122 <__hi0bits+0x3c>
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	d503      	bpl.n	800a120 <__hi0bits+0x3a>
 800a118:	3001      	adds	r0, #1
 800a11a:	4770      	bx	lr
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7e8      	b.n	800a0f2 <__hi0bits+0xc>
 800a120:	2020      	movs	r0, #32
 800a122:	4770      	bx	lr

0800a124 <__lo0bits>:
 800a124:	6803      	ldr	r3, [r0, #0]
 800a126:	f013 0207 	ands.w	r2, r3, #7
 800a12a:	4601      	mov	r1, r0
 800a12c:	d00b      	beq.n	800a146 <__lo0bits+0x22>
 800a12e:	07da      	lsls	r2, r3, #31
 800a130:	d423      	bmi.n	800a17a <__lo0bits+0x56>
 800a132:	0798      	lsls	r0, r3, #30
 800a134:	bf49      	itett	mi
 800a136:	085b      	lsrmi	r3, r3, #1
 800a138:	089b      	lsrpl	r3, r3, #2
 800a13a:	2001      	movmi	r0, #1
 800a13c:	600b      	strmi	r3, [r1, #0]
 800a13e:	bf5c      	itt	pl
 800a140:	600b      	strpl	r3, [r1, #0]
 800a142:	2002      	movpl	r0, #2
 800a144:	4770      	bx	lr
 800a146:	b298      	uxth	r0, r3
 800a148:	b9a8      	cbnz	r0, 800a176 <__lo0bits+0x52>
 800a14a:	0c1b      	lsrs	r3, r3, #16
 800a14c:	2010      	movs	r0, #16
 800a14e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a152:	bf04      	itt	eq
 800a154:	0a1b      	lsreq	r3, r3, #8
 800a156:	3008      	addeq	r0, #8
 800a158:	071a      	lsls	r2, r3, #28
 800a15a:	bf04      	itt	eq
 800a15c:	091b      	lsreq	r3, r3, #4
 800a15e:	3004      	addeq	r0, #4
 800a160:	079a      	lsls	r2, r3, #30
 800a162:	bf04      	itt	eq
 800a164:	089b      	lsreq	r3, r3, #2
 800a166:	3002      	addeq	r0, #2
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	d402      	bmi.n	800a172 <__lo0bits+0x4e>
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	d006      	beq.n	800a17e <__lo0bits+0x5a>
 800a170:	3001      	adds	r0, #1
 800a172:	600b      	str	r3, [r1, #0]
 800a174:	4770      	bx	lr
 800a176:	4610      	mov	r0, r2
 800a178:	e7e9      	b.n	800a14e <__lo0bits+0x2a>
 800a17a:	2000      	movs	r0, #0
 800a17c:	4770      	bx	lr
 800a17e:	2020      	movs	r0, #32
 800a180:	4770      	bx	lr

0800a182 <__i2b>:
 800a182:	b510      	push	{r4, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	2101      	movs	r1, #1
 800a188:	f7ff fee9 	bl	8009f5e <_Balloc>
 800a18c:	2201      	movs	r2, #1
 800a18e:	6144      	str	r4, [r0, #20]
 800a190:	6102      	str	r2, [r0, #16]
 800a192:	bd10      	pop	{r4, pc}

0800a194 <__multiply>:
 800a194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	4614      	mov	r4, r2
 800a19a:	690a      	ldr	r2, [r1, #16]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	bfb8      	it	lt
 800a1a2:	460b      	movlt	r3, r1
 800a1a4:	4688      	mov	r8, r1
 800a1a6:	bfbc      	itt	lt
 800a1a8:	46a0      	movlt	r8, r4
 800a1aa:	461c      	movlt	r4, r3
 800a1ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1bc:	eb07 0609 	add.w	r6, r7, r9
 800a1c0:	42b3      	cmp	r3, r6
 800a1c2:	bfb8      	it	lt
 800a1c4:	3101      	addlt	r1, #1
 800a1c6:	f7ff feca 	bl	8009f5e <_Balloc>
 800a1ca:	f100 0514 	add.w	r5, r0, #20
 800a1ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4573      	cmp	r3, lr
 800a1d8:	d316      	bcc.n	800a208 <__multiply+0x74>
 800a1da:	f104 0214 	add.w	r2, r4, #20
 800a1de:	f108 0114 	add.w	r1, r8, #20
 800a1e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a1e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	9b00      	ldr	r3, [sp, #0]
 800a1ee:	9201      	str	r2, [sp, #4]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d80c      	bhi.n	800a20e <__multiply+0x7a>
 800a1f4:	2e00      	cmp	r6, #0
 800a1f6:	dd03      	ble.n	800a200 <__multiply+0x6c>
 800a1f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05d      	beq.n	800a2bc <__multiply+0x128>
 800a200:	6106      	str	r6, [r0, #16]
 800a202:	b003      	add	sp, #12
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	f843 2b04 	str.w	r2, [r3], #4
 800a20c:	e7e3      	b.n	800a1d6 <__multiply+0x42>
 800a20e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a212:	f1bb 0f00 	cmp.w	fp, #0
 800a216:	d023      	beq.n	800a260 <__multiply+0xcc>
 800a218:	4689      	mov	r9, r1
 800a21a:	46ac      	mov	ip, r5
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f859 4b04 	ldr.w	r4, [r9], #4
 800a224:	f8dc a000 	ldr.w	sl, [ip]
 800a228:	b2a3      	uxth	r3, r4
 800a22a:	fa1f fa8a 	uxth.w	sl, sl
 800a22e:	fb0b a303 	mla	r3, fp, r3, sl
 800a232:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a236:	f8dc 4000 	ldr.w	r4, [ip]
 800a23a:	4443      	add	r3, r8
 800a23c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a240:	fb0b 840a 	mla	r4, fp, sl, r8
 800a244:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a248:	46e2      	mov	sl, ip
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a250:	454f      	cmp	r7, r9
 800a252:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a256:	f84a 3b04 	str.w	r3, [sl], #4
 800a25a:	d82b      	bhi.n	800a2b4 <__multiply+0x120>
 800a25c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a266:	3204      	adds	r2, #4
 800a268:	f1ba 0f00 	cmp.w	sl, #0
 800a26c:	d020      	beq.n	800a2b0 <__multiply+0x11c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	4689      	mov	r9, r1
 800a272:	46a8      	mov	r8, r5
 800a274:	f04f 0b00 	mov.w	fp, #0
 800a278:	f8b9 c000 	ldrh.w	ip, [r9]
 800a27c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a280:	fb0a 440c 	mla	r4, sl, ip, r4
 800a284:	445c      	add	r4, fp
 800a286:	46c4      	mov	ip, r8
 800a288:	b29b      	uxth	r3, r3
 800a28a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a28e:	f84c 3b04 	str.w	r3, [ip], #4
 800a292:	f859 3b04 	ldr.w	r3, [r9], #4
 800a296:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a29a:	0c1b      	lsrs	r3, r3, #16
 800a29c:	fb0a b303 	mla	r3, sl, r3, fp
 800a2a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2a4:	454f      	cmp	r7, r9
 800a2a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a2aa:	d805      	bhi.n	800a2b8 <__multiply+0x124>
 800a2ac:	f8c8 3004 	str.w	r3, [r8, #4]
 800a2b0:	3504      	adds	r5, #4
 800a2b2:	e79b      	b.n	800a1ec <__multiply+0x58>
 800a2b4:	46d4      	mov	ip, sl
 800a2b6:	e7b3      	b.n	800a220 <__multiply+0x8c>
 800a2b8:	46e0      	mov	r8, ip
 800a2ba:	e7dd      	b.n	800a278 <__multiply+0xe4>
 800a2bc:	3e01      	subs	r6, #1
 800a2be:	e799      	b.n	800a1f4 <__multiply+0x60>

0800a2c0 <__pow5mult>:
 800a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c4:	4615      	mov	r5, r2
 800a2c6:	f012 0203 	ands.w	r2, r2, #3
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460f      	mov	r7, r1
 800a2ce:	d007      	beq.n	800a2e0 <__pow5mult+0x20>
 800a2d0:	3a01      	subs	r2, #1
 800a2d2:	4c21      	ldr	r4, [pc, #132]	; (800a358 <__pow5mult+0x98>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2da:	f7ff fe8b 	bl	8009ff4 <__multadd>
 800a2de:	4607      	mov	r7, r0
 800a2e0:	10ad      	asrs	r5, r5, #2
 800a2e2:	d035      	beq.n	800a350 <__pow5mult+0x90>
 800a2e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2e6:	b93c      	cbnz	r4, 800a2f8 <__pow5mult+0x38>
 800a2e8:	2010      	movs	r0, #16
 800a2ea:	f7ff fe13 	bl	8009f14 <malloc>
 800a2ee:	6270      	str	r0, [r6, #36]	; 0x24
 800a2f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2f4:	6004      	str	r4, [r0, #0]
 800a2f6:	60c4      	str	r4, [r0, #12]
 800a2f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a300:	b94c      	cbnz	r4, 800a316 <__pow5mult+0x56>
 800a302:	f240 2171 	movw	r1, #625	; 0x271
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ff3b 	bl	800a182 <__i2b>
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a312:	4604      	mov	r4, r0
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	07eb      	lsls	r3, r5, #31
 800a31c:	d50a      	bpl.n	800a334 <__pow5mult+0x74>
 800a31e:	4639      	mov	r1, r7
 800a320:	4622      	mov	r2, r4
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ff36 	bl	800a194 <__multiply>
 800a328:	4639      	mov	r1, r7
 800a32a:	4681      	mov	r9, r0
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff fe4a 	bl	8009fc6 <_Bfree>
 800a332:	464f      	mov	r7, r9
 800a334:	106d      	asrs	r5, r5, #1
 800a336:	d00b      	beq.n	800a350 <__pow5mult+0x90>
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	b938      	cbnz	r0, 800a34c <__pow5mult+0x8c>
 800a33c:	4622      	mov	r2, r4
 800a33e:	4621      	mov	r1, r4
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff ff27 	bl	800a194 <__multiply>
 800a346:	6020      	str	r0, [r4, #0]
 800a348:	f8c0 8000 	str.w	r8, [r0]
 800a34c:	4604      	mov	r4, r0
 800a34e:	e7e4      	b.n	800a31a <__pow5mult+0x5a>
 800a350:	4638      	mov	r0, r7
 800a352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a356:	bf00      	nop
 800a358:	0800ae28 	.word	0x0800ae28

0800a35c <__lshift>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	6849      	ldr	r1, [r1, #4]
 800a36a:	eb0a 0903 	add.w	r9, sl, r3
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	4607      	mov	r7, r0
 800a372:	4616      	mov	r6, r2
 800a374:	f109 0501 	add.w	r5, r9, #1
 800a378:	42ab      	cmp	r3, r5
 800a37a:	db32      	blt.n	800a3e2 <__lshift+0x86>
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fdee 	bl	8009f5e <_Balloc>
 800a382:	2300      	movs	r3, #0
 800a384:	4680      	mov	r8, r0
 800a386:	f100 0114 	add.w	r1, r0, #20
 800a38a:	461a      	mov	r2, r3
 800a38c:	4553      	cmp	r3, sl
 800a38e:	db2b      	blt.n	800a3e8 <__lshift+0x8c>
 800a390:	6920      	ldr	r0, [r4, #16]
 800a392:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a396:	f104 0314 	add.w	r3, r4, #20
 800a39a:	f016 021f 	ands.w	r2, r6, #31
 800a39e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3a6:	d025      	beq.n	800a3f4 <__lshift+0x98>
 800a3a8:	f1c2 0e20 	rsb	lr, r2, #32
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	681e      	ldr	r6, [r3, #0]
 800a3b0:	468a      	mov	sl, r1
 800a3b2:	4096      	lsls	r6, r2
 800a3b4:	4330      	orrs	r0, r6
 800a3b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a3ba:	f853 0b04 	ldr.w	r0, [r3], #4
 800a3be:	459c      	cmp	ip, r3
 800a3c0:	fa20 f00e 	lsr.w	r0, r0, lr
 800a3c4:	d814      	bhi.n	800a3f0 <__lshift+0x94>
 800a3c6:	6048      	str	r0, [r1, #4]
 800a3c8:	b108      	cbz	r0, 800a3ce <__lshift+0x72>
 800a3ca:	f109 0502 	add.w	r5, r9, #2
 800a3ce:	3d01      	subs	r5, #1
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	f7ff fdf5 	bl	8009fc6 <_Bfree>
 800a3dc:	4640      	mov	r0, r8
 800a3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e2:	3101      	adds	r1, #1
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	e7c7      	b.n	800a378 <__lshift+0x1c>
 800a3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	e7cd      	b.n	800a38c <__lshift+0x30>
 800a3f0:	4651      	mov	r1, sl
 800a3f2:	e7dc      	b.n	800a3ae <__lshift+0x52>
 800a3f4:	3904      	subs	r1, #4
 800a3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3fe:	459c      	cmp	ip, r3
 800a400:	d8f9      	bhi.n	800a3f6 <__lshift+0x9a>
 800a402:	e7e4      	b.n	800a3ce <__lshift+0x72>

0800a404 <__mcmp>:
 800a404:	6903      	ldr	r3, [r0, #16]
 800a406:	690a      	ldr	r2, [r1, #16]
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	b530      	push	{r4, r5, lr}
 800a40c:	d10c      	bne.n	800a428 <__mcmp+0x24>
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	3014      	adds	r0, #20
 800a412:	3114      	adds	r1, #20
 800a414:	1884      	adds	r4, r0, r2
 800a416:	4411      	add	r1, r2
 800a418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a41c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a420:	4295      	cmp	r5, r2
 800a422:	d003      	beq.n	800a42c <__mcmp+0x28>
 800a424:	d305      	bcc.n	800a432 <__mcmp+0x2e>
 800a426:	2301      	movs	r3, #1
 800a428:	4618      	mov	r0, r3
 800a42a:	bd30      	pop	{r4, r5, pc}
 800a42c:	42a0      	cmp	r0, r4
 800a42e:	d3f3      	bcc.n	800a418 <__mcmp+0x14>
 800a430:	e7fa      	b.n	800a428 <__mcmp+0x24>
 800a432:	f04f 33ff 	mov.w	r3, #4294967295
 800a436:	e7f7      	b.n	800a428 <__mcmp+0x24>

0800a438 <__mdiff>:
 800a438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43c:	460d      	mov	r5, r1
 800a43e:	4607      	mov	r7, r0
 800a440:	4611      	mov	r1, r2
 800a442:	4628      	mov	r0, r5
 800a444:	4614      	mov	r4, r2
 800a446:	f7ff ffdd 	bl	800a404 <__mcmp>
 800a44a:	1e06      	subs	r6, r0, #0
 800a44c:	d108      	bne.n	800a460 <__mdiff+0x28>
 800a44e:	4631      	mov	r1, r6
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff fd84 	bl	8009f5e <_Balloc>
 800a456:	2301      	movs	r3, #1
 800a458:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	bfa4      	itt	ge
 800a462:	4623      	movge	r3, r4
 800a464:	462c      	movge	r4, r5
 800a466:	4638      	mov	r0, r7
 800a468:	6861      	ldr	r1, [r4, #4]
 800a46a:	bfa6      	itte	ge
 800a46c:	461d      	movge	r5, r3
 800a46e:	2600      	movge	r6, #0
 800a470:	2601      	movlt	r6, #1
 800a472:	f7ff fd74 	bl	8009f5e <_Balloc>
 800a476:	692b      	ldr	r3, [r5, #16]
 800a478:	60c6      	str	r6, [r0, #12]
 800a47a:	6926      	ldr	r6, [r4, #16]
 800a47c:	f105 0914 	add.w	r9, r5, #20
 800a480:	f104 0214 	add.w	r2, r4, #20
 800a484:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a488:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a48c:	f100 0514 	add.w	r5, r0, #20
 800a490:	f04f 0e00 	mov.w	lr, #0
 800a494:	f852 ab04 	ldr.w	sl, [r2], #4
 800a498:	f859 4b04 	ldr.w	r4, [r9], #4
 800a49c:	fa1e f18a 	uxtah	r1, lr, sl
 800a4a0:	b2a3      	uxth	r3, r4
 800a4a2:	1ac9      	subs	r1, r1, r3
 800a4a4:	0c23      	lsrs	r3, r4, #16
 800a4a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a4aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a4ae:	b289      	uxth	r1, r1
 800a4b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a4b4:	45c8      	cmp	r8, r9
 800a4b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a4ba:	4694      	mov	ip, r2
 800a4bc:	f845 3b04 	str.w	r3, [r5], #4
 800a4c0:	d8e8      	bhi.n	800a494 <__mdiff+0x5c>
 800a4c2:	45bc      	cmp	ip, r7
 800a4c4:	d304      	bcc.n	800a4d0 <__mdiff+0x98>
 800a4c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a4ca:	b183      	cbz	r3, 800a4ee <__mdiff+0xb6>
 800a4cc:	6106      	str	r6, [r0, #16]
 800a4ce:	e7c5      	b.n	800a45c <__mdiff+0x24>
 800a4d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a4d4:	fa1e f381 	uxtah	r3, lr, r1
 800a4d8:	141a      	asrs	r2, r3, #16
 800a4da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a4e8:	f845 3b04 	str.w	r3, [r5], #4
 800a4ec:	e7e9      	b.n	800a4c2 <__mdiff+0x8a>
 800a4ee:	3e01      	subs	r6, #1
 800a4f0:	e7e9      	b.n	800a4c6 <__mdiff+0x8e>
	...

0800a4f4 <__ulp>:
 800a4f4:	4b12      	ldr	r3, [pc, #72]	; (800a540 <__ulp+0x4c>)
 800a4f6:	ee10 2a90 	vmov	r2, s1
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a500:	2b00      	cmp	r3, #0
 800a502:	dd04      	ble.n	800a50e <__ulp+0x1a>
 800a504:	2000      	movs	r0, #0
 800a506:	4619      	mov	r1, r3
 800a508:	ec41 0b10 	vmov	d0, r0, r1
 800a50c:	4770      	bx	lr
 800a50e:	425b      	negs	r3, r3
 800a510:	151b      	asrs	r3, r3, #20
 800a512:	2b13      	cmp	r3, #19
 800a514:	f04f 0000 	mov.w	r0, #0
 800a518:	f04f 0100 	mov.w	r1, #0
 800a51c:	dc04      	bgt.n	800a528 <__ulp+0x34>
 800a51e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a522:	fa42 f103 	asr.w	r1, r2, r3
 800a526:	e7ef      	b.n	800a508 <__ulp+0x14>
 800a528:	3b14      	subs	r3, #20
 800a52a:	2b1e      	cmp	r3, #30
 800a52c:	f04f 0201 	mov.w	r2, #1
 800a530:	bfda      	itte	le
 800a532:	f1c3 031f 	rsble	r3, r3, #31
 800a536:	fa02 f303 	lslle.w	r3, r2, r3
 800a53a:	4613      	movgt	r3, r2
 800a53c:	4618      	mov	r0, r3
 800a53e:	e7e3      	b.n	800a508 <__ulp+0x14>
 800a540:	7ff00000 	.word	0x7ff00000

0800a544 <__b2d>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	6905      	ldr	r5, [r0, #16]
 800a548:	f100 0714 	add.w	r7, r0, #20
 800a54c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a550:	1f2e      	subs	r6, r5, #4
 800a552:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a556:	4620      	mov	r0, r4
 800a558:	f7ff fdc5 	bl	800a0e6 <__hi0bits>
 800a55c:	f1c0 0320 	rsb	r3, r0, #32
 800a560:	280a      	cmp	r0, #10
 800a562:	600b      	str	r3, [r1, #0]
 800a564:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a5dc <__b2d+0x98>
 800a568:	dc14      	bgt.n	800a594 <__b2d+0x50>
 800a56a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a56e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a572:	42b7      	cmp	r7, r6
 800a574:	ea41 030c 	orr.w	r3, r1, ip
 800a578:	bf34      	ite	cc
 800a57a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a57e:	2100      	movcs	r1, #0
 800a580:	3015      	adds	r0, #21
 800a582:	fa04 f000 	lsl.w	r0, r4, r0
 800a586:	fa21 f10e 	lsr.w	r1, r1, lr
 800a58a:	ea40 0201 	orr.w	r2, r0, r1
 800a58e:	ec43 2b10 	vmov	d0, r2, r3
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	42b7      	cmp	r7, r6
 800a596:	bf3a      	itte	cc
 800a598:	f1a5 0608 	subcc.w	r6, r5, #8
 800a59c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5a0:	2100      	movcs	r1, #0
 800a5a2:	380b      	subs	r0, #11
 800a5a4:	d015      	beq.n	800a5d2 <__b2d+0x8e>
 800a5a6:	4084      	lsls	r4, r0
 800a5a8:	f1c0 0520 	rsb	r5, r0, #32
 800a5ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a5b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a5b4:	42be      	cmp	r6, r7
 800a5b6:	fa21 fc05 	lsr.w	ip, r1, r5
 800a5ba:	ea44 030c 	orr.w	r3, r4, ip
 800a5be:	bf8c      	ite	hi
 800a5c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5c4:	2400      	movls	r4, #0
 800a5c6:	fa01 f000 	lsl.w	r0, r1, r0
 800a5ca:	40ec      	lsrs	r4, r5
 800a5cc:	ea40 0204 	orr.w	r2, r0, r4
 800a5d0:	e7dd      	b.n	800a58e <__b2d+0x4a>
 800a5d2:	ea44 030c 	orr.w	r3, r4, ip
 800a5d6:	460a      	mov	r2, r1
 800a5d8:	e7d9      	b.n	800a58e <__b2d+0x4a>
 800a5da:	bf00      	nop
 800a5dc:	3ff00000 	.word	0x3ff00000

0800a5e0 <__d2b>:
 800a5e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	460e      	mov	r6, r1
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	ec59 8b10 	vmov	r8, r9, d0
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	f7ff fcb6 	bl	8009f5e <_Balloc>
 800a5f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5fc:	bb34      	cbnz	r4, 800a64c <__d2b+0x6c>
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	f1b8 0300 	subs.w	r3, r8, #0
 800a604:	d027      	beq.n	800a656 <__d2b+0x76>
 800a606:	a802      	add	r0, sp, #8
 800a608:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a60c:	f7ff fd8a 	bl	800a124 <__lo0bits>
 800a610:	9900      	ldr	r1, [sp, #0]
 800a612:	b1f0      	cbz	r0, 800a652 <__d2b+0x72>
 800a614:	9a01      	ldr	r2, [sp, #4]
 800a616:	f1c0 0320 	rsb	r3, r0, #32
 800a61a:	fa02 f303 	lsl.w	r3, r2, r3
 800a61e:	430b      	orrs	r3, r1
 800a620:	40c2      	lsrs	r2, r0
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	61bb      	str	r3, [r7, #24]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	bf14      	ite	ne
 800a62e:	2102      	movne	r1, #2
 800a630:	2101      	moveq	r1, #1
 800a632:	6139      	str	r1, [r7, #16]
 800a634:	b1c4      	cbz	r4, 800a668 <__d2b+0x88>
 800a636:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a63a:	4404      	add	r4, r0
 800a63c:	6034      	str	r4, [r6, #0]
 800a63e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a642:	6028      	str	r0, [r5, #0]
 800a644:	4638      	mov	r0, r7
 800a646:	b003      	add	sp, #12
 800a648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a64c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a650:	e7d5      	b.n	800a5fe <__d2b+0x1e>
 800a652:	6179      	str	r1, [r7, #20]
 800a654:	e7e7      	b.n	800a626 <__d2b+0x46>
 800a656:	a801      	add	r0, sp, #4
 800a658:	f7ff fd64 	bl	800a124 <__lo0bits>
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	2101      	movs	r1, #1
 800a662:	6139      	str	r1, [r7, #16]
 800a664:	3020      	adds	r0, #32
 800a666:	e7e5      	b.n	800a634 <__d2b+0x54>
 800a668:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a66c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a670:	6030      	str	r0, [r6, #0]
 800a672:	6918      	ldr	r0, [r3, #16]
 800a674:	f7ff fd37 	bl	800a0e6 <__hi0bits>
 800a678:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a67c:	e7e1      	b.n	800a642 <__d2b+0x62>

0800a67e <__ratio>:
 800a67e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a682:	4688      	mov	r8, r1
 800a684:	4669      	mov	r1, sp
 800a686:	4681      	mov	r9, r0
 800a688:	f7ff ff5c 	bl	800a544 <__b2d>
 800a68c:	a901      	add	r1, sp, #4
 800a68e:	4640      	mov	r0, r8
 800a690:	ec57 6b10 	vmov	r6, r7, d0
 800a694:	f7ff ff56 	bl	800a544 <__b2d>
 800a698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a69c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6a0:	eba3 0c02 	sub.w	ip, r3, r2
 800a6a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6a8:	1a9b      	subs	r3, r3, r2
 800a6aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6ae:	ec5b ab10 	vmov	sl, fp, d0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfce      	itee	gt
 800a6b6:	463a      	movgt	r2, r7
 800a6b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6bc:	465a      	movle	r2, fp
 800a6be:	4659      	mov	r1, fp
 800a6c0:	463d      	mov	r5, r7
 800a6c2:	bfd4      	ite	le
 800a6c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a6c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	ee10 2a10 	vmov	r2, s0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f7f6 f8d9 	bl	800088c <__aeabi_ddiv>
 800a6da:	ec41 0b10 	vmov	d0, r0, r1
 800a6de:	b003      	add	sp, #12
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6e4 <__copybits>:
 800a6e4:	3901      	subs	r1, #1
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	1149      	asrs	r1, r1, #5
 800a6ea:	6914      	ldr	r4, [r2, #16]
 800a6ec:	3101      	adds	r1, #1
 800a6ee:	f102 0314 	add.w	r3, r2, #20
 800a6f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6fa:	42a3      	cmp	r3, r4
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	d303      	bcc.n	800a708 <__copybits+0x24>
 800a700:	2300      	movs	r3, #0
 800a702:	428a      	cmp	r2, r1
 800a704:	d305      	bcc.n	800a712 <__copybits+0x2e>
 800a706:	bd10      	pop	{r4, pc}
 800a708:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70c:	f840 2b04 	str.w	r2, [r0], #4
 800a710:	e7f3      	b.n	800a6fa <__copybits+0x16>
 800a712:	f842 3b04 	str.w	r3, [r2], #4
 800a716:	e7f4      	b.n	800a702 <__copybits+0x1e>

0800a718 <__any_on>:
 800a718:	f100 0214 	add.w	r2, r0, #20
 800a71c:	6900      	ldr	r0, [r0, #16]
 800a71e:	114b      	asrs	r3, r1, #5
 800a720:	4298      	cmp	r0, r3
 800a722:	b510      	push	{r4, lr}
 800a724:	db11      	blt.n	800a74a <__any_on+0x32>
 800a726:	dd0a      	ble.n	800a73e <__any_on+0x26>
 800a728:	f011 011f 	ands.w	r1, r1, #31
 800a72c:	d007      	beq.n	800a73e <__any_on+0x26>
 800a72e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a732:	fa24 f001 	lsr.w	r0, r4, r1
 800a736:	fa00 f101 	lsl.w	r1, r0, r1
 800a73a:	428c      	cmp	r4, r1
 800a73c:	d10b      	bne.n	800a756 <__any_on+0x3e>
 800a73e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a742:	4293      	cmp	r3, r2
 800a744:	d803      	bhi.n	800a74e <__any_on+0x36>
 800a746:	2000      	movs	r0, #0
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	4603      	mov	r3, r0
 800a74c:	e7f7      	b.n	800a73e <__any_on+0x26>
 800a74e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a752:	2900      	cmp	r1, #0
 800a754:	d0f5      	beq.n	800a742 <__any_on+0x2a>
 800a756:	2001      	movs	r0, #1
 800a758:	e7f6      	b.n	800a748 <__any_on+0x30>

0800a75a <_calloc_r>:
 800a75a:	b538      	push	{r3, r4, r5, lr}
 800a75c:	fb02 f401 	mul.w	r4, r2, r1
 800a760:	4621      	mov	r1, r4
 800a762:	f000 f857 	bl	800a814 <_malloc_r>
 800a766:	4605      	mov	r5, r0
 800a768:	b118      	cbz	r0, 800a772 <_calloc_r+0x18>
 800a76a:	4622      	mov	r2, r4
 800a76c:	2100      	movs	r1, #0
 800a76e:	f7fc fd37 	bl	80071e0 <memset>
 800a772:	4628      	mov	r0, r5
 800a774:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a778 <_free_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4605      	mov	r5, r0
 800a77c:	2900      	cmp	r1, #0
 800a77e:	d045      	beq.n	800a80c <_free_r+0x94>
 800a780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a784:	1f0c      	subs	r4, r1, #4
 800a786:	2b00      	cmp	r3, #0
 800a788:	bfb8      	it	lt
 800a78a:	18e4      	addlt	r4, r4, r3
 800a78c:	f000 fa36 	bl	800abfc <__malloc_lock>
 800a790:	4a1f      	ldr	r2, [pc, #124]	; (800a810 <_free_r+0x98>)
 800a792:	6813      	ldr	r3, [r2, #0]
 800a794:	4610      	mov	r0, r2
 800a796:	b933      	cbnz	r3, 800a7a6 <_free_r+0x2e>
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	6014      	str	r4, [r2, #0]
 800a79c:	4628      	mov	r0, r5
 800a79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a2:	f000 ba2c 	b.w	800abfe <__malloc_unlock>
 800a7a6:	42a3      	cmp	r3, r4
 800a7a8:	d90c      	bls.n	800a7c4 <_free_r+0x4c>
 800a7aa:	6821      	ldr	r1, [r4, #0]
 800a7ac:	1862      	adds	r2, r4, r1
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	bf04      	itt	eq
 800a7b2:	681a      	ldreq	r2, [r3, #0]
 800a7b4:	685b      	ldreq	r3, [r3, #4]
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	bf04      	itt	eq
 800a7ba:	1852      	addeq	r2, r2, r1
 800a7bc:	6022      	streq	r2, [r4, #0]
 800a7be:	6004      	str	r4, [r0, #0]
 800a7c0:	e7ec      	b.n	800a79c <_free_r+0x24>
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	b10a      	cbz	r2, 800a7cc <_free_r+0x54>
 800a7c8:	42a2      	cmp	r2, r4
 800a7ca:	d9fa      	bls.n	800a7c2 <_free_r+0x4a>
 800a7cc:	6819      	ldr	r1, [r3, #0]
 800a7ce:	1858      	adds	r0, r3, r1
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d10b      	bne.n	800a7ec <_free_r+0x74>
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	4401      	add	r1, r0
 800a7d8:	1858      	adds	r0, r3, r1
 800a7da:	4282      	cmp	r2, r0
 800a7dc:	6019      	str	r1, [r3, #0]
 800a7de:	d1dd      	bne.n	800a79c <_free_r+0x24>
 800a7e0:	6810      	ldr	r0, [r2, #0]
 800a7e2:	6852      	ldr	r2, [r2, #4]
 800a7e4:	605a      	str	r2, [r3, #4]
 800a7e6:	4401      	add	r1, r0
 800a7e8:	6019      	str	r1, [r3, #0]
 800a7ea:	e7d7      	b.n	800a79c <_free_r+0x24>
 800a7ec:	d902      	bls.n	800a7f4 <_free_r+0x7c>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	e7d3      	b.n	800a79c <_free_r+0x24>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	1821      	adds	r1, r4, r0
 800a7f8:	428a      	cmp	r2, r1
 800a7fa:	bf04      	itt	eq
 800a7fc:	6811      	ldreq	r1, [r2, #0]
 800a7fe:	6852      	ldreq	r2, [r2, #4]
 800a800:	6062      	str	r2, [r4, #4]
 800a802:	bf04      	itt	eq
 800a804:	1809      	addeq	r1, r1, r0
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	605c      	str	r4, [r3, #4]
 800a80a:	e7c7      	b.n	800a79c <_free_r+0x24>
 800a80c:	bd38      	pop	{r3, r4, r5, pc}
 800a80e:	bf00      	nop
 800a810:	2000023c 	.word	0x2000023c

0800a814 <_malloc_r>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	1ccd      	adds	r5, r1, #3
 800a818:	f025 0503 	bic.w	r5, r5, #3
 800a81c:	3508      	adds	r5, #8
 800a81e:	2d0c      	cmp	r5, #12
 800a820:	bf38      	it	cc
 800a822:	250c      	movcc	r5, #12
 800a824:	2d00      	cmp	r5, #0
 800a826:	4606      	mov	r6, r0
 800a828:	db01      	blt.n	800a82e <_malloc_r+0x1a>
 800a82a:	42a9      	cmp	r1, r5
 800a82c:	d903      	bls.n	800a836 <_malloc_r+0x22>
 800a82e:	230c      	movs	r3, #12
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	2000      	movs	r0, #0
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	f000 f9e1 	bl	800abfc <__malloc_lock>
 800a83a:	4a21      	ldr	r2, [pc, #132]	; (800a8c0 <_malloc_r+0xac>)
 800a83c:	6814      	ldr	r4, [r2, #0]
 800a83e:	4621      	mov	r1, r4
 800a840:	b991      	cbnz	r1, 800a868 <_malloc_r+0x54>
 800a842:	4c20      	ldr	r4, [pc, #128]	; (800a8c4 <_malloc_r+0xb0>)
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	b91b      	cbnz	r3, 800a850 <_malloc_r+0x3c>
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 f98f 	bl	800ab6c <_sbrk_r>
 800a84e:	6020      	str	r0, [r4, #0]
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f000 f98a 	bl	800ab6c <_sbrk_r>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d124      	bne.n	800a8a6 <_malloc_r+0x92>
 800a85c:	230c      	movs	r3, #12
 800a85e:	6033      	str	r3, [r6, #0]
 800a860:	4630      	mov	r0, r6
 800a862:	f000 f9cc 	bl	800abfe <__malloc_unlock>
 800a866:	e7e4      	b.n	800a832 <_malloc_r+0x1e>
 800a868:	680b      	ldr	r3, [r1, #0]
 800a86a:	1b5b      	subs	r3, r3, r5
 800a86c:	d418      	bmi.n	800a8a0 <_malloc_r+0x8c>
 800a86e:	2b0b      	cmp	r3, #11
 800a870:	d90f      	bls.n	800a892 <_malloc_r+0x7e>
 800a872:	600b      	str	r3, [r1, #0]
 800a874:	50cd      	str	r5, [r1, r3]
 800a876:	18cc      	adds	r4, r1, r3
 800a878:	4630      	mov	r0, r6
 800a87a:	f000 f9c0 	bl	800abfe <__malloc_unlock>
 800a87e:	f104 000b 	add.w	r0, r4, #11
 800a882:	1d23      	adds	r3, r4, #4
 800a884:	f020 0007 	bic.w	r0, r0, #7
 800a888:	1ac3      	subs	r3, r0, r3
 800a88a:	d0d3      	beq.n	800a834 <_malloc_r+0x20>
 800a88c:	425a      	negs	r2, r3
 800a88e:	50e2      	str	r2, [r4, r3]
 800a890:	e7d0      	b.n	800a834 <_malloc_r+0x20>
 800a892:	428c      	cmp	r4, r1
 800a894:	684b      	ldr	r3, [r1, #4]
 800a896:	bf16      	itet	ne
 800a898:	6063      	strne	r3, [r4, #4]
 800a89a:	6013      	streq	r3, [r2, #0]
 800a89c:	460c      	movne	r4, r1
 800a89e:	e7eb      	b.n	800a878 <_malloc_r+0x64>
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	6849      	ldr	r1, [r1, #4]
 800a8a4:	e7cc      	b.n	800a840 <_malloc_r+0x2c>
 800a8a6:	1cc4      	adds	r4, r0, #3
 800a8a8:	f024 0403 	bic.w	r4, r4, #3
 800a8ac:	42a0      	cmp	r0, r4
 800a8ae:	d005      	beq.n	800a8bc <_malloc_r+0xa8>
 800a8b0:	1a21      	subs	r1, r4, r0
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f000 f95a 	bl	800ab6c <_sbrk_r>
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d0cf      	beq.n	800a85c <_malloc_r+0x48>
 800a8bc:	6025      	str	r5, [r4, #0]
 800a8be:	e7db      	b.n	800a878 <_malloc_r+0x64>
 800a8c0:	2000023c 	.word	0x2000023c
 800a8c4:	20000240 	.word	0x20000240

0800a8c8 <__ssputs_r>:
 800a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	688e      	ldr	r6, [r1, #8]
 800a8ce:	429e      	cmp	r6, r3
 800a8d0:	4682      	mov	sl, r0
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	4690      	mov	r8, r2
 800a8d6:	4699      	mov	r9, r3
 800a8d8:	d837      	bhi.n	800a94a <__ssputs_r+0x82>
 800a8da:	898a      	ldrh	r2, [r1, #12]
 800a8dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8e0:	d031      	beq.n	800a946 <__ssputs_r+0x7e>
 800a8e2:	6825      	ldr	r5, [r4, #0]
 800a8e4:	6909      	ldr	r1, [r1, #16]
 800a8e6:	1a6f      	subs	r7, r5, r1
 800a8e8:	6965      	ldr	r5, [r4, #20]
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8f0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a8f4:	f109 0301 	add.w	r3, r9, #1
 800a8f8:	443b      	add	r3, r7
 800a8fa:	429d      	cmp	r5, r3
 800a8fc:	bf38      	it	cc
 800a8fe:	461d      	movcc	r5, r3
 800a900:	0553      	lsls	r3, r2, #21
 800a902:	d530      	bpl.n	800a966 <__ssputs_r+0x9e>
 800a904:	4629      	mov	r1, r5
 800a906:	f7ff ff85 	bl	800a814 <_malloc_r>
 800a90a:	4606      	mov	r6, r0
 800a90c:	b950      	cbnz	r0, 800a924 <__ssputs_r+0x5c>
 800a90e:	230c      	movs	r3, #12
 800a910:	f8ca 3000 	str.w	r3, [sl]
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a924:	463a      	mov	r2, r7
 800a926:	6921      	ldr	r1, [r4, #16]
 800a928:	f7ff fb0e 	bl	8009f48 <memcpy>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	6126      	str	r6, [r4, #16]
 800a93a:	6165      	str	r5, [r4, #20]
 800a93c:	443e      	add	r6, r7
 800a93e:	1bed      	subs	r5, r5, r7
 800a940:	6026      	str	r6, [r4, #0]
 800a942:	60a5      	str	r5, [r4, #8]
 800a944:	464e      	mov	r6, r9
 800a946:	454e      	cmp	r6, r9
 800a948:	d900      	bls.n	800a94c <__ssputs_r+0x84>
 800a94a:	464e      	mov	r6, r9
 800a94c:	4632      	mov	r2, r6
 800a94e:	4641      	mov	r1, r8
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	f000 f93a 	bl	800abca <memmove>
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	1b9b      	subs	r3, r3, r6
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	441e      	add	r6, r3
 800a960:	6026      	str	r6, [r4, #0]
 800a962:	2000      	movs	r0, #0
 800a964:	e7dc      	b.n	800a920 <__ssputs_r+0x58>
 800a966:	462a      	mov	r2, r5
 800a968:	f000 f94a 	bl	800ac00 <_realloc_r>
 800a96c:	4606      	mov	r6, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1e2      	bne.n	800a938 <__ssputs_r+0x70>
 800a972:	6921      	ldr	r1, [r4, #16]
 800a974:	4650      	mov	r0, sl
 800a976:	f7ff feff 	bl	800a778 <_free_r>
 800a97a:	e7c8      	b.n	800a90e <__ssputs_r+0x46>

0800a97c <_svfiprintf_r>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	461d      	mov	r5, r3
 800a982:	898b      	ldrh	r3, [r1, #12]
 800a984:	061f      	lsls	r7, r3, #24
 800a986:	b09d      	sub	sp, #116	; 0x74
 800a988:	4680      	mov	r8, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	4616      	mov	r6, r2
 800a98e:	d50f      	bpl.n	800a9b0 <_svfiprintf_r+0x34>
 800a990:	690b      	ldr	r3, [r1, #16]
 800a992:	b96b      	cbnz	r3, 800a9b0 <_svfiprintf_r+0x34>
 800a994:	2140      	movs	r1, #64	; 0x40
 800a996:	f7ff ff3d 	bl	800a814 <_malloc_r>
 800a99a:	6020      	str	r0, [r4, #0]
 800a99c:	6120      	str	r0, [r4, #16]
 800a99e:	b928      	cbnz	r0, 800a9ac <_svfiprintf_r+0x30>
 800a9a0:	230c      	movs	r3, #12
 800a9a2:	f8c8 3000 	str.w	r3, [r8]
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	e0c8      	b.n	800ab3e <_svfiprintf_r+0x1c2>
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	6163      	str	r3, [r4, #20]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b4:	2320      	movs	r3, #32
 800a9b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ba:	2330      	movs	r3, #48	; 0x30
 800a9bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9c0:	9503      	str	r5, [sp, #12]
 800a9c2:	f04f 0b01 	mov.w	fp, #1
 800a9c6:	4637      	mov	r7, r6
 800a9c8:	463d      	mov	r5, r7
 800a9ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a9ce:	b10b      	cbz	r3, 800a9d4 <_svfiprintf_r+0x58>
 800a9d0:	2b25      	cmp	r3, #37	; 0x25
 800a9d2:	d13e      	bne.n	800aa52 <_svfiprintf_r+0xd6>
 800a9d4:	ebb7 0a06 	subs.w	sl, r7, r6
 800a9d8:	d00b      	beq.n	800a9f2 <_svfiprintf_r+0x76>
 800a9da:	4653      	mov	r3, sl
 800a9dc:	4632      	mov	r2, r6
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	f7ff ff71 	bl	800a8c8 <__ssputs_r>
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	f000 80a4 	beq.w	800ab34 <_svfiprintf_r+0x1b8>
 800a9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ee:	4453      	add	r3, sl
 800a9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f2:	783b      	ldrb	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 809d 	beq.w	800ab34 <_svfiprintf_r+0x1b8>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa04:	9304      	str	r3, [sp, #16]
 800aa06:	9307      	str	r3, [sp, #28]
 800aa08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa0c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa0e:	462f      	mov	r7, r5
 800aa10:	2205      	movs	r2, #5
 800aa12:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aa16:	4850      	ldr	r0, [pc, #320]	; (800ab58 <_svfiprintf_r+0x1dc>)
 800aa18:	f7f5 fc02 	bl	8000220 <memchr>
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	b9d0      	cbnz	r0, 800aa56 <_svfiprintf_r+0xda>
 800aa20:	06d9      	lsls	r1, r3, #27
 800aa22:	bf44      	itt	mi
 800aa24:	2220      	movmi	r2, #32
 800aa26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa2a:	071a      	lsls	r2, r3, #28
 800aa2c:	bf44      	itt	mi
 800aa2e:	222b      	movmi	r2, #43	; 0x2b
 800aa30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa34:	782a      	ldrb	r2, [r5, #0]
 800aa36:	2a2a      	cmp	r2, #42	; 0x2a
 800aa38:	d015      	beq.n	800aa66 <_svfiprintf_r+0xea>
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	462f      	mov	r7, r5
 800aa3e:	2000      	movs	r0, #0
 800aa40:	250a      	movs	r5, #10
 800aa42:	4639      	mov	r1, r7
 800aa44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa48:	3b30      	subs	r3, #48	; 0x30
 800aa4a:	2b09      	cmp	r3, #9
 800aa4c:	d94d      	bls.n	800aaea <_svfiprintf_r+0x16e>
 800aa4e:	b1b8      	cbz	r0, 800aa80 <_svfiprintf_r+0x104>
 800aa50:	e00f      	b.n	800aa72 <_svfiprintf_r+0xf6>
 800aa52:	462f      	mov	r7, r5
 800aa54:	e7b8      	b.n	800a9c8 <_svfiprintf_r+0x4c>
 800aa56:	4a40      	ldr	r2, [pc, #256]	; (800ab58 <_svfiprintf_r+0x1dc>)
 800aa58:	1a80      	subs	r0, r0, r2
 800aa5a:	fa0b f000 	lsl.w	r0, fp, r0
 800aa5e:	4318      	orrs	r0, r3
 800aa60:	9004      	str	r0, [sp, #16]
 800aa62:	463d      	mov	r5, r7
 800aa64:	e7d3      	b.n	800aa0e <_svfiprintf_r+0x92>
 800aa66:	9a03      	ldr	r2, [sp, #12]
 800aa68:	1d11      	adds	r1, r2, #4
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	9103      	str	r1, [sp, #12]
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	db01      	blt.n	800aa76 <_svfiprintf_r+0xfa>
 800aa72:	9207      	str	r2, [sp, #28]
 800aa74:	e004      	b.n	800aa80 <_svfiprintf_r+0x104>
 800aa76:	4252      	negs	r2, r2
 800aa78:	f043 0302 	orr.w	r3, r3, #2
 800aa7c:	9207      	str	r2, [sp, #28]
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	783b      	ldrb	r3, [r7, #0]
 800aa82:	2b2e      	cmp	r3, #46	; 0x2e
 800aa84:	d10c      	bne.n	800aaa0 <_svfiprintf_r+0x124>
 800aa86:	787b      	ldrb	r3, [r7, #1]
 800aa88:	2b2a      	cmp	r3, #42	; 0x2a
 800aa8a:	d133      	bne.n	800aaf4 <_svfiprintf_r+0x178>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	9203      	str	r2, [sp, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bfb8      	it	lt
 800aa98:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa9c:	3702      	adds	r7, #2
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	4d2e      	ldr	r5, [pc, #184]	; (800ab5c <_svfiprintf_r+0x1e0>)
 800aaa2:	7839      	ldrb	r1, [r7, #0]
 800aaa4:	2203      	movs	r2, #3
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f7f5 fbba 	bl	8000220 <memchr>
 800aaac:	b138      	cbz	r0, 800aabe <_svfiprintf_r+0x142>
 800aaae:	2340      	movs	r3, #64	; 0x40
 800aab0:	1b40      	subs	r0, r0, r5
 800aab2:	fa03 f000 	lsl.w	r0, r3, r0
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	4303      	orrs	r3, r0
 800aaba:	3701      	adds	r7, #1
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	7839      	ldrb	r1, [r7, #0]
 800aac0:	4827      	ldr	r0, [pc, #156]	; (800ab60 <_svfiprintf_r+0x1e4>)
 800aac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aac6:	2206      	movs	r2, #6
 800aac8:	1c7e      	adds	r6, r7, #1
 800aaca:	f7f5 fba9 	bl	8000220 <memchr>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d038      	beq.n	800ab44 <_svfiprintf_r+0x1c8>
 800aad2:	4b24      	ldr	r3, [pc, #144]	; (800ab64 <_svfiprintf_r+0x1e8>)
 800aad4:	bb13      	cbnz	r3, 800ab1c <_svfiprintf_r+0x1a0>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	3307      	adds	r3, #7
 800aada:	f023 0307 	bic.w	r3, r3, #7
 800aade:	3308      	adds	r3, #8
 800aae0:	9303      	str	r3, [sp, #12]
 800aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae4:	444b      	add	r3, r9
 800aae6:	9309      	str	r3, [sp, #36]	; 0x24
 800aae8:	e76d      	b.n	800a9c6 <_svfiprintf_r+0x4a>
 800aaea:	fb05 3202 	mla	r2, r5, r2, r3
 800aaee:	2001      	movs	r0, #1
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	e7a6      	b.n	800aa42 <_svfiprintf_r+0xc6>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	3701      	adds	r7, #1
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	4619      	mov	r1, r3
 800aafc:	250a      	movs	r5, #10
 800aafe:	4638      	mov	r0, r7
 800ab00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab04:	3a30      	subs	r2, #48	; 0x30
 800ab06:	2a09      	cmp	r2, #9
 800ab08:	d903      	bls.n	800ab12 <_svfiprintf_r+0x196>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0c8      	beq.n	800aaa0 <_svfiprintf_r+0x124>
 800ab0e:	9105      	str	r1, [sp, #20]
 800ab10:	e7c6      	b.n	800aaa0 <_svfiprintf_r+0x124>
 800ab12:	fb05 2101 	mla	r1, r5, r1, r2
 800ab16:	2301      	movs	r3, #1
 800ab18:	4607      	mov	r7, r0
 800ab1a:	e7f0      	b.n	800aafe <_svfiprintf_r+0x182>
 800ab1c:	ab03      	add	r3, sp, #12
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4622      	mov	r2, r4
 800ab22:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <_svfiprintf_r+0x1ec>)
 800ab24:	a904      	add	r1, sp, #16
 800ab26:	4640      	mov	r0, r8
 800ab28:	f7fc fbf6 	bl	8007318 <_printf_float>
 800ab2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ab30:	4681      	mov	r9, r0
 800ab32:	d1d6      	bne.n	800aae2 <_svfiprintf_r+0x166>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	065b      	lsls	r3, r3, #25
 800ab38:	f53f af35 	bmi.w	800a9a6 <_svfiprintf_r+0x2a>
 800ab3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3e:	b01d      	add	sp, #116	; 0x74
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	ab03      	add	r3, sp, #12
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	4622      	mov	r2, r4
 800ab4a:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <_svfiprintf_r+0x1ec>)
 800ab4c:	a904      	add	r1, sp, #16
 800ab4e:	4640      	mov	r0, r8
 800ab50:	f7fc fe98 	bl	8007884 <_printf_i>
 800ab54:	e7ea      	b.n	800ab2c <_svfiprintf_r+0x1b0>
 800ab56:	bf00      	nop
 800ab58:	0800ae34 	.word	0x0800ae34
 800ab5c:	0800ae3a 	.word	0x0800ae3a
 800ab60:	0800ae3e 	.word	0x0800ae3e
 800ab64:	08007319 	.word	0x08007319
 800ab68:	0800a8c9 	.word	0x0800a8c9

0800ab6c <_sbrk_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4c06      	ldr	r4, [pc, #24]	; (800ab88 <_sbrk_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4605      	mov	r5, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	6023      	str	r3, [r4, #0]
 800ab78:	f7f7 fcf2 	bl	8002560 <_sbrk>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_sbrk_r+0x1a>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_sbrk_r+0x1a>
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	200004ac 	.word	0x200004ac

0800ab8c <strncmp>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	b16a      	cbz	r2, 800abac <strncmp+0x20>
 800ab90:	3901      	subs	r1, #1
 800ab92:	1884      	adds	r4, r0, r2
 800ab94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ab98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d103      	bne.n	800aba8 <strncmp+0x1c>
 800aba0:	42a0      	cmp	r0, r4
 800aba2:	d001      	beq.n	800aba8 <strncmp+0x1c>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1f5      	bne.n	800ab94 <strncmp+0x8>
 800aba8:	1a98      	subs	r0, r3, r2
 800abaa:	bd10      	pop	{r4, pc}
 800abac:	4610      	mov	r0, r2
 800abae:	e7fc      	b.n	800abaa <strncmp+0x1e>

0800abb0 <__ascii_wctomb>:
 800abb0:	b149      	cbz	r1, 800abc6 <__ascii_wctomb+0x16>
 800abb2:	2aff      	cmp	r2, #255	; 0xff
 800abb4:	bf85      	ittet	hi
 800abb6:	238a      	movhi	r3, #138	; 0x8a
 800abb8:	6003      	strhi	r3, [r0, #0]
 800abba:	700a      	strbls	r2, [r1, #0]
 800abbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800abc0:	bf98      	it	ls
 800abc2:	2001      	movls	r0, #1
 800abc4:	4770      	bx	lr
 800abc6:	4608      	mov	r0, r1
 800abc8:	4770      	bx	lr

0800abca <memmove>:
 800abca:	4288      	cmp	r0, r1
 800abcc:	b510      	push	{r4, lr}
 800abce:	eb01 0302 	add.w	r3, r1, r2
 800abd2:	d807      	bhi.n	800abe4 <memmove+0x1a>
 800abd4:	1e42      	subs	r2, r0, #1
 800abd6:	4299      	cmp	r1, r3
 800abd8:	d00a      	beq.n	800abf0 <memmove+0x26>
 800abda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abde:	f802 4f01 	strb.w	r4, [r2, #1]!
 800abe2:	e7f8      	b.n	800abd6 <memmove+0xc>
 800abe4:	4283      	cmp	r3, r0
 800abe6:	d9f5      	bls.n	800abd4 <memmove+0xa>
 800abe8:	1881      	adds	r1, r0, r2
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	42d3      	cmn	r3, r2
 800abee:	d100      	bne.n	800abf2 <memmove+0x28>
 800abf0:	bd10      	pop	{r4, pc}
 800abf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abf6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800abfa:	e7f7      	b.n	800abec <memmove+0x22>

0800abfc <__malloc_lock>:
 800abfc:	4770      	bx	lr

0800abfe <__malloc_unlock>:
 800abfe:	4770      	bx	lr

0800ac00 <_realloc_r>:
 800ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac02:	4607      	mov	r7, r0
 800ac04:	4614      	mov	r4, r2
 800ac06:	460e      	mov	r6, r1
 800ac08:	b921      	cbnz	r1, 800ac14 <_realloc_r+0x14>
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac10:	f7ff be00 	b.w	800a814 <_malloc_r>
 800ac14:	b922      	cbnz	r2, 800ac20 <_realloc_r+0x20>
 800ac16:	f7ff fdaf 	bl	800a778 <_free_r>
 800ac1a:	4625      	mov	r5, r4
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	f000 f814 	bl	800ac4c <_malloc_usable_size_r>
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d20f      	bcs.n	800ac48 <_realloc_r+0x48>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	f7ff fdf2 	bl	800a814 <_malloc_r>
 800ac30:	4605      	mov	r5, r0
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d0f2      	beq.n	800ac1c <_realloc_r+0x1c>
 800ac36:	4631      	mov	r1, r6
 800ac38:	4622      	mov	r2, r4
 800ac3a:	f7ff f985 	bl	8009f48 <memcpy>
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff fd99 	bl	800a778 <_free_r>
 800ac46:	e7e9      	b.n	800ac1c <_realloc_r+0x1c>
 800ac48:	4635      	mov	r5, r6
 800ac4a:	e7e7      	b.n	800ac1c <_realloc_r+0x1c>

0800ac4c <_malloc_usable_size_r>:
 800ac4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac50:	1f18      	subs	r0, r3, #4
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bfbc      	itt	lt
 800ac56:	580b      	ldrlt	r3, [r1, r0]
 800ac58:	18c0      	addlt	r0, r0, r3
 800ac5a:	4770      	bx	lr

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
